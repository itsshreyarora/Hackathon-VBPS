(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='WolframDesktop 12.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       161,          7]
NotebookDataLength[    641676,      11931]
NotebookOptionsPosition[    635091,      11825]
NotebookOutlinePosition[    635551,      11843]
CellTagsIndexPosition[    635508,      11840]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{3.8022481689844027`*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"5a8ca388-0aad-49b5-a45f-c4970f517b63"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"a", " ", "=", " ", 
   RowBox[{
    RowBox[{"Import", "[", "\"\</home/s/Downloads/survey_data.csv\>\"", "]"}],
     "[", 
    RowBox[{"[", 
     RowBox[{"2", ";;"}], "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.801134712771359*^9, 3.801134753459833*^9}, {
   3.801562689195557*^9, 3.801562691213624*^9}, 3.801562723117882*^9},
 CellLabel->"In[2]:=",ExpressionUUID->"4727370c-7fdf-4e77-a4c9-f778bef31e81"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"10393", ",", "13049", ",", "598.44`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9720", ",", "12673", ",", "604.59`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9507", ",", "12850", ",", "605.54`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10373", ",", "13205", ",", "597.82`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10290", ",", "13770", ",", "606.81`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10187", ",", "13388", ",", "600.86`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10372", ",", "13126", ",", "598.36`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9622", ",", "13626", ",", "608.15`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9637", ",", "13290", ",", "605.76`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9962", ",", "13887", ",", "608.36`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9968", ",", "12970", ",", "602.2`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10924", ",", "13428", ",", "601.84`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9644", ",", "12852", ",", "605.16`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10187", ",", "13725", ",", "606.13`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10070", ",", "13952", ",", "608.43`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10185", ",", "12729", ",", "600.96`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10776", ",", "13536", ",", "603.39`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9902", ",", "13304", ",", "602.9`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10781", ",", "13770", ",", "606.84`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10523", ",", "12908", ",", "600.34`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10630", ",", "13929", ",", "607.88`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9769", ",", "13293", ",", "604.23`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9670", ",", "13730", ",", "609.13`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10954", ",", "12679", ",", "599.75`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10456", ",", "13339", ",", "600.23`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10123", ",", "13733", ",", "606.42`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9803", ",", "13515", ",", "604.63`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9738", ",", "13681", ",", "607.9`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9700", ",", "12880", ",", "604.94`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9528", ",", "12720", ",", "604.84`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10465", ",", "13748", ",", "606.42`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10519", ",", "13296", ",", "600.33`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10697", ",", "14063", ",", "608.33`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10520", ",", "13622", ",", "604.93`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9717", ",", "13487", ",", "605.76`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10145", ",", "13597", ",", "604.99`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10832", ",", "13629", ",", "604.41`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9522", ",", "13690", ",", "609.41`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10825", ",", "12965", ",", "598.96`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10866", ",", "13680", ",", "605.59`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10836", ",", "13883", ",", "607.55`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9931", ",", "13004", ",", "602.52`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10238", ",", "12849", ",", "600.05`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10141", ",", "12798", ",", "601.08`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10434", ",", "13081", ",", "598.51`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10058", ",", "13905", ",", "608.11`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10932", ",", "12772", ",", "599.74`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10286", ",", "12864", ",", "599.93`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10366", ",", "13060", ",", "598.56`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10311", ",", "13079", ",", "598.87`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10707", ",", "13949", ",", "608.35`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10101", ",", "13668", ",", "606"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10587", ",", "13725", ",", "606.01`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10719", ",", "12797", ",", "599.54`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9515", ",", "14064", ",", "614.46`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9737", ",", "13771", ",", "609.14`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10907", ",", "13972", ",", "607.52`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9599", ",", "13324", ",", "605.93`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9683", ",", "13907", ",", "612.5`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9578", ",", "14092", ",", "613.83`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10786", ",", "13824", ",", "607.36`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9894", ",", "13671", ",", "606.61`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10791", ",", "13400", ",", "601.59`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10621", ",", "13125", ",", "599.14`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9726", ",", "13461", ",", "605.25`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9619", ",", "12796", ",", "604.89`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10735", ",", "13174", ",", "600.24`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9996", ",", "13995", ",", "609.11`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9784", ",", "13079", ",", "604.23`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10567", ",", "13025", ",", "598.39`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10092", ",", "13273", ",", "600.55`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10958", ",", "13676", ",", "604.98`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10223", ",", "12868", ",", "599.99`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9912", ",", "12671", ",", "603.42`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9602", ",", "12925", ",", "605.34`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9955", ",", "12888", ",", "602.5`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10567", ",", "13986", ",", "608.11`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10392", ",", "13103", ",", "598.44`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10704", ",", "13059", ",", "598.18`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10570", ",", "13818", ",", "606.75`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10302", ",", "13994", ",", "608.53`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9708", ",", "13956", ",", "612.65`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10249", ",", "13403", ",", "600.73`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10373", ",", "13822", ",", "606.99`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9981", ",", "13173", ",", "601.73`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9520", ",", "12946", ",", "605.73`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10529", ",", "12818", ",", "600.48`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10897", ",", "13724", ",", "605.87`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9805", ",", "13191", ",", "603.92`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9557", ",", "13526", ",", "607.8`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10097", ",", "13434", ",", "602.24`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10277", ",", "12706", ",", "600.78`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10369", ",", "13788", ",", "606.89`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10218", ",", "13969", ",", "608.37`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10039", ",", "13478", ",", "603.27`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9650", ",", "13586", ",", "607.83`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10593", ",", "14022", ",", "608.18`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10716", ",", "13601", ",", "605.05`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10025", ",", "13945", ",", "608.49`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9852", ",", "13192", ",", "603.74`"}], "}"}]}], "}"}]], "Output",\

 CellChangeTimes->{3.801559424107284*^9, 3.8016524087307167`*^9, 
  3.801678331271124*^9, 3.80172832899209*^9, 3.8017337901554117`*^9, 
  3.8022500043278913`*^9, 3.802308681683105*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"e09a0a21-1878-4c75-b5ef-aaef92d7c374"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"b", " ", "=", " ", 
   RowBox[{"{", "}"}]}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.801134758594462*^9, 3.801134763420808*^9}, {
   3.801134847241474*^9, 3.8011348537760477`*^9}, 3.801559125480043*^9, {
   3.801761638883564*^9, 3.801761641441122*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"bd0b29ad-2acf-4c30-aee3-4ae056656c6c"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.8011348544436626`*^9, 3.8011350756209173`*^9, 
  3.801238472033372*^9, 3.80123934315764*^9, 3.80123973367942*^9, 
  3.80128372206497*^9, 3.801295392601816*^9, 3.801398950117605*^9, 
  3.8015591258483*^9, 3.801559428327853*^9, 3.801652411368635*^9, 
  3.801678332289137*^9, 3.8017283300052*^9, 3.80173379322887*^9, 
  3.8022500043405113`*^9, 3.80230868171494*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"f9e13f97-d4d1-490d-9387-d25f047fbea2"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "1"}], ",", " ", 
   RowBox[{"i", "<", 
    RowBox[{"Length", "[", "a", "]"}]}], ",", " ", 
   RowBox[{"i", "++"}], ",", " ", "\[IndentingNewLine]", 
   RowBox[{"AppendTo", "[", 
    RowBox[{"b", ",", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"a", "[", 
        RowBox[{"[", "i", "]"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"1", ";;", "2"}], "]"}], "]"}], " ", "\[Rule]", " ", 
      RowBox[{
       RowBox[{"a", "[", 
        RowBox[{"[", "i", "]"}], "]"}], "[", 
       RowBox[{"[", "3", "]"}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.801134856592265*^9, 3.801134864635798*^9}, {
  3.801134920964417*^9, 3.801135092675901*^9}, {3.801135139416531*^9, 
  3.801135151348545*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"0e407e95-5a7d-459d-93b5-2d51a287e21f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", " ", "=", " ", 
  RowBox[{"Predict", "[", 
   RowBox[{
    RowBox[{"b", "[", 
     RowBox[{"[", 
      RowBox[{";;", "80"}], "]"}], "]"}], ",", 
    RowBox[{"Method", "\[Rule]", "\"\<NeuralNetwork\>\""}]}], " ", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.801135171751371*^9, 3.801135229395289*^9}, {
  3.801238484307251*^9, 3.801238487687204*^9}, {3.8013992433531933`*^9, 
  3.801399244317749*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"1379e3df-6ab0-4450-b010-10b666ae497b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["PredictorFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["80", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  PredictorFunction[
   Association[
   "ExampleNumber" -> 80, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Numerical"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 2]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
         Association[
          "(f1f2)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 2]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {12.1, 0}, "ID" -> 5755441559493940478]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 80, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {10220.775000000001`, 13371.1875}, "Method" -> 
                   "Naive", "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {10220.775000000001`, 13371.1875}, 
                   "StandardDeviation" -> {445.9077532124551, 
                    424.10002044772637`}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Model" -> 
                Association[
                 "Matrix" -> {{-0.7071067811868926, 
                   0.7071067811862023}, {-0.7071067811862023, \
-0.7071067811868926}}, "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {10220.775000000001`, 13371.1875}, 
                    "StandardDeviation" -> {445.9077532124551, 
                    424.10002044772637`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 2, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.017593, "MaxTrainingMemory" -> 110376, 
                  "DataMemory" -> 1456, "FunctionMemory" -> 21936, 
                  "LanguageVersion" -> {12.1, 0}, "Date" -> 
                  DateObject[{
                    2020, 6, 28, 10, 21, 22.524493`8.105230007459529}, 
                    "Instant", "Gregorian", 5.5], "ProcessorCount" -> 4, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 2, "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
             3905946272741463577]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Mean" -> {10220.775000000001`, 13371.1875}, 
             "StandardDeviation" -> {445.9077532124551, 424.10002044772637`}, 
             "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {12.1, 0}, "ID" -> 4219510318259331672]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Numerical"]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 2190607728280493878]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {604.190375}, 
             "StandardDeviation" -> {3.88769676150197}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 7179684466777161657]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 980691586802516877]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "Numerical", "Weight" -> 1], 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "ProbabilityPostprocessor" -> Identity, 
      "InverseProcessorFunction" -> (604.190375 + 3.88769676150197 #& ), 
      "ProcessorFunction" -> (-155.41088003133697` + 
       0.25722170769657987` #& ), "Name" -> "value", 
      "Quantiles" -> {-1.6385987361675916`, 2.641570479903494}], "Prior" -> 
    Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 0, 
    "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["Method" -> "NeuralNetwork", "Network" -> NetGraph[
        Association[
        "Type" -> "Graph", "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "LogStd" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
           "Mean" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
         "Nodes" -> Association[
          "1" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Linear", "Arrays" -> 
                 Association["Weights" -> CompressedData["
1:eJwBvgFB/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
MgAAAAIAAADBn+S+qcrxPZ4ezT/NsAdA+NiJvuAXnz89Myw/YEovvlMJF7+Z
G0w+tdWKvfQqVT7BdZy/UrgeP38yCz/0ZOk90im7vyS4gL+/if++VRmzvnw/
WD96m6m/haeOPs2Kdb+3gLW9W1NAv7k+7D4IgMI/3gaivXri674nK0w9c++c
vKCW+73+lJk/OPUlP/iqCr+2SQU88Fm3P5zr6ry+U9C+rKVvvzhI6rwbSbQ/
7SMrvd2wYD88+2o/XkBov/hGYz8RdBO+Qxm0vq2Stb6t0As/McUCv3gYbr/v
SUy9u/kJP94qIDw9K0q9KmMbvtXRj78TQWE9H7iCv3rxGL9fFYY/JUa8Pn07
fL/vfqy+kDIRPRR3H7zZ9rC/0aefvdF6fD8kTlC+ryAOPzB3GD/kza2+P1qQ
PmoaJr/I+/g+lxOSPkHTgj/xlcA/CAsjvxLpDb/l9Sg/ZN+BPhqDjj79+WA/
ZOA/v98iY788zhy/GSZWPCShij0vfyA+LaKQv1Gdv76CT86+psYlPoqc174A
6nI/tebN1w==
                    "], "Biases" -> 
                   RawArray["Real32",{
                    0.0867786556482315, -0.07645479589700699, \
-0.0559043362736702, -0.050086427479982376`, -0.0031175159383565187`, \
-0.09110197424888611, 
                    0.009335383772850037, -0.238801509141922, \
-0.10322058945894241`, 0.04427315667271614, -0.1506027728319168, 
                    0.011347195133566856`, -0.058192864060401917`, \
-0.08230436593294144, -0.01332176849246025, 0.053267285227775574`, 
                    0.04414578899741173, -0.039847418665885925`, \
-0.10041847825050354`, 0.04448108747601509, 0.011047283187508583`, 
                    0.05630507692694664, -0.11058322340250015`, 
                    0.05085201561450958, 
                    0.09130081534385681, -0.008255946449935436, 
                    0.00865854974836111, 
                    0.044946104288101196`, -0.008746626786887646, \
-0.06742767989635468, 0.05816183239221573, -0.09979762881994247, 
                    0.008822695352137089, -0.020945830270648003`, 
                    0.007127505727112293, 
                    0.09489422291517258, -0.10614728182554245`, \
-0.011648420244455338`, 0.006070126313716173, -0.05412590503692627, 
                    0.1080375611782074, -0.061242472380399704`, \
-0.025586416944861412`, -0.166075199842453, -0.021263549104332924`, \
-0.03982213884592056, 0.04784562066197395, -0.10406719893217087`, 
                    0.047462936490774155`, -0.08108054101467133}]], 
                 "Parameters" -> 
                 Association[
                  "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                   "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {50}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Linear", "Arrays" -> 
                 Association["Weights" -> CompressedData["
1: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
                    
                    "], "Biases" -> 
                   RawArray[
                    "Real32",{-0.047384168952703476`, -0.02487257309257984, \
-0.019368762150406837`, -0.027901053428649902`, 
                    0.04380856826901436, -0.13436077535152435`, 
                    0.005880554672330618, -0.00210402044467628, 
                    0.010023453272879124`, 0.022979270666837692`, 
                    0.017609836533665657`, 0.015386042185127735`, 
                    0.016686711460351944`, -0.013211175799369812`, 
                    0.0540468655526638, 
                    0.06892238557338715, -0.08177703619003296, 
                    0.008157538250088692, 0.06756877899169922, 
                    0.022489270195364952`, -0.013508645817637444`, \
-0.017480701208114624`, 
                    0.02075740322470665, -0.11497583985328674`, \
-0.02004849538207054, -0.019862107932567596`, -0.06384570151567459, 
                    0.06009792909026146, -0.03570482134819031, \
-0.04862246289849281, 0.006336030084639788, 
                    0.00586579879745841, -0.00972534716129303, \
-0.08847339451313019, 0.06373648345470428, -0.043361492455005646`, 
                    0.03347839042544365, 
                    0.050980012863874435`, -0.08054059743881226, \
-0.06694479286670685, 0.03716371953487396, 0.015442611649632454`, 
                    0.05386485531926155, 0.017688585445284843`, 
                    0.024876240640878677`, 
                    0.05434926226735115, -0.08382140845060349, 
                    0.09322302788496017, 
                    0.005458991974592209, -0.01914714090526104}]], 
                 "Parameters" -> 
                 Association[
                  "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                   "$InputSize" -> 50, "$InputDimensions" -> {50}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {50}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "5" -> 
               Association[
                "Type" -> "Linear", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   RawArray["Real32",{{
                    0.08712942153215408, -0.05104115977883339, \
-0.01900724694132805, -0.037917621433734894`, 0.1819363385438919, 
                    0.0887628123164177, 0.22446848452091217`, 
                    0.21467147767543793`, 
                    0.009298590011894703, -0.10802842676639557`, \
-0.16091954708099365`, 0.33468952775001526`, -0.24511060118675232`, 
                    0.09762214124202728, 
                    0.08295438438653946, -0.24493412673473358`, 
                    0.31037232279777527`, -0.22419624030590057`, \
-0.24377280473709106`, -0.17096257209777832`, -0.17007802426815033`, 
                    0.05388333648443222, 0.06911246478557587, 
                    0.0587783008813858, -0.10506504029035568`, 
                    0.07046106457710266, 
                    0.1827481985092163, -0.14377529919147491`, \
-0.13433979451656342`, 0.07605229318141937, 
                    0.13553816080093384`, -0.016803324222564697`, \
-0.005481502506881952, 0.16841593384742737`, -0.13807295262813568`, 
                    0.00529442960396409, -0.07593633979558945, 
                    0.07445260882377625, 0.07827626913785934, 
                    0.056428421288728714`, -0.13547374308109283`, \
-0.21145109832286835`, -0.07028146833181381, -0.03165408968925476, \
-0.10460195690393448`, 0.29428744316101074`, 
                    0.05933040753006935, -0.028202783316373825`, 
                    0.04146566614508629, -0.0953049436211586}}], "Biases" -> 
                   RawArray["Real32",{0.011001608334481716`}]], "Parameters" -> 
                 Association[
                  "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 
                   50, "$InputDimensions" -> {50}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]],
            "2" -> Association[
            "Type" -> "ConstantArray", "Arrays" -> 
             Association["Array" -> RawArray["Real32",{-1.972097635269165}]], 
             "Parameters" -> 
             Association["Dimensions" -> {1}, "$ArrayDimensions" -> {1}], 
             "Inputs" -> Association[], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Outputs", "Mean"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "LogStd"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"]}], 
        Association["Version" -> "12.1.4", "Unstable" -> False]], "Training" -> 
      Association[
       "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "TotalTrainingTime" -> 0.403609, "MeanInputsPerSecond" -> 
        95141.58504889633], "InputType" -> "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "(f1f2)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 2]], "Output" -> 
         Association[
          "(f1f2)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 2]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Mean" -> {-0.000615041287915355, -0.0006313322858369788}, 
             "StandardDeviation" -> {0.9990982833840761, 0.9994890212998497}, 
             "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {12.1, 0}, "ID" -> 7118894546158539095]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 2],
              "Key" -> "(f1f2)", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "FeatureNumber" -> 2, 
      "DistributionData" -> {NormalDistribution, Automatic}, "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "NetworkType" -> 
        Association["Value" -> "FullyConnected", "Options" -> Association[]], 
        "NetworkDepth" -> 
        Association["Value" -> 2, "Options" -> Association[]], 
        "NumberOfParameters" -> 
        Association["Value" -> 2650, "Options" -> Association[]], 
        "ActivationFunction" -> 
        Association["Value" -> "SELU", "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> None, "Options" -> Association[]], "Dropout" -> 
        Association["Value" -> None, "Options" -> Association[]], 
        "NetInitializationMethod" -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association[
         "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> 
          Association[]], MaxTrainingRounds -> 
        Association["Value" -> 300, "Options" -> Association[]], 
        ValidationSet -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "EarlyStopping" -> 
        Association["Value" -> False, "Options" -> Association[]], 
        TrainingProgressReporting -> 
        Association["Value" -> None, "Options" -> Association[]], 
        "NetTrainOptions" -> 
        Association[
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> Association[]], "LossFunction" -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "ValidationSetRatio" -> 
        Association["Value" -> None, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[8497], "TrainingFunction" -> Predict, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 1.3578168901156948`, "PreprocessingTime" -> 
      3.441333`6.988271692581644, "LossName" -> "StandardDeviation", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[1.592768403185008, 0.10851755730944977`],
          "StandardDeviation" -> 
         Around[1.298719009018017, 0.27170304362979775`], "EvaluationTime" -> 
         0.00009013676349717043, "TestSize" -> 70, "ModelMemory" -> 64016, 
         "ModelUtility" -> -0.9955410914901978, "TrainingSize" -> 10, 
         "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 328504, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[1.592768403185008, 0.07673350065131172]}, 
         "StandardDeviationHistory" -> {
           Around[1.298719009018017, 0.19212306461965437`]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
           2, "NumberOfParameters" -> 2650, "ActivationFunction" -> "SELU", 
           "L2Regularization" -> None, "Dropout" -> None, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
           MaxTrainingRounds -> 300, ValidationSet -> Automatic, 
           "EarlyStopping" -> False, TrainingProgressReporting -> None, 
           "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}, 
         "FinalTrainingSize" -> 80], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
          "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
          "TrainingTime", "TrainingMemory", "ExperimentCount", 
          "MeanCrossEntropyHistory", "StandardDeviationHistory", 
          "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 232911986300074]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 17650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 300], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.8244015367602826`, 0.13239186471429992`], 
              "StandardDeviation" -> 
              Around[1.529697384675356, 0.24163121973447185`], 
              "EvaluationTime" -> 0.00022641331320873048`, "TestSize" -> 70, 
              "ModelMemory" -> 194392, "ModelUtility" -> -1.1493778832341444`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 2576424, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.8244015367602826`, 0.09361518531341348]}, 
              "StandardDeviationHistory" -> {
                Around[1.529697384675356, 0.17085907402062175`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.2207186345869108`, 0.3486956852104374], 
              "StandardDeviation" -> 
              Around[1.549189156551089, 0.9488185495499109], "EvaluationTime" -> 
              0.0012470389468555493`, "TestSize" -> 16, "ModelMemory" -> 
              194392, "ModelUtility" -> -1.2689278798296892`, "TrainingSize" -> 
              64, "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              849752, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.2207186345869108`, 0.24656508358279]}, 
              "StandardDeviationHistory" -> {
                Around[1.549189156551089, 0.6709160305023262]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0012470389468555493`, "ModelMemory" -> 
             194392, "StandardDeviation" -> 
             Around[1.549189156551089, 0.9488185495499109], "TrainingMemory" -> 
             849752, "TrainingTime" -> 1.0059531092114269`], "Index" -> 1], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 7650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 300], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 2], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 2650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9954056412552923, 0.2868933591030063], 
              "StandardDeviation" -> 
              Around[1.4987950785692918`, 1.0078738550527488`], 
              "EvaluationTime" -> 0.000625, "TestSize" -> 16, "ModelMemory" -> 
              66064, "ModelUtility" -> -1.2240195013807547`, "TrainingSize" -> 
              64, "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
              352472, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.9954056412552923, 0.20286423969912307`]}, 
              "StandardDeviationHistory" -> {
                Around[1.4987950785692918`, 0.7126744374884262]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000625, "ModelMemory" -> 66064, 
             "StandardDeviation" -> 
             Around[1.4987950785692918`, 1.0078738550527488`], 
             "TrainingMemory" -> 352472, "TrainingTime" -> 
             1.4297908225037066`], "Index" -> 3], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 7650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 4], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 17650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 300], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 5], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 2650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 300], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 6], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 2650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 300], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.592768403185008, 0.10851755730944977`], 
              "StandardDeviation" -> 
              Around[1.298719009018017, 0.27170304362979775`], 
              "EvaluationTime" -> 0.00009013676349717043, "TestSize" -> 70, 
              "ModelMemory" -> 64016, "ModelUtility" -> -0.9955410914901978, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.25118864315095796`, 
              "TrainingMemory" -> 328504, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.592768403185008, 0.07673350065131172]}, 
              "StandardDeviationHistory" -> {
                Around[1.298719009018017, 0.19212306461965437`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.1532413066417293`, 0.28300529377123435`], 
              "StandardDeviation" -> 
              Around[1.5312733937721552`, 0.9671945991578473], 
              "EvaluationTime" -> 0.00031324202101704496`, "TestSize" -> 16, 
              "ModelMemory" -> 64016, "ModelUtility" -> -1.238233164856733, 
              "TrainingSize" -> 64, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 329560, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1532413066417293`, 0.2001149623373308]}, 
              "StandardDeviationHistory" -> {
                Around[1.5312733937721552`, 0.6839098597915184]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00031324202101704496`, "ModelMemory" -> 
             64016, "StandardDeviation" -> 
             Around[1.5312733937721552`, 0.9671945991578473], 
             "TrainingMemory" -> 329560, "TrainingTime" -> 
             0.5041708559644282], "Index" -> 7], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 17650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 8], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 17650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 9], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 7650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 10]], 
        
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
              "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
              "TrainingTime", "TrainingMemory", "ExperimentCount", 
              "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
             TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "ModelMemory", "StandardDeviation", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 232907691332778]], "MaxTrainingSize" -> 80, 
      "PreprocessorEvaluationTime" -> 3.56005859375`3.*^-6, 
      "PreprocessorMemory" -> 39912, "InputDimension" -> 2, "OutputDimension" -> 
      1, "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
      True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
      "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
      "LastReportingTime" -> 3.802328489134396`16.332624622693036*^9, 
      "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 1.1299528634304417`, 
          "ElapsedTimes" -> 0.967953, "ExperimentCounts" -> 2], 
         Association[
         "TrainingSizes" -> 64, "TimeBudgets" -> 1.6142183763292024`, 
          "ElapsedTimes" -> 1.9049719999999999`, "ExperimentCounts" -> 3]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 2], 
        Association["ID" -> 232920576234666]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {10520}, "ID" -> 
           5142930126636850502], "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13622}, "ID" -> 
           2440167495271743905]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 7.191442, 
      "MaxTrainingMemory" -> 44909064, "DataMemory" -> 13504, 
      "FunctionMemory" -> 248592, "LanguageVersion" -> {12.1, 0}, "Date" -> 
      DateObject[{2020, 6, 28, 10, 21, 29.65293`8.224642593620315}, "Instant",
         "Gregorian", 5.5], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Unix", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.801559447334277*^9, 3.801652437455484*^9, 
  3.8016783485665283`*^9, 3.8017283436782627`*^9, 3.801733802168075*^9, 
  3.802250012599642*^9, 3.802308689692028*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"34a38d58-4a09-4bf7-a3a5-7ae7831a7647"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["b"], "Input",
 CellChangeTimes->{3.801763084156167*^9},
 CellLabel->"In[6]:=",ExpressionUUID->"7ed68a47-bf36-4510-b666-6d42916535ee"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10393", ",", "13049"}], "}"}], "\[Rule]", "598.44`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9720", ",", "12673"}], "}"}], "\[Rule]", "604.59`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9507", ",", "12850"}], "}"}], "\[Rule]", "605.54`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10373", ",", "13205"}], "}"}], "\[Rule]", "597.82`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10290", ",", "13770"}], "}"}], "\[Rule]", "606.81`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10187", ",", "13388"}], "}"}], "\[Rule]", "600.86`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10372", ",", "13126"}], "}"}], "\[Rule]", "598.36`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9622", ",", "13626"}], "}"}], "\[Rule]", "608.15`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9637", ",", "13290"}], "}"}], "\[Rule]", "605.76`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9962", ",", "13887"}], "}"}], "\[Rule]", "608.36`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9968", ",", "12970"}], "}"}], "\[Rule]", "602.2`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10924", ",", "13428"}], "}"}], "\[Rule]", "601.84`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9644", ",", "12852"}], "}"}], "\[Rule]", "605.16`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10187", ",", "13725"}], "}"}], "\[Rule]", "606.13`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10070", ",", "13952"}], "}"}], "\[Rule]", "608.43`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10185", ",", "12729"}], "}"}], "\[Rule]", "600.96`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10776", ",", "13536"}], "}"}], "\[Rule]", "603.39`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9902", ",", "13304"}], "}"}], "\[Rule]", "602.9`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10781", ",", "13770"}], "}"}], "\[Rule]", "606.84`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10523", ",", "12908"}], "}"}], "\[Rule]", "600.34`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10630", ",", "13929"}], "}"}], "\[Rule]", "607.88`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9769", ",", "13293"}], "}"}], "\[Rule]", "604.23`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9670", ",", "13730"}], "}"}], "\[Rule]", "609.13`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10954", ",", "12679"}], "}"}], "\[Rule]", "599.75`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10456", ",", "13339"}], "}"}], "\[Rule]", "600.23`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10123", ",", "13733"}], "}"}], "\[Rule]", "606.42`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9803", ",", "13515"}], "}"}], "\[Rule]", "604.63`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9738", ",", "13681"}], "}"}], "\[Rule]", "607.9`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9700", ",", "12880"}], "}"}], "\[Rule]", "604.94`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9528", ",", "12720"}], "}"}], "\[Rule]", "604.84`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10465", ",", "13748"}], "}"}], "\[Rule]", "606.42`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10519", ",", "13296"}], "}"}], "\[Rule]", "600.33`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10697", ",", "14063"}], "}"}], "\[Rule]", "608.33`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10520", ",", "13622"}], "}"}], "\[Rule]", "604.93`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9717", ",", "13487"}], "}"}], "\[Rule]", "605.76`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10145", ",", "13597"}], "}"}], "\[Rule]", "604.99`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10832", ",", "13629"}], "}"}], "\[Rule]", "604.41`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9522", ",", "13690"}], "}"}], "\[Rule]", "609.41`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10825", ",", "12965"}], "}"}], "\[Rule]", "598.96`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10866", ",", "13680"}], "}"}], "\[Rule]", "605.59`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10836", ",", "13883"}], "}"}], "\[Rule]", "607.55`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9931", ",", "13004"}], "}"}], "\[Rule]", "602.52`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10238", ",", "12849"}], "}"}], "\[Rule]", "600.05`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10141", ",", "12798"}], "}"}], "\[Rule]", "601.08`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10434", ",", "13081"}], "}"}], "\[Rule]", "598.51`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10058", ",", "13905"}], "}"}], "\[Rule]", "608.11`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10932", ",", "12772"}], "}"}], "\[Rule]", "599.74`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10286", ",", "12864"}], "}"}], "\[Rule]", "599.93`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10366", ",", "13060"}], "}"}], "\[Rule]", "598.56`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10311", ",", "13079"}], "}"}], "\[Rule]", "598.87`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10707", ",", "13949"}], "}"}], "\[Rule]", "608.35`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10101", ",", "13668"}], "}"}], "\[Rule]", "606"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10587", ",", "13725"}], "}"}], "\[Rule]", "606.01`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10719", ",", "12797"}], "}"}], "\[Rule]", "599.54`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9515", ",", "14064"}], "}"}], "\[Rule]", "614.46`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9737", ",", "13771"}], "}"}], "\[Rule]", "609.14`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10907", ",", "13972"}], "}"}], "\[Rule]", "607.52`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9599", ",", "13324"}], "}"}], "\[Rule]", "605.93`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9683", ",", "13907"}], "}"}], "\[Rule]", "612.5`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9578", ",", "14092"}], "}"}], "\[Rule]", "613.83`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10786", ",", "13824"}], "}"}], "\[Rule]", "607.36`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9894", ",", "13671"}], "}"}], "\[Rule]", "606.61`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10791", ",", "13400"}], "}"}], "\[Rule]", "601.59`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10621", ",", "13125"}], "}"}], "\[Rule]", "599.14`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9726", ",", "13461"}], "}"}], "\[Rule]", "605.25`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9619", ",", "12796"}], "}"}], "\[Rule]", "604.89`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10735", ",", "13174"}], "}"}], "\[Rule]", "600.24`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9996", ",", "13995"}], "}"}], "\[Rule]", "609.11`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9784", ",", "13079"}], "}"}], "\[Rule]", "604.23`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10567", ",", "13025"}], "}"}], "\[Rule]", "598.39`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10092", ",", "13273"}], "}"}], "\[Rule]", "600.55`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10958", ",", "13676"}], "}"}], "\[Rule]", "604.98`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10223", ",", "12868"}], "}"}], "\[Rule]", "599.99`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9912", ",", "12671"}], "}"}], "\[Rule]", "603.42`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9602", ",", "12925"}], "}"}], "\[Rule]", "605.34`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9955", ",", "12888"}], "}"}], "\[Rule]", "602.5`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10567", ",", "13986"}], "}"}], "\[Rule]", "608.11`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10392", ",", "13103"}], "}"}], "\[Rule]", "598.44`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10704", ",", "13059"}], "}"}], "\[Rule]", "598.18`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10570", ",", "13818"}], "}"}], "\[Rule]", "606.75`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10302", ",", "13994"}], "}"}], "\[Rule]", "608.53`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9708", ",", "13956"}], "}"}], "\[Rule]", "612.65`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10249", ",", "13403"}], "}"}], "\[Rule]", "600.73`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10373", ",", "13822"}], "}"}], "\[Rule]", "606.99`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9981", ",", "13173"}], "}"}], "\[Rule]", "601.73`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9520", ",", "12946"}], "}"}], "\[Rule]", "605.73`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10529", ",", "12818"}], "}"}], "\[Rule]", "600.48`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10897", ",", "13724"}], "}"}], "\[Rule]", "605.87`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9805", ",", "13191"}], "}"}], "\[Rule]", "603.92`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9557", ",", "13526"}], "}"}], "\[Rule]", "607.8`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10097", ",", "13434"}], "}"}], "\[Rule]", "602.24`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10277", ",", "12706"}], "}"}], "\[Rule]", "600.78`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10369", ",", "13788"}], "}"}], "\[Rule]", "606.89`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10218", ",", "13969"}], "}"}], "\[Rule]", "608.37`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10039", ",", "13478"}], "}"}], "\[Rule]", "603.27`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9650", ",", "13586"}], "}"}], "\[Rule]", "607.83`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10593", ",", "14022"}], "}"}], "\[Rule]", "608.18`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10716", ",", "13601"}], "}"}], "\[Rule]", "605.05`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10025", ",", "13945"}], "}"}], "\[Rule]", "608.49`"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.801763084433832*^9, 3.802250012911159*^9, 
  3.802308689941853*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"1a5649c0-ed9b-43b4-8933-1069d67b81ef"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.801559432131078*^9, 3.8015594465675087`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"847e00ea-933e-4733-9f67-859ba04d4591"],

Cell[BoxData[
 RowBox[{
  Graphics3DBox[{{GraphicsComplex3DBox[CompressedData["
1:eJxdlllsTVEYhbcx5gRNDEHNaQUvREK0drwo4aEVJNIXQ3kgUQ9CEDkqJFJj
QswelBeiMdY1VOltOXsfbVREjRHRGqvGlki5zrn/tyXtSZqTu+7q+tde+9//
vsMWr8rJa6+UWhr+dVDyeLMrdPK90eiG7NiQrRcLkp9VS7ngt3yduvVjdqxO
cG+v4GqA0SH7Y3YD+HR0rNHxprTc3cXoDBBc1VudUjzj1fpm+PVxwUdbvSH6
4g58dFSREfwCeEDdY1ZPiJ52W0TnAXiT0ZF8SiP8NaLvpQai0174ah115xl9
+FD41MCfXynvKVbWWw3+CP2BRofqxTPet/bvVVtdW5Sf0e0r/DPo60BndAu/
6YDPOvjPfZ0VCd2F34O6+VZHZYc8A1+ATouR9dZSt1fl/zyTPl2eO8ltkhG8
HJ04+zIxEJ8J+Cn4aTb6ZAjXvoL/mvXWsK6u5JYndb24L59vwl+Jfk8rOrfR
r0T/gdW7y8OG+A4+CjwP/Xp0OoHH2F98qm/4SaM/34IfBX9Mf75BP58cnrap
Wwj+y+jV0caQj1eH/7WB4K5PdsA/YmUfqev9lrreAtuq37z7+N9ldU50MJzP
NHI7bqV/XoMfwn8peHf6ZCT8HCN9cgX+ZPY9xr5z7tQY+IMDvSx6WvCTR/8s
Mzo3CuIh/AQ++xvh34JfDT/hSw4+/EXks4PzdQn8FDppnC9Fbgvx+c2XHErh
9yPPoUbyLAOfBl5gZD6g742gbqHR6dECSsDfg2cGuupe+LBf3jX8X7Dy/gL/
LPxq9svhn8H/+jLHboDvL5f/XxdI/hPQ78h66zmnnAtvDuudFUjOLv8ydDrT
P5+df8G99EC+H0lul+Fvow/Hg/dGX5Hzb3Kbi5+LzM8f6PeFP5Y+uQd+k/We
MOL/KjoJ/Mwitw/wDX7CfJJ81/8/2a/rRvaX86624WcePrvgfxB4Yes54xXh
Jx8/7t4pgd9Af1aAL2ddJcyZ/37Y9+H4cX2Vi06ZL3PAzdXbrDeTOenWuxqd
sUbeD1v7VNlt+tzdmwfa3JvvwDfT5+fBT6Hzh5yZ2yoVPMwtomd0RL9ZfKrp
gczDUa4P0R9HDpX4dPdmgvnzE3wTOVwj/yrqHkR/Jvgn+HvQ6QoeB88i//Ac
Jc+jm3uj0Y8byfkl+Gn0V1jZx7/gMXLOwCf3r9eHujW+5MDvAU+DN3LuWJdq
om5WIH7cHDiC/lwr5/Ep/Cf42W7lfDk/59Bfwn3N7wrVSM578P8O/j7qTg3E
P/e7yqRuBX34okD/A5Nc2hk=
      "], {{
        {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
          GrayLevel[1], 3], 
         StyleBox[GraphicsGroup3DBox[Polygon3DBox[CompressedData["
1:eJwNw2mXqQAAANChsiRb2dOTJDsJjTWi7EuRkCbE9/cH3497c8+5Wfvv0XZ+
fX39+w38xjo2Cdb4wsHHnWV9UwmZ61D1G2D2oJuQN/saeKLovmg8c7gYQ0+0
y7kmQNfiCEsLDvRtqyy3ssnx92AIaRZEU4FUW80OcRGtW8F6KgAF6GpllTyB
WPFq5J4Xkw+PEeDPdOMnVG13+8SwfLE7iPunhKbsqCTpqO0DkNVOCQ+6Hfek
lehOgLtnbjF1Ep44M1IwMgnm7TCefo5aUW9fj4leZJmfFRD0/oCFVD6M8I3C
B42Vie2ymC9dezNkPIoqW2J988omW6lUQ0I3PT9MOLbJOprSO1hoIKk63Egg
NUeEjThWvqob5Limu5V9lXqtR1uIXPhOhko0+OuyR9rUsQvH093y1pdt9fpe
sTUqYdfRNzNg4oPHnQ7bY71vCGl8MiMj89qErBliTibKzukfPzCtzSezyWHQ
PY7J2flTVofSux7k5xH/BqiwK9d9gSSWn5vsW3EinlubIa8uV7frNh2Itl77
pqODKXt381CYaao15w9HaahkOkFLGhyHu5dKnZLmhdWBTeYHQs+LjKKVfWcX
eNIZIMJeltdiBqJG11LMe7NUyfAw9N0VsOro4m6uEwne/Mlo0I9W/sgPHM1j
9i76enqMZ9rzEHD1lTUY3e5Q9Tf8luDPGf0PCndxjg==
            "]]],
          Lighting->"Neutral"]}, {}, {}, {}, {}}, 
       {GrayLevel[0], Line3DBox[{72, 24, 74, 2, 30, 3, 55, 60, 33, 57, 72},
         VertexColors->None]}},
      VertexColors->CompressedData["
1:eJx1Vvk/1AsXHlOpbpukkuUtubIVlxhcy5OmW5bSIoWUK2TplkqS6CZZUqJF
btb2m8hWipLtSpZiFoNhzDBm+c6IoiSD8s4/0A/nc3485zzPc55ztA6G7PIn
k0gkP3nMkEfsGlsF/wVsJLVfTz7xWyXMa8e5/0QJcP1sXbmdWxd6zztc83st
Qqyx/njmSD8GzdPG2PVcKHhLKR0dYpwUNrd+4fdixOG1TbYhD5SigSfL2BUQ
TCfn7uD2YTCYvtPGux/JE3ayXQ8IxMQEq91hsLHRirCrd6FhpszD80BoB/bW
/remaVoKm5Gut1GdbBSur86YMbMSG5vuzJnQESD8HdlO5iFGEtXQYaiOwOFI
r79UAtqgp+Aacp7gwcib7BI5mwDfT+dEzkUeOLOWZvp8FuOBGzUiP59AR266
4jSdicdDEeXK1xnoCCpfoWfXBy9W+VkfeykCX5hREzrp8KzSp/KVeKAaFP2g
VkrhVc05nMDg4GNY+256jBgk09+/W6jzkdZ6ymx3QB9eph/SdvYgsErnr2cs
ag9+JN6KfK1N4Jz2bxrdt+VZq55b9i8T7jFL7QhnGjLSvlHVN3fC3TM5zkp9
ALksxnFzJgs5sY4WqYkCbLVktoWlizF/RLR+xKENf3xl+CbK8duQwUmpExP4
1sqYjA7rR3ysSeHNRwQuOV9Ma8tjY1Na0kRxBQ1VSyvyQ9SYmE4d9rkCKRSN
pjK6L4kwJjnA3/WWwNSNdVtZviy8tzBo5b7rxNzVPf97aiXCYlbis0ANIT6X
VGxwXCzFIaNjEU/0Cbh1hf8xPE2HonCH3rkMOmyjtZnDnGaQvFWazLQk8L/2
KayCSUPjx0g1sjEDio991guWSdHiVVVUbcvHoGyo8VMEgWF74j25uRtq3fp6
o9FdSFGzXDvQLMLRFNHbQHo/auMczE0zRDAWvzyiI++z54HCYfWdLOQaXtjy
tK0bnpPjWWHWYhwKXTFXg8ZH3sYZJX8d6obK97vpusvF6IvdOFNjdf9P6554
s92sqZKGW+/ic+bMYuL3+mwSx1oK39gbub9zxXjL5i58XUyg3JAepylgYvzG
4w9vGrsxrWJLYVmIwd4X3B7Yyf+p3vpW1im7/cKB/5kHOVnbxOgdiJ2X9ZCP
wO5T1OSrbHB3KrvPixSBFNPlRk4QAMV2CUeqpAhPsDExYYtREjS8aOlpOlIk
Gw95JbYhn2ode/HPGgT8oVHZdFPOX6T5+4LZPPAa9p4S8sXoub+iMPxGLxoT
lfSfXxGiOO18+4YmAiERMbSqW+0oZIiGn3oysar9X50ICz6Sg2oDh+5JYE/L
jQsZp8EvKdsjfh8NmYtS9rmzJLjVU7fA7jYNinEcKmU9GzvJLX8HLRyA6pir
2VWvTsjIg/dd91ai5uXDcZ9GARo1guc6yflY5hhm7PCGwHP3UqP4pDYMpofv
IT2gg07tspS9bIYPybvnq6oE1lEBmk1z6Nj75IUG16MFC3cXvJt8JEH5N4a7
Pa8Dyg47plRDK5FaOpUd+0OAGqfbswheG/Z62dnn7q/CjtGK4BvOIhyIS729
+4MYnue18vcVEHivr2Ayt5OJJbW6cdWL+xD/+szfSTYEpH63rYWLuHAvLGvZ
rdqHhYcNLv9nR0BTp6jVhMTFo8azI8sPMqD1cD7uKjfC8t76A/NOEhh4b/tr
VMgH3EvX7VRprEGD3/Hpa9IahJja2OxRlaKYfH3LlC4Bb3cldbGMjnrFnNqS
U0Kw1WTkODn+gd6btFil7VBMOKbs1tCLzLEnOsrrCKjpmFDqz3LxdZL7teH9
IGwPLmV3cjnI+bayt1ijEfsubDU90fEBAdLSiQY5Pkc8AqK8NeoQ5WT9aXRS
gJkmWneGmwmc7rhvkOnUgei248KGZj5GF3zcmJZMwHCDjOfA6sLbI2bRZdFy
HVn6zZCu7sG2rcsPfu2U4o7OJd0tPCbOBYU6j9T9h53iHh+KgRg2xybiFB16
MCud3PAiTYznixWW3GT1oZ9CjVqU3Y1VUdsyXfTF8JgqUMwa52OX71qb+3Qa
2BbFukGbGMg6XZp6U02Kb8WvHI1nSMGMW8udL5/XnrM5Y+Z8xk99Zu2a6p5n
l9kwvGpEKVCpBKv+rmXYZgGcWhNtS1NoOKo6q1bAacNEVsV+4ytSVF+UvgiY
7oZlqsRi0lEMEbO9U1LABzGieSyaTMdJTYOKEs9WDJnkLDGokkCWY1374wML
7p9UJ/UzBCiYdBduuCDGsVUr7sRVyX26wtgqO08M+kiD3ucrfUha4j2k58LE
tY+EilCXj9V9SnmsJ5Kf6vxnd/P7yzNU05xu7JmtPTb3zmuocTIky3z7Ibvf
8v2paT+axR4pLdkEznw0Wm21sgsZKdkudsEErI7G6I/Ledyy/JX5rmAmjB5u
H7lUNIgC89DeMZ9u3FBKsn2c0IDEq/R1pGAahvC0cPX+dphTks1f0aS4WMPe
xhbK65h/pAjKCDjZas5ol3QiL7yodXcJHfzT1AsXLbjYpnS5iNwkxaXjXyoU
ani45fpFt4tEYPOvY+XPy3gYUOpj7M+hQbT8Hz/lzW148Sm81CVUCo2Akny3
071w7U3uallJoOQBs+4Lh4t4nZP/vEnvQJQo/VVqoRARRU3ftBeL0E9rNona
JsL80c9FcxoIxG7n0ssKWRgKSqhek8/AKIVivWt/H9YTKyavr5NCKY+0IMGb
BrfCsmGdxnZs37RWg9IvxYmT+stzMvqRU13PmSnf94YsP3/9YDZK42+mHZXJ
fVnff8vkYwLXdE17RpuZUM4zMFM6zAKPPU/PdosAUsOya47yP8DB1Tb9nJ8I
gpDImDfy+6IcpH7u3nUWuC5hD6eOieFb/UztsfyvmEjNUJt2aoN1fo+VyJmD
zN55s/19xXA9c9ueFsqH45XMP39xIbBGc3K4/CaBI+ruvWdimOD5y17Nn26H
gl+ltrKzEM817qb6pInwf2Cm2cw=
       "],
      VertexNormals->CompressedData["
1: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
zH3YtngjyOdXXKX+K/4HMujlFg==
       "]], {}, {}}, 
    CuboidBox[{9500, 12600, 590}, {11000, 14050, 601}]},
   Axes->True,
   AxesLabel->{None, None, None},
   BoxRatios->{1, 1, 0.4},
   DisplayFunction->Identity,
   FaceGridsStyle->Automatic,
   ImageSize->{964.4970726191445, 888.1818181818181},
   Lighting->"Neutral",
   Method->{"DefaultBoundaryStyle" -> Directive[
       GrayLevel[0.3]], 
     "DefaultGraphicsInteraction" -> {
      "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
       "Effects" -> {
        "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
         "Droplines" -> {
          "freeformCursorMode" -> True, 
           "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
     "Globe"},
   PlotRange->{Full, Full, All},
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.02], 
      Scaled[0.02]}},
   SphericalRegion->True,
   Ticks->{Automatic, Automatic, Automatic},
   ViewAngle->0.42769327351158737`,
   ViewPoint->{2.4145489822003268`, -1.5398962461731887`, 1.8024074909902497`},
   ViewVertical->{-0.44910117363872604`, 0.2864175531481807, 
    0.8463292037292155}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{
  3.8017290505661488`*^9, {3.801729089527626*^9, 3.8017290932345953`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"ece5c57f-d3be-4f4b-a46a-fce468ff3da1"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.802413971179137*^9, 
  3.802413971375098*^9}},ExpressionUUID->"6cedd737-f182-4336-9705-\
b6bb8b1b1589"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{
  3.802308492496472*^9, {3.802413968831039*^9, 
   3.80241396906083*^9}},ExpressionUUID->"0bc8afe9-0e3b-4538-bcbe-\
8b70d772790e"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.80241396665279*^9, 
  3.802413967000903*^9}},ExpressionUUID->"626abb8e-a265-43ed-b9c7-\
f2e99dbda43b"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.801649901284052*^9, 3.801649926212698*^9}, 
   3.801649971630673*^9},
 CellLabel->"In[10]:=",ExpressionUUID->"7c62b28e-1776-4d5d-b5ee-c9a71a33f479"],

Cell[BoxData[" "], "Input",
 CellChangeTimes->{{3.801650061499556*^9, 3.801650062196232*^9}, {
   3.8016521280692387`*^9, 3.801652131620129*^9}, 3.801653037460084*^9},
 CellLabel->"In[11]:=",ExpressionUUID->"1722031f-161f-4479-9903-92e8758318c8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"treedata2", "=", 
  RowBox[{"{", "}"}]}]], "Input",
 CellChangeTimes->{{3.801654962135522*^9, 3.8016549659819107`*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"42218436-8e48-4cf8-9b3f-def10a98ae75"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.801654966452187*^9, 3.801655110446787*^9, 
  3.801655183855898*^9, 3.801655249057557*^9, 3.801678380514551*^9, 
  3.801728765516964*^9, 3.8017338046244707`*^9, 3.801734731932694*^9, 
  3.802250013000936*^9, 3.802308690044207*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"c990708c-9dd5-47bf-9c51-489d694c6cee"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"TreeFunc", "[", "pre_Real", "]"}], " ", ":=", 
  "\[IndentingNewLine]", " ", 
  RowBox[{"If", "[", "\[IndentingNewLine]", " ", 
   RowBox[{
    RowBox[{"pre", " ", ">", " ", "609"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Return", "[", " ", "\"\<treetype1\>\"", "]"}], ",", " ", 
    "\[IndentingNewLine]", 
    RowBox[{"If", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"pre", ">", "603"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", " ", "\"\<treetype2\>\"", "]"}], ",", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"pre", " ", ">", "601"}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "  ", "\"\<treetype3\>\"", "]"}]}], 
       "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.801650084679653*^9, 3.801650144135663*^9}, {
   3.801650258050727*^9, 3.8016502671029387`*^9}, {3.8016520601621428`*^9, 
   3.801652064391403*^9}, {3.801652140081584*^9, 3.801652143250127*^9}, {
   3.801652211944784*^9, 3.801652234853305*^9}, {3.801652357417594*^9, 
   3.801652390528808*^9}, {3.801655014273033*^9, 3.801655021856031*^9}, 
   3.8016788645117188`*^9, {3.801678982250746*^9, 3.801679022944417*^9}, 
   3.801679053857485*^9, {3.8017348166226273`*^9, 3.801734878415547*^9}, {
   3.801735070223001*^9, 3.8017351186113033`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"1704e8ab-c0d7-4e17-a985-415299e87c72"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\n"}]], "Input",
 CellChangeTimes->{3.801654972020698*^9, 3.801746227542498*^9},
 CellLabel->"In[14]:=",ExpressionUUID->"a41be85d-0a07-40a4-989b-e80cd19b06ad"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GeneratedData", "=", 
  RowBox[{"{", "}"}]}]], "Input",
 CellChangeTimes->{{3.801728780312522*^9, 3.801728794460988*^9}, {
  3.801733768364011*^9, 3.801733769201847*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"9aa13156-d8dc-48d2-b842-15fcb8cffd88"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.8017287953820753`*^9, 3.801733820758889*^9, 
  3.801733931346043*^9, 3.801735007320321*^9, 3.80173512717482*^9, 
  3.8017351646397123`*^9, 3.801735289424378*^9, 3.801737374968197*^9, 
  3.801762651633758*^9, 3.8017629110516443`*^9, 3.801762978111526*^9, 
  3.801763012302985*^9, 3.801763124784651*^9, 3.802250013024461*^9, 
  3.8023086900766277`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"3afa0079-a487-40eb-8301-8a28dca116a2"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"For", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"i", "=", "1"}], ",", " ", 
   RowBox[{"i", "<", "10"}], ",", " ", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"tx", " ", "=", " ", 
     RowBox[{"RandomReal", "[", 
      RowBox[{"{", 
       RowBox[{"9500", ",", "10000"}], " ", "}"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"ty", " ", "=", " ", 
     RowBox[{"RandomReal", "[", 
      RowBox[{"{", 
       RowBox[{"12500", ",", " ", "14000"}], "}"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"pre", " ", "=", " ", 
     RowBox[{"p", "[", 
      RowBox[{"{", 
       RowBox[{"tx", ",", "ty"}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
    
    RowBox[{"AppendTo", "[", 
     RowBox[{"GeneratedData", ",", " ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"tx", ",", "ty", ",", " ", "pre", ",", " ", 
         RowBox[{"TreeFunc", "[", "pre", "]"}], ",", "  ", 
         RowBox[{"RandomInteger", "[", 
          RowBox[{"{", 
           RowBox[{"5", ",", " ", "20"}], "}"}], "]"}], ",", " ", 
         RowBox[{"RandomInteger", "[", 
          RowBox[{"{", 
           RowBox[{"0", ",", " ", "10"}], "}"}], "]"}]}], "}"}], "\[Rule]", 
       " ", "0"}]}], "]"}]}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.801728798171219*^9, 3.8017288568743963`*^9}, {
   3.8017288871409903`*^9, 3.801728993798452*^9}, 3.8017335632277412`*^9, {
   3.801733604689804*^9, 3.801733648931871*^9}, {3.801733834855344*^9, 
   3.801733835802108*^9}, {3.801733881243606*^9, 3.8017338847985697`*^9}, {
   3.80173455745087*^9, 3.801734587349102*^9}, {3.801734621387781*^9, 
   3.801734628127578*^9}, {3.8017346885395947`*^9, 3.801734692695896*^9}, {
   3.801734785447397*^9, 3.801734805929509*^9}, {3.801734963103405*^9, 
   3.801734985464512*^9}, 3.80173504577043*^9, {3.8017351536807537`*^9, 
   3.801735162524453*^9}, {3.801735315801532*^9, 3.8017353161785307`*^9}, {
   3.8017626532389097`*^9, 3.801762655317737*^9}, {3.801762975292323*^9, 
   3.801762976082822*^9}, 3.801763111183703*^9},
 CellLabel->"In[16]:=",ExpressionUUID->"b8d8b756-d429-43f0-ae27-78459598e83b"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.801733753751655*^9, 3.8017337567703648`*^9}, 
   3.801735244809497*^9},
 CellLabel->"In[17]:=",ExpressionUUID->"091548ab-b3a7-4e39-b4c7-6446691c4931"],

Cell[BoxData[
 RowBox[{"For", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"i", "=", "1"}], ",", " ", 
   RowBox[{"i", "<", "10"}], ",", " ", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"tx", " ", "=", " ", 
     RowBox[{"RandomReal", "[", 
      RowBox[{"{", 
       RowBox[{"9500", ",", "11000"}], " ", "}"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"ty", " ", "=", " ", 
     RowBox[{"RandomReal", "[", 
      RowBox[{"{", 
       RowBox[{"13500", ",", " ", "14000"}], "}"}], "]"}]}], ";", "\n", 
    "\[IndentingNewLine]", 
    RowBox[{"pre", " ", "=", " ", 
     RowBox[{"p", "[", 
      RowBox[{"{", 
       RowBox[{"tx", ",", "ty"}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
    
    RowBox[{"AppendTo", "[", 
     RowBox[{"GeneratedData", ",", " ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"tx", ",", "ty", ",", " ", "pre", ",", " ", 
         RowBox[{"TreeFunc", "[", "pre", "]"}], ",", "  ", 
         RowBox[{"RandomInteger", "[", 
          RowBox[{"{", 
           RowBox[{"5", ",", " ", "20"}], "}"}], "]"}], ",", " ", 
         RowBox[{"RandomInteger", "[", 
          RowBox[{"{", 
           RowBox[{"0", ",", " ", "10"}], "}"}], "]"}]}], "}"}], "\[Rule]", 
       " ", "0"}]}], "]"}]}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.8017352218309593`*^9, 3.801735229427649*^9}, {
   3.8017353198360243`*^9, 3.801735319987546*^9}, {3.801737380328006*^9, 
   3.8017373804530993`*^9}, 3.801746228934523*^9, {3.8017626593656607`*^9, 
   3.801762660494331*^9}, {3.801762969507326*^9, 3.801762973051461*^9}, {
   3.8017631130652637`*^9, 3.8017631281731367`*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"a3f59298-3ad1-4c7b-895d-70d4718e9b49"],

Cell[CellGroupData[{

Cell[BoxData["GeneratedData"], "Input",
 CellLabel->"In[19]:=",ExpressionUUID->"5562ddc4-8c63-486e-b1d5-b5eaa617cacd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "9940.744743627225`", ",", "13778.208345114288`", ",", 
      "607.8124456410711`", ",", "\<\"treetype2\"\>", ",", "9", ",", "5"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "9580.777522587867`", ",", "13667.300065357864`", ",", 
      "608.7115827593988`", ",", "\<\"treetype2\"\>", ",", "13", ",", "1"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "9559.680159927133`", ",", "13276.809400777389`", ",", 
      "606.1442654060105`", ",", "\<\"treetype2\"\>", ",", "16", ",", "5"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "9847.03246259022`", ",", "13589.805791384815`", ",", 
      "605.7661877663128`", ",", "\<\"treetype2\"\>", ",", "11", ",", "7"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "9621.389674937262`", ",", "13228.823010918713`", ",", 
      "605.39208524943`", ",", "\<\"treetype2\"\>", ",", "12", ",", "5"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "9928.298621249072`", ",", "13435.792507988082`", ",", 
      "603.2880545045147`", ",", "\<\"treetype2\"\>", ",", "16", ",", "4"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "9710.977795964984`", ",", "12781.150317198817`", ",", 
      "604.3584212054155`", ",", "\<\"treetype2\"\>", ",", "12", ",", "5"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "9904.186307053953`", ",", "13629.871803979786`", ",", 
      "606.1734189328687`", ",", "\<\"treetype2\"\>", ",", "20", ",", "10"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "9524.132415930719`", ",", "13317.634352837491`", ",", 
      "606.6632445753878`", ",", "\<\"treetype2\"\>", ",", "10", ",", "6"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "9926.864738835002`", ",", "13613.88144543924`", ",", 
      "605.7990338276113`", ",", "\<\"treetype2\"\>", ",", "18", ",", "10"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "9979.609053647107`", ",", "13977.900742613994`", ",", 
      "609.2269664870203`", ",", "\<\"treetype1\"\>", ",", "6", ",", "10"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "10803.892066589275`", ",", "13944.723728597088`", ",", 
      "608.0579738074958`", ",", "\<\"treetype2\"\>", ",", "18", ",", "2"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "10380.406281039235`", ",", "13720.512369134065`", ",", 
      "606.0216718722395`", ",", "\<\"treetype2\"\>", ",", "6", ",", "0"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "10887.746797491962`", ",", "13798.944927420695`", ",", 
      "606.6737421715736`", ",", "\<\"treetype2\"\>", ",", "20", ",", "8"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "10872.766267068615`", ",", "13531.324275988878`", ",", 
      "603.3878299828971`", ",", "\<\"treetype2\"\>", ",", "6", ",", "4"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "10941.26460717155`", ",", "13676.516541388177`", ",", 
      "605.1998482220372`", ",", "\<\"treetype2\"\>", ",", "10", ",", "1"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "10050.39812522084`", ",", "13972.52886510356`", ",", 
      "608.8024527067271`", ",", "\<\"treetype2\"\>", ",", "10", ",", "1"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "10464.518715606528`", ",", "13915.368181006232`", ",", 
      "607.6822325329374`", ",", "\<\"treetype2\"\>", ",", "5", ",", "7"}], 
     "}"}], "\[Rule]", "0"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.80176262593471*^9, 3.801762917012165*^9, {3.801762983665943*^9, 
   3.801763018520376*^9}, 3.801763131863784*^9, 3.802250013085253*^9, 
   3.8023086901457233`*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"b004ea20-eff5-4c4a-aced-b10b330d2066"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"GeneratedData", ",", " ", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"10100", ",", " ", "12800", ",", " ", 
       RowBox[{"p", "[", 
        RowBox[{"{", 
         RowBox[{"10100", ",", " ", "12800"}], "}"}], "]"}], ",", " ", 
       RowBox[{"TreeFunc", "[", 
        RowBox[{"p", "[", 
         RowBox[{"{", 
          RowBox[{"10100", ",", " ", "12800"}], "}"}], "]"}], "]"}], ",", " ",
        "3", ",", " ", "12"}], "}"}], "\[Rule]", " ", "1"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"GeneratedData", ",", " ", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"10900", ",", " ", "13400", ",", " ", 
       RowBox[{"p", "[", 
        RowBox[{"{", 
         RowBox[{"10900", ",", " ", "13400"}], "}"}], "]"}], ",", " ", 
       RowBox[{"TreeFunc", "[", 
        RowBox[{"p", "[", 
         RowBox[{"{", 
          RowBox[{"10900", ",", " ", "13400"}], "}"}], "]"}], "]"}], ",", " ",
        "0", ",", " ", "20"}], "}"}], "\[Rule]", " ", "1"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"GeneratedData", ",", " ", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"10000", ",", " ", "13000", ",", " ", 
       RowBox[{"p", "[", 
        RowBox[{"{", 
         RowBox[{"10000", ",", " ", "13000"}], "}"}], "]"}], ",", " ", 
       RowBox[{"TreeFunc", "[", 
        RowBox[{"p", "[", 
         RowBox[{"{", 
          RowBox[{"10000", ",", " ", "13000"}], "}"}], "]"}], "]"}], ",", " ",
        "1", ",", " ", "10"}], "}"}], "\[Rule]", " ", "1"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"AppendTo", "[", 
    RowBox[{"GeneratedData", ",", " ", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"10800", ",", " ", "13400", ",", " ", 
        RowBox[{"p", "[", 
         RowBox[{"{", 
          RowBox[{"10800", ",", " ", "13400"}], "}"}], "]"}], ",", " ", 
        RowBox[{"TreeFunc", "[", 
         RowBox[{"p", "[", 
          RowBox[{"{", 
           RowBox[{"10800", ",", " ", "13400"}], "}"}], "]"}], "]"}], ",", 
        " ", "3", ",", " ", "13"}], "}"}], "\[Rule]", " ", "1"}]}], "]"}], 
   ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{" ", "GeneratedData"}]}], "Input",
 CellChangeTimes->{{3.801736387033908*^9, 3.801736402485022*^9}, {
   3.801736610834354*^9, 3.801736616243206*^9}, {3.801737089471171*^9, 
   3.801737125328738*^9}, {3.8017371766377497`*^9, 3.801737181223453*^9}, {
   3.8017372661307287`*^9, 3.801737294682166*^9}, 3.8017374000108356`*^9, {
   3.801761575832552*^9, 3.801761625032765*^9}, {3.801761705454365*^9, 
   3.8017618450706577`*^9}, {3.8017623847765903`*^9, 3.801762414984398*^9}, {
   3.8017624496989193`*^9, 3.801762621591675*^9}, {3.801762683921542*^9, 
   3.801762884828335*^9}, {3.801762935654015*^9, 3.80176294760507*^9}, {
   3.801762986941319*^9, 3.801762992804693*^9}, {3.801763023840309*^9, 
   3.801763025075185*^9}, {3.80176311648516*^9, 3.8017631197640867`*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"cbffbe08-9366-4963-a362-49cd67a898c3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "9940.744743627225`", ",", "13778.208345114288`", ",", 
      "607.8124456410711`", ",", "\<\"treetype2\"\>", ",", "9", ",", "5"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "9580.777522587867`", ",", "13667.300065357864`", ",", 
      "608.7115827593988`", ",", "\<\"treetype2\"\>", ",", "13", ",", "1"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "9559.680159927133`", ",", "13276.809400777389`", ",", 
      "606.1442654060105`", ",", "\<\"treetype2\"\>", ",", "16", ",", "5"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "9847.03246259022`", ",", "13589.805791384815`", ",", 
      "605.7661877663128`", ",", "\<\"treetype2\"\>", ",", "11", ",", "7"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "9621.389674937262`", ",", "13228.823010918713`", ",", 
      "605.39208524943`", ",", "\<\"treetype2\"\>", ",", "12", ",", "5"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "9928.298621249072`", ",", "13435.792507988082`", ",", 
      "603.2880545045147`", ",", "\<\"treetype2\"\>", ",", "16", ",", "4"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "9710.977795964984`", ",", "12781.150317198817`", ",", 
      "604.3584212054155`", ",", "\<\"treetype2\"\>", ",", "12", ",", "5"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "9904.186307053953`", ",", "13629.871803979786`", ",", 
      "606.1734189328687`", ",", "\<\"treetype2\"\>", ",", "20", ",", "10"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "9524.132415930719`", ",", "13317.634352837491`", ",", 
      "606.6632445753878`", ",", "\<\"treetype2\"\>", ",", "10", ",", "6"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "9926.864738835002`", ",", "13613.88144543924`", ",", 
      "605.7990338276113`", ",", "\<\"treetype2\"\>", ",", "18", ",", "10"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "9979.609053647107`", ",", "13977.900742613994`", ",", 
      "609.2269664870203`", ",", "\<\"treetype1\"\>", ",", "6", ",", "10"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "10803.892066589275`", ",", "13944.723728597088`", ",", 
      "608.0579738074958`", ",", "\<\"treetype2\"\>", ",", "18", ",", "2"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "10380.406281039235`", ",", "13720.512369134065`", ",", 
      "606.0216718722395`", ",", "\<\"treetype2\"\>", ",", "6", ",", "0"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "10887.746797491962`", ",", "13798.944927420695`", ",", 
      "606.6737421715736`", ",", "\<\"treetype2\"\>", ",", "20", ",", "8"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "10872.766267068615`", ",", "13531.324275988878`", ",", 
      "603.3878299828971`", ",", "\<\"treetype2\"\>", ",", "6", ",", "4"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "10941.26460717155`", ",", "13676.516541388177`", ",", 
      "605.1998482220372`", ",", "\<\"treetype2\"\>", ",", "10", ",", "1"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "10050.39812522084`", ",", "13972.52886510356`", ",", 
      "608.8024527067271`", ",", "\<\"treetype2\"\>", ",", "10", ",", "1"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "10464.518715606528`", ",", "13915.368181006232`", ",", 
      "607.6822325329374`", ",", "\<\"treetype2\"\>", ",", "5", ",", "7"}], 
     "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "10100", ",", "12800", ",", "601.4778850815675`", 
      ",", "\<\"treetype3\"\>", ",", "3", ",", "12"}], "}"}], "\[Rule]", 
    "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "10900", ",", "13400", ",", "602.0023162716736`", 
      ",", "\<\"treetype3\"\>", ",", "0", ",", "20"}], "}"}], "\[Rule]", 
    "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "10000", ",", "13000", ",", "601.8437958955946`", 
      ",", "\<\"treetype3\"\>", ",", "1", ",", "10"}], "}"}], "\[Rule]", 
    "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "10800", ",", "13400", ",", "601.681516480062`", 
      ",", "\<\"treetype3\"\>", ",", "3", ",", "13"}], "}"}], "\[Rule]", 
    "1"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.801762924813949*^9, 3.801762948556471*^9}, {
   3.801762994240284*^9, 3.801763025539607*^9}, 3.80176313824289*^9, 
   3.802250013127427*^9, 3.8023086902049026`*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"731c00e5-37f3-49ba-8d33-402c672ac430"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"gbt", "=", " ", 
  RowBox[{"Predict", "[", 
   RowBox[{"GeneratedData", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<GradientBoostedTrees\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.802255643669957*^9, 3.8022556646035833`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"4fc06b7a-00ee-4e57-a945-3c3d3b9c0dfa"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["PredictorFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\""}], "}"}], Short[#, 10]& ]], 
                   Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Nominal", 
                    "Numerical", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\""}], "}"}], Short[#, 10]& ]], 
                   Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Nominal", 
                    "Numerical", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["22", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  PredictorFunction[
   Association[
   "ExampleNumber" -> 22, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Numerical"], "f3" -> 
           Association["Type" -> "Numerical"], "f4" -> 
           Association["Type" -> "Nominal"], "f5" -> 
           Association["Type" -> "Numerical"], "f6" -> 
           Association["Type" -> "Numerical"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 6]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Nominal", 
                  "Numerical", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> False,
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association[
          "(f4(f1f2f3f5f6))" -> 
           Association[
            "Weight" -> {0.3333333333333333, 0.3333333333333333, 
              0.3333333333333333, 1., 1., 1., 1., 1.}, "Type" -> 
             "NumericalVector"]], "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5], "f4" -> 
               Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f6" -> Association["Type" -> "Numerical", "Weight" -> 1]],
                  "Output" -> 
                 Association[
                  "(f1f2f3f5f6)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 5]], 
                 "Version" -> {12.1, 0}, "ID" -> 231164342834508402]], 
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f4" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f4" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "Version" -> {12.1, 0}, "ID" -> 901064396041800030]]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f4" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
               "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Output" -> 
             Association[
              "f4" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
               "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f4" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "VectorLength" -> 1, "Output" -> 
                 Association[
                  "f4" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], "Type" -> 
                 "NominalVector", "Version" -> {12.1, 0}, "ID" -> 
                 3994539106741818020]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "(f1f2f3f5f6)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 5]], 
                 "Imputer" -> (DimensionReducerFunction[
                   Association[
                   "ExampleNumber" -> 22, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {10169.303925297208`, 13520.77712146587, 
                    605.5530441536295, 10.227272727272728`, 
                    6.636363636363637}, "Method" -> "Naive", "VectorLength" -> 
                    5, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {10169.303925297208`, 13520.77712146587, 
                    605.5530441536295, 10.227272727272728`, 
                    6.636363636363637}, 
                    "StandardDeviation" -> {483.5669622643866, 
                    341.3465404578915, 2.3630888536580326`, 5.915555903961398,
                     4.676298599858794}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 5, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 5]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Model" -> 
                    Association[
                    "Matrix" -> {{0.13921760820572676`, 0.7812984174410894, 
                    0.29228279504329246`, -0.3717518087720393}, \
{-0.46635206110347166`, 0.5508198076453785, -0.07233392753919864, 
                    0.2772478366263204}, {-0.5946045982955214, 
                    0.046627793081273905`, -0.2605508516224518, 
                    0.35923815329215936`}, {-0.43534497624731683`, \
-0.25452098534799666`, 0.8627160149697811, -0.0346736456506402}, {
                    0.4690994947898209, 0.13861904392763674`, 
                    0.3117256837058993, 0.8091229308808862}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {10169.303925297208`, 13520.77712146587, 
                    605.5530441536295, 10.227272727272728`, 
                    6.636363636363637}, 
                    "StandardDeviation" -> {483.5669622643866, 
                    341.3465404578915, 2.3630888536580326`, 5.915555903961398,
                     4.676298599858794}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 4, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.009634, "MaxTrainingMemory" -> 69088, 
                    "DataMemory" -> 1008, "FunctionMemory" -> 22448, 
                    "LanguageVersion" -> {12.1, 0}, "Date" -> 
                    DateObject[{
                    2020, 6, 28, 10, 21, 30.237195`8.233116481678096}, 
                    "Instant", "Gregorian", 5.5], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                    "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
                   "ImputedVectors", PerformanceGoal -> "Quality"]& ), 
                 "Method" -> "DimensionReduction", "VectorLength" -> 5, 
                 "Output" -> 
                 Association[
                  "(f1f2f3f5f6)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 5]], 
                 "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
                 3651198067146993376]]}, "Invertibility" -> "Perfect", 
             "StructurePreserving" -> True, "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Mean" -> {10169.303925297208`, 13520.77712146587, 
              605.5530441536295, 10.227272727272728`, 6.636363636363637}, 
             "StandardDeviation" -> {483.5669622643866, 341.3465404578915, 
              2.3630888536580326`, 5.915555903961398, 4.676298599858794}, 
             "Output" -> 
             Association[
              "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Version" -> {12.1, 0}, "ID" -> 3634076946882221644]], 
           MachineLearning`MLProcessor["EmbedNominalVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f4" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[
               "treetype1" -> 1, "treetype2" -> 2, "treetype3" -> 3]}, 
             "Output" -> 
             Association[
              "f4" -> Association[
                "Weight" -> 1, "Type" -> "NumericalVector"]], 
             "EmbeddingVectors" -> {{{0., 0., 0.}, {
              0.3175336420536041, -0.663084089756012, 0.08149794489145279}, {
              0.19583044946193695`, 0.47686687111854553`, 
              0.09633183479309082}, {-0.6422896385192871, 
              0.17794930934906006`, -0.4402509331703186}}}, 
             "Version" -> {12.1, 0}, "ID" -> 2678518579154011963]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f4" -> Association["Weight" -> 1, "Type" -> "NumericalVector"],
                "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Spans" -> {
               Span[1, 3], 
               Span[4, 8]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "(f4(f1f2f3f5f6))" -> 
               Association[
                "Weight" -> {0.3333333333333333, 0.3333333333333333, 
                  0.3333333333333333, 1., 1., 1., 1., 1.}, "Type" -> 
                 "NumericalVector"]], "Version" -> {12.1, 0}, "ID" -> 
             8851377719873486093]]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> True, "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Numerical"]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 1481982208339855626]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {0.18181818181818182`}, 
             "StandardDeviation" -> {0.38569460791993504`}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 5048366784062691824]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 1752743920491519792]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "Numerical", "Weight" -> 1], 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "ProbabilityPostprocessor" -> Identity, 
      "InverseProcessorFunction" -> (0.18181818181818182` + 
       0.38569460791993504` #& ), 
      "ProcessorFunction" -> (-0.4714045207910317 + 2.592724864350674 #& ), 
      "Name" -> "value", 
      "Quantiles" -> {-0.4714045207910317, 2.1213203435596424`}], "Prior" -> 
    Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 0, 
    "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "Trees" -> {}, "ClassNumber" -> 1, "IterationsNumber" -> 0, "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "(f4(f1f2f3f5f6))" -> 
           Association[
            "Weight" -> {0.3333333333333333, 0.3333333333333333, 
              0.3333333333333333, 1., 1., 1., 1., 1.}, "Type" -> 
             "NumericalVector"]], "Output" -> 
         Association[
          "(f4(f1f2f3f5f6))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 6.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["DensifyNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f4(f1f2f3f5f6))" -> 
               Association[
                "Weight" -> {0.3333333333333333, 0.3333333333333333, 
                  0.3333333333333333, 1., 1., 1., 1., 1.}, "Type" -> 
                 "NumericalVector"]], "Version" -> {12.1, 0}, "ID" -> 
             8602550095481859686, "Output" -> 
             Association[
              "(f4(f1f2f3f5f6))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6.]]]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "NumericalVector", "Weight" -> 6.], "Key" -> 
             "(f4(f1f2f3f5f6))", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], 
      "DistributionData" -> {NormalDistribution, {1.2536568121557043`}}, 
      "Method" -> "GradientBoostedTrees", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "BoostingMethod" -> 
        Association["Value" -> "Gradient", "Options" -> Association[]], 
        MaxTrainingRounds -> 
        Association["Value" -> 50, "Options" -> Association[]], 
        "LeavesNumber" -> 
        Association["Value" -> 60, "Options" -> Association[]], 
        "LearningRate" -> 
        Association["Value" -> 0.01, "Options" -> Association[]], 
        ValidationSet -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "MaxBinNumber" -> 
        Association["Value" -> 255, "Options" -> Association[]], 
        "ThreadNumber" -> 
        Association["Value" -> 4, "Options" -> Association[]], "MaxDepth" -> 
        Association["Value" -> 6, "Options" -> Association[]], "LeafSize" -> 
        Association["Value" -> 35, "Options" -> Association[]], 
        "FeatureFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "BaggingFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "BaggingFrequency" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "MinGainToSplit" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], "LossFunction" -> 
        Association[
         "Value" -> "MeanSquaredError", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[8801], "TrainingFunction" -> Predict, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> -0.9527093938502881, "PreprocessingTime" -> 
      0.149034`5.624830351357431, "LossName" -> "StandardDeviation", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[0.4240749986370906, 0.05180343679654133],
          "StandardDeviation" -> 
         Around[0.2898655525713484, 0.05260236420727515], "EvaluationTime" -> 
         0.00007905694150420948, "TestSize" -> 12, "ModelMemory" -> 20552., 
         "ModelUtility" -> 0.5095171888024379, "TrainingSize" -> 18, 
         "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
         65441.99999999999, "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
           Around[0.4241176649408739, 0.08972366747833674], 
           Around[0.4240262603832322, 0.08972903568681037], 
           Around[0.4240810705871657, 0.08972581531367628]}, 
         "StandardDeviationHistory" -> {
           Around[0.2898655525713484, 0.09110996740524312], 
           Around[0.2898655525713484, 0.09110996740524312], 
           Around[0.2898655525713484, 0.09110996740524312]}, 
         "Configuration" -> {
          "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
           MaxTrainingRounds -> 50, "LeavesNumber" -> 60, "LearningRate" -> 
           0.01, ValidationSet -> Automatic, "MaxBinNumber" -> 255, 
           "ThreadNumber" -> 4, "MaxDepth" -> 6, "LeafSize" -> 35, 
           "FeatureFraction" -> 1, "BaggingFraction" -> 1, "BaggingFrequency" -> 
           0, "MinGainToSplit" -> 0, "L1Regularization" -> 0, 
           "L2Regularization" -> 0, "LossFunction" -> "MeanSquaredError"}, 
         "FinalTrainingSize" -> 22], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
          "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
          "TrainingTime", "TrainingMemory", "ExperimentCount", 
          "MeanCrossEntropyHistory", "StandardDeviationHistory", 
          "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 3], 
          TypeSystem`Vector[TypeSystem`AnyType, 3], 
          TypeSystem`Vector[TypeSystem`AnyType, 17], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 169518269011115]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 25], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 4], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 35], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> "MeanSquaredError"]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.4240749986370906, 0.05180343679654133], 
              "StandardDeviation" -> 
              Around[0.2898655525713484, 0.05260236420727515], 
              "EvaluationTime" -> 0.00009440932985483305, "TestSize" -> 12, 
              "ModelMemory" -> 20552., "ModelUtility" -> 0.5095171734500495, 
              "TrainingSize" -> 18, "TrainingTime" -> 0.008971641173621406, 
              "TrainingMemory" -> 75022., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4241176649408739, 0.08972366747833674], 
                Around[0.4240262603832322, 0.08972903568681037], 
                Around[0.4240810705871657, 0.08972581531367628]}, 
              "StandardDeviationHistory" -> {
                Around[0.2898655525713484, 0.09110996740524312], 
                Around[0.2898655525713484, 0.09110996740524312], 
                Around[0.2898655525713484, 0.09110996740524312]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00009440932985483305, "ModelMemory" -> 
             20552., "StandardDeviation" -> 
             Around[0.2898655525713484, 0.05260236420727515], 
             "TrainingMemory" -> 75022., "TrainingTime" -> 
             0.010945402231818115`], "Index" -> 1], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 110], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 4], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 3], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> "MeanSquaredError"]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2850.1154429204566`, 2852.688880410449], 
              "StandardDeviation" -> 
              Around[0.3249138274749325, 0.11150335692349717`], 
              "EvaluationTime" -> 0.0006769815041759511, "TestSize" -> 12, 
              "ModelMemory" -> 119292., "ModelUtility" -> 0.3646181110387704, 
              "TrainingSize" -> 18, "TrainingTime" -> 0.028370820458389796`, 
              "TrainingMemory" -> 320986., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[8555.492999950608, 8557.684195963166], 
                Around[-2.57181475089578, 1.0777512328239585`], 
                Around[-2.5748564383404933`, 1.0788224334859784`]}, 
              "StandardDeviationHistory" -> {
                Around[0.4768084115551895, 0.18422782136921645`], 
                Around[0.24896657634994726`, 0.1287919967319633], 
                Around[0.2489664945196609, 0.12879212184190525`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0006769815041759511, "ModelMemory" -> 
             119292., "StandardDeviation" -> 
             Around[0.3249138274749325, 0.11150335692349717`], 
             "TrainingMemory" -> 320986., "TrainingTime" -> 
             0.034612400959235554`], "Index" -> 2], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 60], "LearningRate" -> 
             Association["Value" -> 0.01], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 4], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 35], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> "MeanSquaredError"]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.4240749986370906, 0.05180343679654133], 
              "StandardDeviation" -> 
              Around[0.2898655525713484, 0.05260236420727515], 
              "EvaluationTime" -> 0.00007905694150420948, "TestSize" -> 12, 
              "ModelMemory" -> 20552., "ModelUtility" -> 0.5095171888024379, 
              "TrainingSize" -> 18, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 65441.99999999999, "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4241176649408739, 0.08972366747833674], 
                Around[0.4240262603832322, 0.08972903568681037], 
                Around[0.4240810705871657, 0.08972581531367628]}, 
              "StandardDeviationHistory" -> {
                Around[0.2898655525713484, 0.09110996740524312], 
                Around[0.2898655525713484, 0.09110996740524312], 
                Around[0.2898655525713484, 0.09110996740524312]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007905694150420948, "ModelMemory" -> 
             20552., "StandardDeviation" -> 
             Around[0.2898655525713484, 0.05260236420727515], 
             "TrainingMemory" -> 65441.99999999999, "TrainingTime" -> 
             0.009690804463636233], "Index" -> 3], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 60], "LearningRate" -> 
             Association["Value" -> 0.2], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 4], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 15], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> "MeanSquaredError"]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.4240749986370906, 0.05180343679654133], 
              "StandardDeviation" -> 
              Around[0.2898655525713484, 0.05260236420727515], 
              "EvaluationTime" -> 0.00007905694150420948, "TestSize" -> 12, 
              "ModelMemory" -> 20552., "ModelUtility" -> 0.5095171888024379, 
              "TrainingSize" -> 18, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 64608., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4241176649408739, 0.08972366747833674], 
                Around[0.4240262603832322, 0.08972903568681037], 
                Around[0.4240810705871657, 0.08972581531367628]}, 
              "StandardDeviationHistory" -> {
                Around[0.2898655525713484, 0.09110996740524312], 
                Around[0.2898655525713484, 0.09110996740524312], 
                Around[0.2898655525713484, 0.09110996740524312]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007905694150420948, "ModelMemory" -> 
             20552., "StandardDeviation" -> 
             Around[0.2898655525713484, 0.05260236420727515], 
             "TrainingMemory" -> 64608., "TrainingTime" -> 
             0.009690804463636233], "Index" -> 4], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 1023], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 4], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 35], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> "MeanSquaredError"]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.4240749986370906, 0.05180343679654133], 
              "StandardDeviation" -> 
              Around[0.2898655525713484, 0.05260236420727515], 
              "EvaluationTime" -> 0.00009440932985483305, "TestSize" -> 12, 
              "ModelMemory" -> 20552., "ModelUtility" -> 0.5095171734500495, 
              "TrainingSize" -> 18, "TrainingTime" -> 0.009999999999999998, 
              "TrainingMemory" -> 64534., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4241176649408739, 0.08972366747833674], 
                Around[0.4240262603832322, 0.08972903568681037], 
                Around[0.4240810705871657, 0.08972581531367628]}, 
              "StandardDeviationHistory" -> {
                Around[0.2898655525713484, 0.09110996740524312], 
                Around[0.2898655525713484, 0.09110996740524312], 
                Around[0.2898655525713484, 0.09110996740524312]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00009440932985483305, "ModelMemory" -> 
             20552., "StandardDeviation" -> 
             Around[0.2898655525713484, 0.05260236420727515], 
             "TrainingMemory" -> 64534., "TrainingTime" -> 
             0.012199999999999999`], "Index" -> 5], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 6], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 4], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 90], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> "MeanSquaredError"]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.4240749986370906, 0.05180343679654133], 
              "StandardDeviation" -> 
              Around[0.2898655525713484, 0.05260236420727515], 
              "EvaluationTime" -> 0.00009440932985483305, "TestSize" -> 12, 
              "ModelMemory" -> 20552., "ModelUtility" -> 0.5095171734500495, 
              "TrainingSize" -> 18, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 64546., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4241176649408739, 0.08972366747833674], 
                Around[0.4240262603832322, 0.08972903568681037], 
                Around[0.4240810705871657, 0.08972581531367628]}, 
              "StandardDeviationHistory" -> {
                Around[0.2898655525713484, 0.09110996740524312], 
                Around[0.2898655525713484, 0.09110996740524312], 
                Around[0.2898655525713484, 0.09110996740524312]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00009440932985483305, "ModelMemory" -> 
             20552., "StandardDeviation" -> 
             Around[0.2898655525713484, 0.05260236420727515], 
             "TrainingMemory" -> 64546., "TrainingTime" -> 
             0.009690804463636233], "Index" -> 6], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 250], "LearningRate" -> 
             Association["Value" -> 0.2], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 4], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 35], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> "MeanSquaredError"]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.4240749986370906, 0.05180343679654133], 
              "StandardDeviation" -> 
              Around[0.2898655525713484, 0.05260236420727515], 
              "EvaluationTime" -> 0.00008929186707129186, "TestSize" -> 12, 
              "ModelMemory" -> 20552., "ModelUtility" -> 0.5095171785675123, 
              "TrainingSize" -> 18, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 64542., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4241176649408739, 0.08972366747833674], 
                Around[0.4240262603832322, 0.08972903568681037], 
                Around[0.4240810705871657, 0.08972581531367628]}, 
              "StandardDeviationHistory" -> {
                Around[0.2898655525713484, 0.09110996740524312], 
                Around[0.2898655525713484, 0.09110996740524312], 
                Around[0.2898655525713484, 0.09110996740524312]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00008929186707129186, "ModelMemory" -> 
             20552., "StandardDeviation" -> 
             Around[0.2898655525713484, 0.05260236420727515], 
             "TrainingMemory" -> 64542., "TrainingTime" -> 
             0.009690804463636233], "Index" -> 7], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 25], "LearningRate" -> 
             Association["Value" -> 0.2], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 4], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 90], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> "MeanSquaredError"]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.4240749986370906, 0.05180343679654133], 
              "StandardDeviation" -> 
              Around[0.2898655525713484, 0.05260236420727515], 
              "EvaluationTime" -> 0.00007905694150420948, "TestSize" -> 12, 
              "ModelMemory" -> 20552., "ModelUtility" -> 0.5095171888024379, 
              "TrainingSize" -> 18, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 65086., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4241176649408739, 0.08972366747833674], 
                Around[0.4240262603832322, 0.08972903568681037], 
                Around[0.4240810705871657, 0.08972581531367628]}, 
              "StandardDeviationHistory" -> {
                Around[0.2898655525713484, 0.09110996740524312], 
                Around[0.2898655525713484, 0.09110996740524312], 
                Around[0.2898655525713484, 0.09110996740524312]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007905694150420948, "ModelMemory" -> 
             20552., "StandardDeviation" -> 
             Around[0.2898655525713484, 0.05260236420727515], 
             "TrainingMemory" -> 65086., "TrainingTime" -> 
             0.009690804463636233], "Index" -> 8], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 3], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 4], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 35], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> "MeanSquaredError"]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.4240749986370906, 0.05180343679654133], 
              "StandardDeviation" -> 
              Around[0.2898655525713484, 0.05260236420727515], 
              "EvaluationTime" -> 0.00007905694150420948, "TestSize" -> 12, 
              "ModelMemory" -> 20552., "ModelUtility" -> 0.5095171888024379, 
              "TrainingSize" -> 18, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 65326., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4241176649408739, 0.08972366747833674], 
                Around[0.4240262603832322, 0.08972903568681037], 
                Around[0.4240810705871657, 0.08972581531367628]}, 
              "StandardDeviationHistory" -> {
                Around[0.2898655525713484, 0.09110996740524312], 
                Around[0.2898655525713484, 0.09110996740524312], 
                Around[0.2898655525713484, 0.09110996740524312]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007905694150420948, "ModelMemory" -> 
             20552., "StandardDeviation" -> 
             Around[0.2898655525713484, 0.05260236420727515], 
             "TrainingMemory" -> 65326., "TrainingTime" -> 
             0.009690804463636233], "Index" -> 9], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 60], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 4], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 90], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> "MeanSquaredError"]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.4240749986370906, 0.05180343679654133], 
              "StandardDeviation" -> 
              Around[0.2898655525713484, 0.05260236420727515], 
              "EvaluationTime" -> 0.00007905694150420948, "TestSize" -> 12, 
              "ModelMemory" -> 20552., "ModelUtility" -> 0.5095171888024379, 
              "TrainingSize" -> 18, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 64832., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4241176649408739, 0.08972366747833674], 
                Around[0.4240262603832322, 0.08972903568681037], 
                Around[0.4240810705871657, 0.08972581531367628]}, 
              "StandardDeviationHistory" -> {
                Around[0.2898655525713484, 0.09110996740524312], 
                Around[0.2898655525713484, 0.09110996740524312], 
                Around[0.2898655525713484, 0.09110996740524312]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007905694150420948, "ModelMemory" -> 
             20552., "StandardDeviation" -> 
             Around[0.2898655525713484, 0.05260236420727515], 
             "TrainingMemory" -> 64832., "TrainingTime" -> 
             0.009690804463636233], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["GradientBoostedTrees"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 16]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
              "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
              "TrainingTime", "TrainingMemory", "ExperimentCount", 
              "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
             TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 3], 
              TypeSystem`Vector[TypeSystem`AnyType, 3]}], 1], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "ModelMemory", "StandardDeviation", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 169513974043819]], "MaxTrainingSize" -> 22, 
      "PreprocessorEvaluationTime" -> 6.4296875`3.*^-6, "PreprocessorMemory" -> 
      71184, "InputDimension" -> 8, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
      True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
      "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
      "LastReportingTime" -> 3.80232849038339`16.33262462283569*^9, 
      "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 18, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.402769, "ExperimentCounts" -> 30]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], 
        Association["ID" -> 169526858945707]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {10803.892066589275`}, "ID" -> 4922843929423532927], 
         "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {13944.723728597088`}, "ID" -> 365386638938414886], 
         "f3" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {608.0579738074958}, "ID" -> 8084762059231395715], 
         "f4" -> Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"treetype2"}, "ID" -> 
           717539068447703646], "f5" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {18}, "ID" -> 
           3403397587327662634], "f6" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2}, "ID" -> 
           6552590257540092455]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 0.6589, 
      "MaxTrainingMemory" -> 857136, "DataMemory" -> 6376, "FunctionMemory" -> 
      267880, "LanguageVersion" -> {12.1, 0}, "Date" -> 
      DateObject[{2020, 6, 28, 10, 21, 30.871679`8.242135230822466}, 
        "Instant", "Gregorian", 5.5], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Unix", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.802255666759612*^9, 3.802308690910302*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"b8abcf50-f5fa-426c-aef9-5a639c71c589"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lr", " ", "=", " ", 
  RowBox[{"Predict", "[", 
   RowBox[{"GeneratedData", ",", " ", 
    RowBox[{"Method", "\[Rule]", "\"\<LinearRegression\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8017630289553413`*^9, 3.8017630632084703`*^9}, {
  3.802250094268215*^9, 3.80225009444949*^9}, {3.802254552754002*^9, 
  3.802254566727045*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"c66804c7-c429-4791-bbc0-a10076b01918"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["PredictorFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\""}], "}"}], Short[#, 10]& ]], 
                   Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Nominal", 
                    "Numerical", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LinearRegression\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\""}], "}"}], Short[#, 10]& ]], 
                   Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Nominal", 
                    "Numerical", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LinearRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["22", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  PredictorFunction[
   Association[
   "ExampleNumber" -> 22, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Numerical"], "f3" -> 
           Association["Type" -> "Numerical"], "f4" -> 
           Association["Type" -> "Nominal"], "f5" -> 
           Association["Type" -> "Numerical"], "f6" -> 
           Association["Type" -> "Numerical"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 6]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Nominal", 
                  "Numerical", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> False,
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association[
          "(f4(f1f2f3f5f6))" -> 
           Association[
            "Weight" -> {0.3333333333333333, 0.3333333333333333, 
              0.3333333333333333, 1., 1., 1., 1., 1.}, "Type" -> 
             "NumericalVector"]], "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5], "f4" -> 
               Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f6" -> Association["Type" -> "Numerical", "Weight" -> 1]],
                  "Output" -> 
                 Association[
                  "(f1f2f3f5f6)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 5]], 
                 "Version" -> {12.1, 0}, "ID" -> 231164342834508402]], 
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f4" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f4" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "Version" -> {12.1, 0}, "ID" -> 901064396041800030]]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f4" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
               "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Output" -> 
             Association[
              "f4" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
               "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f4" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "VectorLength" -> 1, "Output" -> 
                 Association[
                  "f4" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], "Type" -> 
                 "NominalVector", "Version" -> {12.1, 0}, "ID" -> 
                 3994539106741818020]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "(f1f2f3f5f6)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 5]], 
                 "Imputer" -> (DimensionReducerFunction[
                   Association[
                   "ExampleNumber" -> 22, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {10169.303925297208`, 13520.77712146587, 
                    605.5530441536295, 10.227272727272728`, 
                    6.636363636363637}, "Method" -> "Naive", "VectorLength" -> 
                    5, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {10169.303925297208`, 13520.77712146587, 
                    605.5530441536295, 10.227272727272728`, 
                    6.636363636363637}, 
                    "StandardDeviation" -> {483.5669622643866, 
                    341.3465404578915, 2.3630888536580326`, 5.915555903961398,
                     4.676298599858794}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 5, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 5]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Model" -> 
                    Association[
                    "Matrix" -> {{0.13921760820572676`, 0.7812984174410894, 
                    0.29228279504329246`, -0.3717518087720393}, \
{-0.46635206110347166`, 0.5508198076453785, -0.07233392753919864, 
                    0.2772478366263204}, {-0.5946045982955214, 
                    0.046627793081273905`, -0.2605508516224518, 
                    0.35923815329215936`}, {-0.43534497624731683`, \
-0.25452098534799666`, 0.8627160149697811, -0.0346736456506402}, {
                    0.4690994947898209, 0.13861904392763674`, 
                    0.3117256837058993, 0.8091229308808862}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {10169.303925297208`, 13520.77712146587, 
                    605.5530441536295, 10.227272727272728`, 
                    6.636363636363637}, 
                    "StandardDeviation" -> {483.5669622643866, 
                    341.3465404578915, 2.3630888536580326`, 5.915555903961398,
                     4.676298599858794}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 4, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.00963, "MaxTrainingMemory" -> 68664, 
                    "DataMemory" -> 1008, "FunctionMemory" -> 22448, 
                    "LanguageVersion" -> {12.1, 0}, "Date" -> 
                    DateObject[{
                    2020, 6, 28, 10, 21, 31.007386`8.244040136376752}, 
                    "Instant", "Gregorian", 5.5], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                    "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
                   "ImputedVectors", PerformanceGoal -> "Quality"]& ), 
                 "Method" -> "DimensionReduction", "VectorLength" -> 5, 
                 "Output" -> 
                 Association[
                  "(f1f2f3f5f6)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 5]], 
                 "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
                 3651198067146993376]]}, "Invertibility" -> "Perfect", 
             "StructurePreserving" -> True, "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Mean" -> {10169.303925297208`, 13520.77712146587, 
              605.5530441536295, 10.227272727272728`, 6.636363636363637}, 
             "StandardDeviation" -> {483.5669622643866, 341.3465404578915, 
              2.3630888536580326`, 5.915555903961398, 4.676298599858794}, 
             "Output" -> 
             Association[
              "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Version" -> {12.1, 0}, "ID" -> 3634076946882221644]], 
           MachineLearning`MLProcessor["EmbedNominalVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f4" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[
               "treetype1" -> 1, "treetype2" -> 2, "treetype3" -> 3]}, 
             "Output" -> 
             Association[
              "f4" -> Association[
                "Weight" -> 1, "Type" -> "NumericalVector"]], 
             "EmbeddingVectors" -> {{{0., 0., 0.}, {
              0.3175336420536041, -0.663084089756012, 0.08149794489145279}, {
              0.19583044946193695`, 0.47686687111854553`, 
              0.09633183479309082}, {-0.6422896385192871, 
              0.17794930934906006`, -0.4402509331703186}}}, 
             "Version" -> {12.1, 0}, "ID" -> 2678518579154011963]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f4" -> Association["Weight" -> 1, "Type" -> "NumericalVector"],
                "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Spans" -> {
               Span[1, 3], 
               Span[4, 8]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "(f4(f1f2f3f5f6))" -> 
               Association[
                "Weight" -> {0.3333333333333333, 0.3333333333333333, 
                  0.3333333333333333, 1., 1., 1., 1., 1.}, "Type" -> 
                 "NumericalVector"]], "Version" -> {12.1, 0}, "ID" -> 
             8851377719873486093]]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> True, "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Numerical"]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 1481982208339855626]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {0.18181818181818182`}, 
             "StandardDeviation" -> {0.38569460791993504`}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 5048366784062691824]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 1752743920491519792]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "Numerical", "Weight" -> 1], 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "ProbabilityPostprocessor" -> Identity, 
      "InverseProcessorFunction" -> (0.18181818181818182` + 
       0.38569460791993504` #& ), 
      "ProcessorFunction" -> (-0.4714045207910317 + 2.592724864350674 #& ), 
      "Name" -> "value", 
      "Quantiles" -> {-0.4714045207910317, 2.1213203435596424`}], "Prior" -> 
    Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 0, 
    "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["MeanFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association[
          "Weights" -> 
           RawArray[
             "Real32",{{-0.2939119338989258, -0.04436644911766052, \
-0.288857102394104, 
             0.04040459170937538, -0.06036043167114258, \
-0.10239570587873459`, -0.10445580631494522`, 0.11188473552465439`}}], 
           "Biases" -> RawArray["Real32",{-3.1874220382093746`*^-17}]], 
         "Parameters" -> 
         Association[
          "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 8, 
           "$InputDimensions" -> {8}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
        Association["Version" -> "12.1.4", "Unstable" -> False]], 
      "DistributionData" -> {NormalDistribution, 0.24629483918917464`}, 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "(f4(f1f2f3f5f6))" -> 
           Association[
            "Weight" -> {0.3333333333333333, 0.3333333333333333, 
              0.3333333333333333, 1., 1., 1., 1., 1.}, "Type" -> 
             "NumericalVector"]], "Output" -> 
         Association[
          "(f4(f1f2f3f5f6))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 6.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f4(f1f2f3f5f6))" -> 
               Association[
                "Weight" -> {0.3333333333333333, 0.3333333333333333, 
                  0.3333333333333333, 1., 1., 1., 1., 1.}, "Type" -> 
                 "NumericalVector"]], 
             "Mean" -> {0.048977079628269395`, 
              0.37070246928061706`, -0.0019029683288851016`, \
-0.00001600479403077423, 0.00025374447800840074`, 
              0.0012028674397467126`, -0.0017984523173099369`, 
              0.0002678084445714637}, 
             "StandardDeviation" -> {0.3268403063931522, 0.2530660775390697, 
              0.20666221645905739`, 1.0007830512315956`, 1.0007341758224058`, 
              0.9996677269842487, 0.9987351872637661, 0.9995018717942721}, 
             "Output" -> 
             Association[
              "(f4(f1f2f3f5f6))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6.]], 
             "Version" -> {12.1, 0}, "ID" -> 96276521134884904]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "NumericalVector", "Weight" -> 6.], "Key" -> 
             "(f4(f1f2f3f5f6))", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Method" -> "LinearRegression", 
      "PostProcessor" -> MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 10., "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "NormalEquation", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[8913], "TrainingFunction" -> Predict, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> -0.9527093938502881, "PreprocessingTime" -> 
      0.126627`5.5540713113478555, "LossName" -> "StandardDeviation", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[0.5567256825304946, 0.862339644095488], 
         "StandardDeviation" -> 
         Around[0.2893573974679382, 0.05538509089900685], "EvaluationTime" -> 
         0.00012529680840681797`, "TestSize" -> 24, "ModelMemory" -> 15888., 
         "ModelUtility" -> 0.5093572048000711, "TrainingSize" -> 18, 
         "TrainingTime" -> 0.00427558617146004, "TrainingMemory" -> 
         62883.428571428565`, "ExperimentCount" -> 6, 
         "MeanCrossEntropyHistory" -> {
           Around[4.806903618718075, 5.287976473874445], 
           Around[-0.29524793219960044`, 0.30067998315264743`], 
           Around[-0.352639563723351, 0.3075659168981021], 
           Around[-0.10581975648447606`, 0.2989550721320818], 
           Around[-0.3486060079550495, 0.3339830537069204], 
           Around[-0.36423626317263136`, 0.32559186984240335`]}, 
         "StandardDeviationHistory" -> {
           Around[0.4267138162033335, 0.1504923652029074], 
           Around[0.2615000943224945, 0.11374914396600506`], 
           Around[0.2586151976117302, 0.11654833472496384`], 
           Around[0.2715293801938999, 0.10492980086245406`], 
           Around[0.25918259541487276`, 0.11634642650091688`], 
           Around[0.2586033010612984, 0.11674362633198754`]}, 
         "Configuration" -> {
          "LinearRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           10., "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 22], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
          "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
          "TrainingTime", "TrainingMemory", "ExperimentCount", 
          "MeanCrossEntropyHistory", "StandardDeviationHistory", 
          "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 6], 
          TypeSystem`Vector[TypeSystem`AnyType, 6], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 54271411557548]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.4967466338433136, 0.05327386237564877], 
              "StandardDeviation" -> 
              Around[0.35880169931877265`, 0.0524229762967581], 
              "EvaluationTime" -> 0.0001361109843112281, "TestSize" -> 20, 
              "ModelMemory" -> 15888., "ModelUtility" -> 0.3030144641073004, 
              "TrainingSize" -> 18, "TrainingTime" -> 0.005473608691227209, 
              "TrainingMemory" -> 118522.66666666666`, "ExperimentCount" -> 5,
               "MeanCrossEntropyHistory" -> {
                Around[0.45753259580015826`, 0.08853527229344924], 
                Around[0.4580522495805951, 0.08852703957947983], 
                Around[0.4578604224820496, 0.08852936488132723], 
                Around[0.5552315426381486, 0.18600123099459176`], 
                Around[0.5550563587156164, 0.1859824701589497]}, 
              "StandardDeviationHistory" -> {
                Around[0.30776390725289415`, 0.0808915263275613], 
                Around[0.30757789491627013`, 0.08098347551488327], 
                Around[0.30697741628709874`, 0.08129600370273272], 
                Around[0.43592343497791924`, 0.1336149652256671], 
                Around[0.435765843159681, 0.13372716801262077`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0001361109843112281, "ModelMemory" -> 
             15888., "StandardDeviation" -> 
             Around[0.35880169931877265`, 0.0524229762967581], 
             "TrainingMemory" -> 118522.66666666666`, "TrainingTime" -> 
             0.006677802603297195], "Index" -> 1], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.44803198303455*^7, 3.448032454608734*^7], 
              "StandardDeviation" -> 
              Around[0.3114069387292998, 0.08817845828847684], 
              "EvaluationTime" -> 0.000125296808406818, "TestSize" -> 20, 
              "ModelMemory" -> 15888., "ModelUtility" -> 0.4183993661833615, 
              "TrainingSize" -> 18, "TrainingTime" -> 0.004324671915780886, 
              "TrainingMemory" -> 62825.33333333333, "ExperimentCount" -> 5, 
              "MeanCrossEntropyHistory" -> {
                Around[1.724016180146948*^8, 1.7240162260556704`*^8], 
                Around[-4.760015676692695, 1.859746514838625], 
                Around[-4.538849965545904, 1.7875093469969547`], 
                Around[-4.514333514464951, 1.788127983481811], 
                Around[-5.049768140393087, 1.9545819703597176`]}, 
              "StandardDeviationHistory" -> {
                Around[0.5611754870458817, 0.24373623317004176`], 
                Around[0.24896480112996822`, 0.1287947109660424], 
                Around[0.2489648031592521, 0.128794707863226], 
                Around[0.24896480274002894`, 0.12879470850422675`], 
                Around[0.2489647995713682, 0.12879471334917383`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000125296808406818, "ModelMemory" -> 15888.,
              "StandardDeviation" -> 
             Around[0.3114069387292998, 0.08817845828847684], 
             "TrainingMemory" -> 62825.33333333333, "TrainingTime" -> 
             0.00527609973725268], "Index" -> 2], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^-6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.163362795491344*^10, 2.1633627961733566`*^10], 
              "StandardDeviation" -> 
              Around[0.3009947677189236, 0.0764802568770055], 
              "EvaluationTime" -> 0.00012993145522299373`, "TestSize" -> 24, 
              "ModelMemory" -> 15888., "ModelUtility" -> 0.4579245756166057, 
              "TrainingSize" -> 18, "TrainingTime" -> 0.004570100637385112, 
              "TrainingMemory" -> 62882.28571428571, "ExperimentCount" -> 6, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2980176776358124`*^11, 1.2980176776927512`*^11], 
                Around[-6.901397578307925, 2.62318010302771], 
                Around[-5.971335892922976, 2.3867545617731722`], 
                Around[-7.120800070269535, 2.6891507287373746`], 
                Around[-7.195654188669704, 2.7136553760208573`], 
                Around[-6.911415917880176, 2.6226275599152626`]}, 
              "StandardDeviationHistory" -> {
                Around[0.561144611979097, 0.2437141712680839], 
                Around[0.24896479886694264`, 0.128794714426255], 
                Around[0.24896479886764775`, 0.1287947144251768], 
                Around[0.24896479886656325`, 0.12879471442683507`], 
                Around[0.24896479886642361`, 0.12879471442704857`], 
                Around[0.24896479886686707`, 0.1287947144263705]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00012993145522299373`, "ModelMemory" -> 
             15888., "StandardDeviation" -> 
             Around[0.3009947677189236, 0.0764802568770055], "TrainingMemory" -> 
             62882.28571428571, "TrainingTime" -> 0.005575522777609837], 
           "Index" -> 3], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.50087656084009, 0.05319132989620521], 
              "StandardDeviation" -> 
              Around[0.35992328068228624`, 0.052549468546062995`], 
              "EvaluationTime" -> 0.000125296808406818, "TestSize" -> 20, 
              "ModelMemory" -> 15888., "ModelUtility" -> 0.29991362174550906`,
               "TrainingSize" -> 18, "TrainingTime" -> 0.0050118723362727186`,
               "TrainingMemory" -> 62878.666666666664`, "ExperimentCount" -> 
              5, "MeanCrossEntropyHistory" -> {
                Around[0.46219066179374313`, 0.08849126041773053], 
                Around[0.46219601421855944`, 0.08849122970580743], 
                Around[0.46219412308260155`, 0.08849124049090172], 
                Around[0.5589018734344396, 0.18605675074213956`], 
                Around[0.558900131671107, 0.1860565606000269]}, 
              "StandardDeviationHistory" -> {
                Around[0.3080638407817861, 0.08073193585477872], 
                Around[0.3080620667719684, 0.08073285076304854], 
                Around[0.308055984622593, 0.08073598917343998], 
                Around[0.4377180484660294, 0.1346883090968721], 
                Around[0.43771646276905435`, 0.13468944316472303`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000125296808406818, "ModelMemory" -> 15888.,
              "StandardDeviation" -> 
             Around[0.35992328068228624`, 0.052549468546062995`], 
             "TrainingMemory" -> 62878.666666666664`, "TrainingTime" -> 
             0.006114484250252717], "Index" -> 4], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.047033730436473*^9, 3.047033736473615*^9], 
              "StandardDeviation" -> 
              Around[0.3114132523107853, 0.08818319807867148], 
              "EvaluationTime" -> 0.00013070389635902306`, "TestSize" -> 20, 
              "ModelMemory" -> 15888., "ModelUtility" -> 0.4183772923306416, 
              "TrainingSize" -> 18, "TrainingTime" -> 0.004668272126026802, 
              "TrainingMemory" -> 62796., "ExperimentCount" -> 5, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5235168676330933`*^10, 1.5235168681953238`*^10], 
                Around[-5.965069253446191, 2.289349744004858], 
                Around[-6.006582482728756, 2.2957940643599692`], 
                Around[-5.834375151549065, 2.25665313887248], 
                Around[-6.342540873178074, 2.4109416205919687`]}, 
              "StandardDeviationHistory" -> {
                Around[0.5612070659830444, 0.24375879820004284`], 
                Around[0.24896479889728573`, 0.12879471437985976`], 
                Around[0.24896479889478182`, 0.12879471438368825`], 
                Around[0.24896479890495102`, 0.12879471436813936`], 
                Around[0.2489647988738636, 0.12879471441567264`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00013070389635902306`, "ModelMemory" -> 
             15888., "StandardDeviation" -> 
             Around[0.3114132523107853, 0.08818319807867148], 
             "TrainingMemory" -> 62796., "TrainingTime" -> 
             0.005695291993752698], "Index" -> 5], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.4163537926493526`*^10, 2.416353793345253*^10], 
              "StandardDeviation" -> 
              Around[0.3114127017539284, 0.08818278508166187], 
              "EvaluationTime" -> 0.000125296808406818, "TestSize" -> 20, 
              "ModelMemory" -> 15888., "ModelUtility" -> 0.4183792219348911, 
              "TrainingSize" -> 18, "TrainingTime" -> 0.004324671915780885, 
              "TrainingMemory" -> 62828., "ExperimentCount" -> 5, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2081768966030365`*^11, 1.2081768966599835`*^11], 
                Around[-6.568397844769429, 2.5278973755363285`], 
                Around[-7.160059332049368, 2.6995181512675837`], 
                Around[-6.976192857874781, 2.649385776495589], 
                Around[-7.131350309871478, 2.690816768292675]}, 
              "StandardDeviationHistory" -> {
                Around[0.5612043133017707, 0.24375683124331332`], 
                Around[0.2489647988679323, 0.12879471442474175`], 
                Around[0.2489647988664921, 0.1287947144269439], 
                Around[0.24896479886691017`, 0.12879471442630458`], 
                Around[0.24896479886653655`, 0.12879471442687593`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000125296808406818, "ModelMemory" -> 15888.,
              "StandardDeviation" -> 
             Around[0.3114127017539284, 0.08818278508166187], 
             "TrainingMemory" -> 62828., "TrainingTime" -> 
             0.005276099737252679], "Index" -> 6], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5567256825304946, 0.862339644095488], 
              "StandardDeviation" -> 
              Around[0.2893573974679382, 0.05538509089900685], 
              "EvaluationTime" -> 0.00012529680840681797`, "TestSize" -> 24, 
              "ModelMemory" -> 15888., "ModelUtility" -> 0.5093572048000711, 
              "TrainingSize" -> 18, "TrainingTime" -> 0.00427558617146004, 
              "TrainingMemory" -> 62883.428571428565`, "ExperimentCount" -> 6,
               "MeanCrossEntropyHistory" -> {
                Around[4.806903618718075, 5.287976473874445], 
                Around[-0.29524793219960044`, 0.30067998315264743`], 
                Around[-0.352639563723351, 0.3075659168981021], 
                Around[-0.10581975648447606`, 0.2989550721320818], 
                Around[-0.3486060079550495, 0.3339830537069204], 
                Around[-0.36423626317263136`, 0.32559186984240335`]}, 
              "StandardDeviationHistory" -> {
                Around[0.4267138162033335, 0.1504923652029074], 
                Around[0.2615000943224945, 0.11374914396600506`], 
                Around[0.2586151976117302, 0.11654833472496384`], 
                Around[0.2715293801938999, 0.10492980086245406`], 
                Around[0.25918259541487276`, 0.11634642650091688`], 
                Around[0.2586033010612984, 0.11674362633198754`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00012529680840681797`, "ModelMemory" -> 
             15888., "StandardDeviation" -> 
             Around[0.2893573974679382, 0.05538509089900685], 
             "TrainingMemory" -> 62883.428571428565`, "TrainingTime" -> 
             0.005216215129181249], "Index" -> 7], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[346016.09964421875`, 346019.5006641514], 
              "StandardDeviation" -> 
              Around[0.31134288709161756`, 0.08813007650090816], 
              "EvaluationTime" -> 0.000125296808406818, "TestSize" -> 20, 
              "ModelMemory" -> 15888., "ModelUtility" -> 0.41862345950644697`,
               "TrainingSize" -> 18, "TrainingTime" -> 0.004324671915780886, 
              "TrainingMemory" -> 62858.666666666664`, "ExperimentCount" -> 5,
               "MeanCrossEntropyHistory" -> {
                Around[1.730094102298004*^6, 1.7300975467218428`*^6], 
                Around[-3.4588707126861222`, 1.4026772316540455`], 
                Around[-3.20898962190687, 1.325122262918052], 
                Around[-3.2000237124115505`, 1.3317206053834354`], 
                Around[-3.73619286352005, 1.491500377966674]}, 
              "StandardDeviationHistory" -> {
                Around[0.5608541286465462, 0.24350660898048773`], 
                Around[0.24896501411708766`, 0.1287943853061817], 
                Around[0.2489652399855602, 0.1287940399542417], 
                Around[0.24896518403130052`, 0.128794125507677], 
                Around[0.24896486867759318`, 0.12879460768452264`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000125296808406818, "ModelMemory" -> 15888.,
              "StandardDeviation" -> 
             Around[0.31134288709161756`, 0.08813007650090816], 
             "TrainingMemory" -> 62858.666666666664`, "TrainingTime" -> 
             0.00527609973725268], "Index" -> 8], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3534.2476090640257`, 3536.356926400339], 
              "StandardDeviation" -> 
              Around[0.310731916335579, 0.08764147605676675], 
              "EvaluationTime" -> 0.000125296808406818, "TestSize" -> 20, 
              "ModelMemory" -> 15888., "ModelUtility" -> 0.4207800624459993, 
              "TrainingSize" -> 18, "TrainingTime" -> 0.004840072231149761, 
              "TrainingMemory" -> 62878.666666666664`, "ExperimentCount" -> 5,
               "MeanCrossEntropyHistory" -> {
                Around[17679.675185829634`, 17681.977915961103`], 
                Around[-2.1814621329824653`, 0.9557657140191045], 
                Around[-1.9193133383201255`, 0.8813587400933115], 
                Around[-1.9041504070743147`, 0.8911464735827127], 
                Around[-2.4322146311264654`, 1.0330517173325156`]}, 
              "StandardDeviationHistory" -> {
                Around[0.5576982996738434, 0.24125218901779863`], 
                Around[0.24898355352694695`, 0.12876605211345282`], 
                Around[0.24900535597410708`, 0.12873276457753646`], 
                Around[0.24900088314495422`, 0.12873959045565694`], 
                Around[0.24897148935804347`, 0.12878448628907357`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000125296808406818, "ModelMemory" -> 15888.,
              "StandardDeviation" -> 
             Around[0.310731916335579, 0.08764147605676675], "TrainingMemory" -> 
             62878.666666666664`, "TrainingTime" -> 0.005904888122002708], 
           "Index" -> 9], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.46107511300734166`, 0.05446104378942348], 
              "StandardDeviation" -> 
              Around[0.3496656285572591, 0.051309130786213096`], 
              "EvaluationTime" -> 0.000125296808406818, "TestSize" -> 20, 
              "ModelMemory" -> 15888., "ModelUtility" -> 0.32868418773749253`,
               "TrainingSize" -> 18, "TrainingTime" -> 0.004496472020903844, 
              "TrainingMemory" -> 62846.666666666664`, "ExperimentCount" -> 5,
               "MeanCrossEntropyHistory" -> {
                Around[0.4183222429847716, 0.09035057644277115], 
                Around[0.4221507750373962, 0.08985027964805826], 
                Around[0.42000853321539655`, 0.08999150806470485], 
                Around[0.5233669228730174, 0.18593226922273706`], 
                Around[0.5215270909261264, 0.18576890671596483`]}, 
              "StandardDeviationHistory" -> {
                Around[0.3061025300625812, 0.08218159358662835], 
                Around[0.30358962797151984`, 0.08310953696558612], 
                Around[0.29823158717275167`, 0.0861040682604668], 
                Around[0.42094775279487356`, 0.12483340875575272`], 
                Around[0.4194566447845691, 0.12585687502265278`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000125296808406818, "ModelMemory" -> 15888.,
              "StandardDeviation" -> 
             Around[0.3496656285572591, 0.051309130786213096`], 
             "TrainingMemory" -> 62846.666666666664`, "TrainingTime" -> 
             0.00548569586550269], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["LinearRegression"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
              "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
              "TrainingTime", "TrainingMemory", "ExperimentCount", 
              "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
             TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            1], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "ModelMemory", "StandardDeviation", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 54267116590252]], "MaxTrainingSize" -> 22, 
      "PreprocessorEvaluationTime" -> 3.80517578125`2.*^-6, 
      "PreprocessorMemory" -> 71184, "InputDimension" -> 8, "OutputDimension" -> 
      1, "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
      True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
      "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
      "LastReportingTime" -> 3.802328491120007`16.332624622919827*^9, 
      "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 18, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.40009, "ExperimentCounts" -> 52]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], 
        Association["ID" -> 54280001492140]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {10803.892066589275`}, "ID" -> 4922843929423532927], 
         "f2" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {13944.723728597088`}, "ID" -> 365386638938414886], 
         "f3" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {608.0579738074958}, "ID" -> 8084762059231395715], 
         "f4" -> Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"treetype2"}, "ID" -> 
           717539068447703646], "f5" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {18}, "ID" -> 
           3403397587327662634], "f6" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2}, "ID" -> 
           6552590257540092455]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 0.666224, 
      "MaxTrainingMemory" -> 575032, "DataMemory" -> 6376, "FunctionMemory" -> 
      214616, "LanguageVersion" -> {12.1, 0}, "Date" -> 
      DateObject[{2020, 6, 28, 10, 21, 31.639474`8.252804235530364}, 
        "Instant", "Gregorian", 5.5], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Unix", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8017630637194347`*^9, 3.8017631426047173`*^9, 
  3.802250014155223*^9, 3.802250097761106*^9, 3.802254569159614*^9, 
  3.802308691669899*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"2589e312-6d26-4454-a671-86d55fe1f1b7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nn", " ", "=", " ", 
  RowBox[{"Predict", "[", 
   RowBox[{"GeneratedData", ",", " ", 
    RowBox[{"Method", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<NeuralNetwork\>\"", ",", " ", 
       RowBox[{"\"\<NetworkDepth\>\"", "\[Rule]", " ", "5"}]}], "}"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.802250023044571*^9, 3.802250040360696*^9}, {
  3.802250100517604*^9, 3.802250100652073*^9}, {3.802308866715349*^9, 
  3.802308870478299*^9}, {3.802308906575694*^9, 3.802309012102232*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"66b67e89-a99a-4e6d-ac47-c45b5cee4fdc"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["PredictorFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\""}], "}"}], Short[#, 10]& ]], 
                   Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Nominal", 
                    "Numerical", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\""}], "}"}], Short[#, 10]& ]], 
                   Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Nominal", 
                    "Numerical", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["22", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  PredictorFunction[
   Association[
   "ExampleNumber" -> 22, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Numerical"], "f3" -> 
           Association["Type" -> "Numerical"], "f4" -> 
           Association["Type" -> "Nominal"], "f5" -> 
           Association["Type" -> "Numerical"], "f6" -> 
           Association["Type" -> "Numerical"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 6]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Nominal", 
                  "Numerical", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> False,
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association[
          "(f4(f1f2f3f5f6))" -> 
           Association[
            "Weight" -> {0.3333333333333333, 0.3333333333333333, 
              0.3333333333333333, 1., 1., 1., 1., 1.}, "Type" -> 
             "NumericalVector"]], "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5], "f4" -> 
               Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f6" -> Association["Type" -> "Numerical", "Weight" -> 1]],
                  "Output" -> 
                 Association[
                  "(f1f2f3f5f6)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 5]], 
                 "Version" -> {12.1, 0}, "ID" -> 231164342834508402]], 
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f4" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f4" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "Version" -> {12.1, 0}, "ID" -> 901064396041800030]]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f4" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
               "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Output" -> 
             Association[
              "f4" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
               "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f4" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "VectorLength" -> 1, "Output" -> 
                 Association[
                  "f4" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], "Type" -> 
                 "NominalVector", "Version" -> {12.1, 0}, "ID" -> 
                 3994539106741818020]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "(f1f2f3f5f6)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 5]], 
                 "Imputer" -> (DimensionReducerFunction[
                   Association[
                   "ExampleNumber" -> 22, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {10169.303925297208`, 13520.77712146587, 
                    605.5530441536295, 10.227272727272728`, 
                    6.636363636363637}, "Method" -> "Naive", "VectorLength" -> 
                    5, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {10169.303925297208`, 13520.77712146587, 
                    605.5530441536295, 10.227272727272728`, 
                    6.636363636363637}, 
                    "StandardDeviation" -> {483.5669622643866, 
                    341.3465404578915, 2.3630888536580326`, 5.915555903961398,
                     4.676298599858794}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 5, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 5]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Model" -> 
                    Association[
                    "Matrix" -> {{0.13921760820572676`, 0.7812984174410894, 
                    0.29228279504329246`, -0.3717518087720393}, \
{-0.46635206110347166`, 0.5508198076453785, -0.07233392753919864, 
                    0.2772478366263204}, {-0.5946045982955214, 
                    0.046627793081273905`, -0.2605508516224518, 
                    0.35923815329215936`}, {-0.43534497624731683`, \
-0.25452098534799666`, 0.8627160149697811, -0.0346736456506402}, {
                    0.4690994947898209, 0.13861904392763674`, 
                    0.3117256837058993, 0.8091229308808862}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {10169.303925297208`, 13520.77712146587, 
                    605.5530441536295, 10.227272727272728`, 
                    6.636363636363637}, 
                    "StandardDeviation" -> {483.5669622643866, 
                    341.3465404578915, 2.3630888536580326`, 5.915555903961398,
                     4.676298599858794}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 4, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.008808, "MaxTrainingMemory" -> 69160, 
                    "DataMemory" -> 1008, "FunctionMemory" -> 22448, 
                    "LanguageVersion" -> {12.1, 0}, "Date" -> 
                    DateObject[{
                    2020, 6, 28, 10, 26, 52.797312`8.475186787410541}, 
                    "Instant", "Gregorian", 5.5], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                    "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
                   "ImputedVectors", PerformanceGoal -> "Quality"]& ), 
                 "Method" -> "DimensionReduction", "VectorLength" -> 5, 
                 "Output" -> 
                 Association[
                  "(f1f2f3f5f6)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 5]], 
                 "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
                 3651198067146993376]]}, "Invertibility" -> "Perfect", 
             "StructurePreserving" -> True, "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Mean" -> {10169.303925297208`, 13520.77712146587, 
              605.5530441536295, 10.227272727272728`, 6.636363636363637}, 
             "StandardDeviation" -> {483.5669622643866, 341.3465404578915, 
              2.3630888536580326`, 5.915555903961398, 4.676298599858794}, 
             "Output" -> 
             Association[
              "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Version" -> {12.1, 0}, "ID" -> 3634076946882221644]], 
           MachineLearning`MLProcessor["EmbedNominalVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f4" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[
               "treetype1" -> 1, "treetype2" -> 2, "treetype3" -> 3]}, 
             "Output" -> 
             Association[
              "f4" -> Association[
                "Weight" -> 1, "Type" -> "NumericalVector"]], 
             "EmbeddingVectors" -> {{{0., 0., 0.}, {
              0.3175336420536041, -0.663084089756012, 0.08149794489145279}, {
              0.19583044946193695`, 0.47686687111854553`, 
              0.09633183479309082}, {-0.6422896385192871, 
              0.17794930934906006`, -0.4402509331703186}}}, 
             "Version" -> {12.1, 0}, "ID" -> 2678518579154011963]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f4" -> Association["Weight" -> 1, "Type" -> "NumericalVector"],
                "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Spans" -> {
               Span[1, 3], 
               Span[4, 8]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "(f4(f1f2f3f5f6))" -> 
               Association[
                "Weight" -> {0.3333333333333333, 0.3333333333333333, 
                  0.3333333333333333, 1., 1., 1., 1., 1.}, "Type" -> 
                 "NumericalVector"]], "Version" -> {12.1, 0}, "ID" -> 
             8851377719873486093]]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> True, "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Numerical"]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 1481982208339855626]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {0.18181818181818182`}, 
             "StandardDeviation" -> {0.38569460791993504`}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 5048366784062691824]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 1752743920491519792]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "Numerical", "Weight" -> 1], 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "ProbabilityPostprocessor" -> Identity, 
      "InverseProcessorFunction" -> (0.18181818181818182` + 
       0.38569460791993504` #& ), 
      "ProcessorFunction" -> (-0.4714045207910317 + 2.592724864350674 #& ), 
      "Name" -> "value", 
      "Quantiles" -> {-0.4714045207910317, 2.1213203435596424`}], "Prior" -> 
    Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 0, 
    "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["Method" -> "NeuralNetwork", "Network" -> NetGraph[
        Association[
        "Type" -> "Graph", "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "LogStd" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
           "Mean" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
         "Nodes" -> Association[
          "1" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Linear", "Arrays" -> 
                 Association["Weights" -> CompressedData["
1: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
+x8m9Rns
                    "], "Biases" -> 
                   RawArray[
                    "Real32",{-0.02253100648522377, -0.024632783606648445`, 
                    0.014482257887721062`, 
                    0.02098403498530388, -0.015136429108679295`, \
-0.03385263308882713, 0.017439981922507286`, 0.013449566438794136`, 
                    0.06986439228057861, 
                    0.02226332016289234, -0.01309859100729227, \
-0.030958933755755424`, 0.006156828720122576, 
                    0.019519824534654617`, -0.005562880542129278, 
                    0.03208458423614502, -0.026560721918940544`, 
                    0.012865862809121609`, -0.015161664225161076`, 
                    0.08217079937458038, 
                    0.013229678384959698`, -0.03072616271674633, \
-0.017122086137533188`, -0.045103318989276886`, 0.026394503191113472`, 
                    0.004766488913446665, -0.01529295090585947, \
-0.030230294913053513`, 0.0022952714934945107`, -0.02125486545264721, 
                    0.021809251978993416`, -0.0005577096599154174, \
-0.003278932999819517, -0.007022425998002291, -0.014681776985526085`, 
                    0.004467443563044071, 0.02831321954727173, 
                    0.011746467091143131`, -0.01218836847692728, \
-0.016813039779663086`, -0.0015327861765399575`, -0.052759576588869095`, \
-0.05824197456240654, -0.026965545490384102`, -0.015637272968888283`, 
                    0.021958405151963234`, 0.00098980322945863, 
                    0.003940041642636061, 0.016812846064567566`, 
                    0.005900227464735508}]], "Parameters" -> 
                 Association[
                  "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                   "$InputSize" -> 8, "$InputDimensions" -> {8}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {50}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                   "OutputPorts" -> 
                   NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Linear", "Arrays" -> 
                 Association["Weights" -> CompressedData["
1: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
gI3xIF/TAv8HEK43Yg==
                    "], "Biases" -> 
                   RawArray["Real32",{-0.01737172342836857, 
                    0.005455391947180033, 
                    0.00904032401740551, -0.01118741650134325, \
-0.05389515310525894, 0.043994445353746414`, -0.034559473395347595`, 
                    0.025134174153208733`, -0.004952648654580116, 
                    0.060840245336294174`, 0.014664651826024055`, 
                    0.07681534439325333, 
                    0.022551171481609344`, -0.01933138817548752, 
                    0.01714366115629673, -0.002049006288871169, \
-0.012601049616932869`, -0.0363064706325531, 
                    0.023534486070275307`, -0.007567365188151598, 
                    0.005367998033761978, -0.02290157414972782, 
                    0.02366122603416443, 
                    0.0073043410666286945`, -0.010311457328498363`, \
-0.009181827306747437, -0.007937069050967693, 0.004660530015826225, 
                    0.0098258126527071, 
                    0.01777912862598896, -0.05913756042718887, 
                    0.0004486244870349765, -0.039359938353300095`, \
-0.025546880438923836`, -0.004659439902752638, -0.028792796656489372`, \
-0.03146415203809738, 0.023546738550066948`, -0.010323448106646538`, 
                    0.05219440534710884, -0.0023429952561855316`, \
-0.017550840973854065`, -0.0012549667153507471`, 
                    0.06429167836904526, -0.021436527371406555`, \
-0.018034368753433228`, 
                    0.03090016171336174, -0.01014712080359459, \
-0.019359882920980453`, -0.03223087638616562}]], "Parameters" -> 
                 Association[
                  "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                   "$InputSize" -> 50, "$InputDimensions" -> {50}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "5" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {50}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "6" -> 
               Association[
                "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                   "OutputPorts" -> 
                   NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "7" -> A\
ssociation["Type" -> "Linear", "Arrays" -> 
                 Association["Weights" -> CompressedData["
1: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
n5pWfqy+E9sTy0YqizqvzgraiwMh54MeLvRIJ7vgy0Sp20HHKFo8d/E9nI7c
Skndxvh14TdKXG/EPYepseXtFMhvNeVdV1yhy24eNrhchyPSsby5pwJ2Lgh2
PDlcjgcbz6aXjgK82KaLhTMmSTYZXHV0mn5OXDDhMrmb7YFxqYVgdvQqObnn
ibuUZDj7iiEsD/1Bn8VJFBN6AAd49gCt1QWgqaRHG552QrhBh+Ac3APnFfak
J/mV1Lb1C33IOskHUoohd6AFO6QfEHLHZ/OeqTHwds1ep9rsQXzev5wdh8lz
NbyHny+zHZJao3D0fEO+V6LFr/rehsh14/FuSwPoG/gLCoob2Km/GR8KrcFj
JmHwsWUBSn8t5V7q3uibtghdXkziS9EqiHZeMHRamtPSTWe5QXoztc/yF5zX
PYVPJI3FZ54Ky9NngFtjO+TOceb8zUF85sQ38XnoJjg2R0DXaddh9TY59shu
hLebpPmc7h56mmON5cu1YInvUrFrZrPw9Yk0us1X4iLJK5rS+k2IzliGc9WH
gv5ED340PQzT7k0E8L1JavLTaKddjWAddkyYN+QnRJ5UrJ5cPJ77pG4RJRfe
CK4vNPj2o354uXyRk05zOd72sMJ8jxCn5fPj4KnFN5CxbIKPvy5BRIsyHg+3
5v2+4TgiUxGNuk15wbojwvveNWKD9VUxLkAXrftdhLKtedSjbCQle/hIVO8j
qg7/AENP2pPN0tOC7G1nTJ3UBPe93woP+huC0McAXXT/5YzMoZHdRzPxyYwn
0LR2jvg59BqtXRyHewokkC93FDa0HaTGPoZiv6XW9PKTKt96Wl7dz1AfLV5n
wgGDFuHdsoVQUlTKqh2aeLr7BBnPzaNjb5voZ/hC6DvYmJ8fLqDDhu9h0to+
nLy8F77OieeL9jdh69IG4f6XzQQXfOFA6l3Ypm9AfQrH89d7ZeL4uhEgb/cQ
rHoXQljIGP54xxH+ezZL/BlwQKx308WH8yP4yStPuDRXE+tGLxF+L+rNpTc8
8dbcFeJmaRLCU9pJb904PqnbCDLz1Pi75gT878Eqah++Q2z3Gc1iYB7lvjtH
T6JfkXWeu8Rlhj5O1+rPzWa+YqN3EhSOtOOhSZF4ctYk+Lt2GCupmwrnloSg
yyVVkrL+l2NdT2GE300+PqUXLI9/Ltmq/kTws/9NjU+Mod7NhVd5TSWvz2Mw
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

                    "], "Biases" -> 
                   RawArray["Real32",{
                    0.001973037840798497, -0.017373114824295044`, 
                    0.028624773025512695`, -0.01604331284761429, 
                    0.0034919013269245625`, 0.023959413170814514`, 
                    0.0033016852103173733`, 
                    0.005303702782839537, -0.00421180110424757, \
-0.004521501716226339, -0.03302974998950958, -0.05705094709992409, 
                    0.03038395382463932, 
                    0.004645693115890026, -0.034371186047792435`, \
-0.027914244681596756`, -0.004273068159818649, -0.00023966692970134318`, \
-0.009198253974318504, -0.02482825331389904, 0.04545777291059494, 
                    0.009843126870691776, -0.013446159660816193`, \
-0.02381238527595997, 0.002191670937463641, -0.032367464154958725`, 
                    0.04582380875945091, 
                    0.009702741168439388, -0.020698780193924904`, \
-0.008833949454128742, 
                    0.012952129356563091`, -0.02017730288207531, \
-0.018919751048088074`, -0.01603834331035614, -0.0010586166754364967`, \
-0.031215708702802658`, -0.02317761816084385, -0.048005361109972, 
                    0.020619938150048256`, 0.019899751991033554`, 
                    0.026029406115412712`, 
                    0.05431000515818596, -0.01941669173538685, \
-0.026558827608823776`, 0.0009827053872868419, 0.020314816385507584`, 
                    0.024989649653434753`, -0.022218827158212662`, 
                    0.02882102131843567, -0.02886028215289116}]], 
                 "Parameters" -> 
                 Association[
                  "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                   "$InputSize" -> 50, "$InputDimensions" -> {50}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "8" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {50}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "9" -> 
               Association[
                "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                   "OutputPorts" -> 
                   NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "10" -> 
               Association[
                "Type" -> "Linear", "Arrays" -> 
                 Association["Weights" -> CompressedData["
1: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
                    
                    "], "Biases" -> 
                   RawArray["Real32",{
                    0.006837193388491869, -0.027870342135429382`, \
-0.03479054942727089, 
                    0.009690416976809502, -0.030236078426241875`, \
-0.0451761819422245, -0.0760890319943428, -0.004086214117705822, 
                    0.02546103112399578, 0.008272686041891575, 
                    0.035403765738010406`, -0.0032710295636206865`, \
-0.030787678435444832`, -0.0446261465549469, -0.009032185189425945, 
                    0.00014866256969980896`, 0.01697690598666668, 
                    0.0021118605509400368`, -0.02005034126341343, \
-0.02169012278318405, -0.034986961632966995`, -0.014571655541658401`, 
                    0.018068697303533554`, -0.035010188817977905`, \
-0.008844248950481415, -0.01785164512693882, -0.0305869672447443, 
                    0.0056052180007100105`, -0.0037580211646854877`, \
-0.014208570122718811`, 0.009121708571910858, 
                    0.009492169134318829, -0.031468573957681656`, \
-0.009174385108053684, 0.039937883615493774`, -0.03575531020760536, 
                    0.010573111474514008`, -0.0052313064225018024`, \
-0.021731363609433174`, -0.03704218193888664, 0.044847480952739716`, 
                    0.0055619156919419765`, -0.009209400042891502, \
-0.0216024499386549, 
                    0.013268686830997467`, -0.003618400078266859, \
-0.0031670844182372093`, 
                    0.005257119424641132, -0.016882415860891342`, \
-0.03729841113090515}]], "Parameters" -> 
                 Association[
                  "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                   "$InputSize" -> 50, "$InputDimensions" -> {50}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "11" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {50}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "12" -> 
               Association[
                "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                   "OutputPorts" -> 
                   NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "13" -> 
               Association[
                "Type" -> "Linear", "Arrays" -> 
                 Association["Weights" -> CompressedData["
1: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
2yTB
                    "], "Biases" -> 
                   RawArray["Real32",{0.0447058267891407, 
                    0.01421776507049799, -0.03942866623401642, \
-0.027913130819797516`, 0.02850581705570221, -0.025349225848913193`, 
                    0.043678201735019684`, -0.02580435946583748, 
                    0.01641993597149849, -0.03466670587658882, \
-0.017163917422294617`, 0.013878162018954754`, -0.02822398766875267, 
                    0.032642289996147156`, -0.019107956439256668`, 
                    0.026116736233234406`, -0.020847203209996223`, \
-0.03219814971089363, -0.031220953911542892`, 
                    0.05949206277728081, -0.019170304760336876`, \
-0.020304562523961067`, -0.02890142798423767, 
                    0.021841756999492645`, -0.02387722209095955, \
-0.030019350349903107`, -0.04374692589044571, -0.023678915575146675`, 
                    0.045778628438711166`, -0.03712434694170952, 
                    0.03637750819325447, -0.030505675822496414`, \
-0.04231579974293709, 
                    0.03792832791805267, -0.025531576946377754`, \
-0.020578620955348015`, -0.018696649000048637`, -0.0316193550825119, 
                    0.015331952832639217`, -0.026950446888804436`, \
-0.031127771362662315`, 0.0026981409173458815`, -0.030641796067357063`, 
                    0.015973307192325592`, -0.03196069225668907, 
                    0.024378856644034386`, -0.028403649106621742`, \
-0.02029997669160366, -0.03670212998986244, -0.032467588782310486`}]], 
                 "Parameters" -> 
                 Association[
                  "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                   "$InputSize" -> 50, "$InputDimensions" -> {50}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "14" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {50}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "15" -> 
               Association[
                "Type" -> "Linear", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   RawArray["Real32",{{0.047861628234386444`, 
                    0.1633547842502594, -0.07608619332313538, \
-0.0878022089600563, 0.10559653490781784`, -0.06186305359005928, 
                    0.0933428406715393, -0.06198336184024811, 
                    0.05283375829458237, -0.08227995783090591, \
-0.011825324036180973`, 0.12706521153450012`, -0.07067951560020447, 
                    0.048595935106277466`, -0.17478413879871368`, 
                    0.11800815165042877`, -0.037271469831466675`, \
-0.010723541490733624`, -0.09059657156467438, 
                    0.08791141211986542, -0.13892647624015808`, \
-0.05758963152766228, -0.08007431030273438, 
                    0.2100202888250351, -0.2075507640838623, \
-0.03460393473505974, -0.09245333820581436, -0.11068710684776306`, 
                    0.005351466592401266, -0.034785863012075424`, 
                    0.046169329434633255`, -0.11184830963611603`, \
-0.12320598214864731`, 
                    0.18022669851779938`, -0.09588608890771866, \
-0.1357007771730423, -0.05389145016670227, -0.11166432499885559`, 
                    0.08948454260826111, -0.03615725040435791, \
-0.08617592602968216, 0.02773686684668064, -0.027761895209550858`, 
                    0.017342569306492805`, -0.1562933474779129, \
-0.0013468214310705662`, -0.055604659020900726`, -0.09442853182554245, \
-0.05914890766143799, -0.06225530803203583}}], "Biases" -> 
                   RawArray["Real32",{0.0371631421148777}]], "Parameters" -> 
                 Association[
                  "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 
                   50, "$InputDimensions" -> {50}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "13", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "14", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "15", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]],
            "2" -> Association[
            "Type" -> "ConstantArray", "Arrays" -> 
             Association["Array" -> RawArray["Real32",{-1.469779133796692}]], 
             "Parameters" -> 
             Association["Dimensions" -> {1}, "$ArrayDimensions" -> {1}], 
             "Inputs" -> Association[], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Outputs", "Mean"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "LogStd"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"]}], 
        Association["Version" -> "12.1.4", "Unstable" -> False]], "Training" -> 
      Association[
       "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "TotalTrainingTime" -> 0.577816, "MeanInputsPerSecond" -> 
        31151.785343431126`], "InputType" -> "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "(f4(f1f2f3f5f6))" -> 
           Association[
            "Weight" -> {0.3333333333333333, 0.3333333333333333, 
              0.3333333333333333, 1., 1., 1., 1., 1.}, "Type" -> 
             "NumericalVector"]], "Output" -> 
         Association[
          "(f4(f1f2f3f5f6))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 6.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f4(f1f2f3f5f6))" -> 
               Association[
                "Weight" -> {0.3333333333333333, 0.3333333333333333, 
                  0.3333333333333333, 1., 1., 1., 1., 1.}, "Type" -> 
                 "NumericalVector"]], 
             "Mean" -> {0.0095817107617648, 
              0.4104408492469807, -0.02290885177263784, \
-0.003829700281577142, -0.17936381616557304`, -0.17931156334489726`, \
-0.1335631629967906, -0.07590427358290124}, 
             "StandardDeviation" -> {0.34843975114228576`, 
              0.12427190645296747`, 0.22307889736074055`, 1.0308650555466037`,
               1.0084046080728808`, 0.9937299347656485, 0.9322153653511798, 
              1.0708577611301935`}, "Output" -> 
             Association[
              "(f4(f1f2f3f5f6))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6.]], 
             "Version" -> {12.1, 0}, "ID" -> 2852767310878769410]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "NumericalVector", "Weight" -> 6.], "Key" -> 
             "(f4(f1f2f3f5f6))", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "FeatureNumber" -> 8, 
      "DistributionData" -> {NormalDistribution, Automatic}, "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "NetworkType" -> 
        Association["Value" -> "FullyConnected", "Options" -> Association[]], 
        "NetworkDepth" -> 
        Association["Value" -> 5, "Options" -> Association[]], 
        "NumberOfParameters" -> 
        Association["Value" -> 40, "Options" -> Association[]], 
        "ActivationFunction" -> 
        Association["Value" -> "SELU", "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> None, "Options" -> Association[]], "Dropout" -> 
        Association["Value" -> 0.01, "Options" -> Association[]], 
        "NetInitializationMethod" -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association[
         "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> 
          Association[]], MaxTrainingRounds -> 
        Association["Value" -> 1000, "Options" -> Association[]], 
        ValidationSet -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "EarlyStopping" -> 
        Association["Value" -> False, "Options" -> Association[]], 
        TrainingProgressReporting -> 
        Association["Value" -> None, "Options" -> Association[]], 
        "NetTrainOptions" -> 
        Association[
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> Association[]], "LossFunction" -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "ValidationSetRatio" -> 
        Association["Value" -> None, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[52577], "TrainingFunction" -> Predict, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> -0.9527093938502881, "PreprocessingTime" -> 
      0.171376`5.685494995462556, "LossName" -> "StandardDeviation", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[7.142421645482358, 10.84578471364008], 
         "StandardDeviation" -> 
         Around[0.45300119485790774`, 0.23748789292704972`], "EvaluationTime" -> 
         0.0015773933612004826`, "TestSize" -> 4, "ModelMemory" -> 128728, 
         "ModelUtility" -> -0.04700437293851678, "TrainingSize" -> 18, 
         "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 568952, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[7.142421645482358, 7.669127918304298]}, 
         "StandardDeviationHistory" -> {
           Around[0.45300119485790774`, 0.16792929953842156`]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
           5, "NumberOfParameters" -> 40, "ActivationFunction" -> "SELU", 
           "L2Regularization" -> None, "Dropout" -> 0.01, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
           MaxTrainingRounds -> 1000, ValidationSet -> Automatic, 
           "EarlyStopping" -> False, TrainingProgressReporting -> None, 
           "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
          "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
          "TrainingTime", "TrainingMemory", "ExperimentCount", 
          "MeanCrossEntropyHistory", "StandardDeviationHistory", 
          "Configuration"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}]}], 
        Association["ID" -> 29682723788270]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 5], 
             "NumberOfParameters" -> Association["Value" -> 40], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[7.142421645482358, 10.84578471364008], 
              "StandardDeviation" -> 
              Around[0.45300119485790774`, 0.23748789292704972`], 
              "EvaluationTime" -> 0.0015773933612004826`, "TestSize" -> 4, 
              "ModelMemory" -> 128728, "ModelUtility" -> -0.04700437293851678,
               "TrainingSize" -> 18, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 568952, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[7.142421645482358, 7.669127918304298]}, 
              "StandardDeviationHistory" -> {
                Around[0.45300119485790774`, 0.16792929953842156`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0015773933612004826`, "ModelMemory" -> 
             128728, "StandardDeviation" -> 
             Around[0.45300119485790774`, 0.23748789292704972`], 
             "TrainingMemory" -> 568952, "TrainingTime" -> 
             0.7697679602658358], "Index" -> 1], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 5], 
             "NumberOfParameters" -> Association["Value" -> 40], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 2]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
              "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
              "TrainingTime", "TrainingMemory", "ExperimentCount", 
              "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
             TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 5], 
           TypeSystem`Atom[Integer]}], 2], 
        Association["ID" -> 29678428820974]], "MaxTrainingSize" -> 22, 
      "PreprocessorEvaluationTime" -> 3.509765625`3.*^-6, 
      "PreprocessorMemory" -> 71184, "InputDimension" -> 8, "OutputDimension" -> 
      1, "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
      True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
      "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
      "LastReportingTime" -> 3.802328813718895`16.332624659766438*^9, 
      "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 18, "TimeBudgets" -> 0.8465119735105572, 
          "ElapsedTimes" -> 0.754916, "ExperimentCounts" -> 1]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], 
        Association["ID" -> 29691313722862]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {10803.892066589275`}, "ID" -> 4922843929423532927], 
         "f2" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {13944.723728597088`}, "ID" -> 365386638938414886], 
         "f3" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {608.0579738074958}, "ID" -> 8084762059231395715], 
         "f4" -> Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"treetype2"}, "ID" -> 
           717539068447703646], "f5" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {18}, "ID" -> 
           3403397587327662634], "f6" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2}, "ID" -> 
           6552590257540092455]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 0.970886, 
      "MaxTrainingMemory" -> 807760, "DataMemory" -> 6376, "FunctionMemory" -> 
      275848, "LanguageVersion" -> {12.1, 0}, "Date" -> 
      DateObject[{2020, 6, 28, 10, 26, 53.730562`8.482796357841552}, 
        "Instant", "Gregorian", 5.5], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Unix", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.802250043417675*^9, 3.8022501027675343`*^9, 3.802308693445928*^9, {
   3.802308912837718*^9, 3.802308936413773*^9}, {3.802308974459035*^9, 
   3.8023090137519417`*^9}},
 CellLabel->"Out[70]=",ExpressionUUID->"f227327e-77fa-42c8-a877-f8c1e488ffe0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rf", " ", "=", " ", 
  RowBox[{"Predict", "[", 
   RowBox[{"GeneratedData", ",", " ", 
    RowBox[{"Method", "\[Rule]", "\"\<RandomForest\>\""}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.80225541611922*^9, 3.802255438616453*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"d49fedb1-d8a7-432d-a481-b9c744e9bcb4"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["PredictorFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\""}], "}"}], Short[#, 10]& ]], 
                   Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Nominal", 
                    "Numerical", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RandomForest\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\""}], "}"}], Short[#, 10]& ]], 
                   Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Nominal", 
                    "Numerical", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["22", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  PredictorFunction[
   Association[
   "ExampleNumber" -> 22, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Numerical"], "f3" -> 
           Association["Type" -> "Numerical"], "f4" -> 
           Association["Type" -> "Nominal"], "f5" -> 
           Association["Type" -> "Numerical"], "f6" -> 
           Association["Type" -> "Numerical"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 6]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Nominal", 
                  "Numerical", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> False,
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association[
          "(f4(f1f2f3f5f6))" -> 
           Association[
            "Weight" -> {0.3333333333333333, 0.3333333333333333, 
              0.3333333333333333, 1., 1., 1., 1., 1.}, "Type" -> 
             "NumericalVector"]], "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5], "f4" -> 
               Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f6" -> Association["Type" -> "Numerical", "Weight" -> 1]],
                  "Output" -> 
                 Association[
                  "(f1f2f3f5f6)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 5]], 
                 "Version" -> {12.1, 0}, "ID" -> 231164342834508402]], 
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f4" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f4" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "Version" -> {12.1, 0}, "ID" -> 901064396041800030]]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f4" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
               "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Output" -> 
             Association[
              "f4" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
               "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f4" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "VectorLength" -> 1, "Output" -> 
                 Association[
                  "f4" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], "Type" -> 
                 "NominalVector", "Version" -> {12.1, 0}, "ID" -> 
                 3994539106741818020]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "(f1f2f3f5f6)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 5]], 
                 "Imputer" -> (DimensionReducerFunction[
                   Association[
                   "ExampleNumber" -> 22, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {10169.303925297208`, 13520.77712146587, 
                    605.5530441536295, 10.227272727272728`, 
                    6.636363636363637}, "Method" -> "Naive", "VectorLength" -> 
                    5, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {10169.303925297208`, 13520.77712146587, 
                    605.5530441536295, 10.227272727272728`, 
                    6.636363636363637}, 
                    "StandardDeviation" -> {483.5669622643866, 
                    341.3465404578915, 2.3630888536580326`, 5.915555903961398,
                     4.676298599858794}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 5, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 5]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Model" -> 
                    Association[
                    "Matrix" -> {{0.13921760820572676`, 0.7812984174410894, 
                    0.29228279504329246`, -0.3717518087720393}, \
{-0.46635206110347166`, 0.5508198076453785, -0.07233392753919864, 
                    0.2772478366263204}, {-0.5946045982955214, 
                    0.046627793081273905`, -0.2605508516224518, 
                    0.35923815329215936`}, {-0.43534497624731683`, \
-0.25452098534799666`, 0.8627160149697811, -0.0346736456506402}, {
                    0.4690994947898209, 0.13861904392763674`, 
                    0.3117256837058993, 0.8091229308808862}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {10169.303925297208`, 13520.77712146587, 
                    605.5530441536295, 10.227272727272728`, 
                    6.636363636363637}, 
                    "StandardDeviation" -> {483.5669622643866, 
                    341.3465404578915, 2.3630888536580326`, 5.915555903961398,
                     4.676298599858794}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 4, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.007646, "MaxTrainingMemory" -> 68912, 
                    "DataMemory" -> 1008, "FunctionMemory" -> 22448, 
                    "LanguageVersion" -> {12.1, 0}, "Date" -> 
                    DateObject[{
                    2020, 6, 28, 10, 21, 33.528025`8.27798295181447}, 
                    "Instant", "Gregorian", 5.5], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                    "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
                   "ImputedVectors", PerformanceGoal -> "Quality"]& ), 
                 "Method" -> "DimensionReduction", "VectorLength" -> 5, 
                 "Output" -> 
                 Association[
                  "(f1f2f3f5f6)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 5]], 
                 "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
                 3651198067146993376]]}, "Invertibility" -> "Perfect", 
             "StructurePreserving" -> True, "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Mean" -> {10169.303925297208`, 13520.77712146587, 
              605.5530441536295, 10.227272727272728`, 6.636363636363637}, 
             "StandardDeviation" -> {483.5669622643866, 341.3465404578915, 
              2.3630888536580326`, 5.915555903961398, 4.676298599858794}, 
             "Output" -> 
             Association[
              "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Version" -> {12.1, 0}, "ID" -> 3634076946882221644]], 
           MachineLearning`MLProcessor["EmbedNominalVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f4" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[
               "treetype1" -> 1, "treetype2" -> 2, "treetype3" -> 3]}, 
             "Output" -> 
             Association[
              "f4" -> Association[
                "Weight" -> 1, "Type" -> "NumericalVector"]], 
             "EmbeddingVectors" -> {{{0., 0., 0.}, {
              0.3175336420536041, -0.663084089756012, 0.08149794489145279}, {
              0.19583044946193695`, 0.47686687111854553`, 
              0.09633183479309082}, {-0.6422896385192871, 
              0.17794930934906006`, -0.4402509331703186}}}, 
             "Version" -> {12.1, 0}, "ID" -> 2678518579154011963]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f4" -> Association["Weight" -> 1, "Type" -> "NumericalVector"],
                "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Spans" -> {
               Span[1, 3], 
               Span[4, 8]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "(f4(f1f2f3f5f6))" -> 
               Association[
                "Weight" -> {0.3333333333333333, 0.3333333333333333, 
                  0.3333333333333333, 1., 1., 1., 1., 1.}, "Type" -> 
                 "NumericalVector"]], "Version" -> {12.1, 0}, "ID" -> 
             8851377719873486093]]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> True, "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Numerical"]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 1481982208339855626]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {0.18181818181818182`}, 
             "StandardDeviation" -> {0.38569460791993504`}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 5048366784062691824]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 1752743920491519792]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "Numerical", "Weight" -> 1], 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "ProbabilityPostprocessor" -> Identity, 
      "InverseProcessorFunction" -> (0.18181818181818182` + 
       0.38569460791993504` #& ), 
      "ProcessorFunction" -> (-0.4714045207910317 + 2.592724864350674 #& ), 
      "Name" -> "value", 
      "Quantiles" -> {-0.4714045207910317, 2.1213203435596424`}], "Prior" -> 
    Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 0, 
    "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["Trees" -> {
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], 
          "NumericalThresholds" -> {0.19582977890968323`}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{1., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], 
          "NumericalThresholds" -> {0.19582977890968323`}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{0., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 2}], 
          "NumericalThresholds" -> {0.19582977890968323`, 
           0.47686678171157837`}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "LeafValues" -> 
          RawArray["Real32",{1., 0., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{6}], 
          "NumericalThresholds" -> {-1.493830919265747}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{2., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{4}], 
          "NumericalThresholds" -> {0.4428037405014038}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{0., 1.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{7}], 
          "NumericalThresholds" -> {-0.8754029870033264}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{2., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], 
          "NumericalThresholds" -> {0.19583013653755188`}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{1., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {0.47686609625816345`}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{2., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{8}], 
          "NumericalThresholds" -> {-0.34447136521339417`}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{0., 1.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{7}], 
          "NumericalThresholds" -> {-0.7118145823478699}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{2., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{5}], 
          "NumericalThresholds" -> {-0.3543699383735657}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{1., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{7}], 
          "NumericalThresholds" -> {-1.2233167886734009`}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{2., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{6}], 
          "NumericalThresholds" -> {-1.6321560144424438`}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{2., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{8}], 
          "NumericalThresholds" -> {0.08765608072280884}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{0., 1.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{6}], 
          "NumericalThresholds" -> {-1.493830919265747}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{2., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{6}], 
          "NumericalThresholds" -> {-1.493830919265747}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{2., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.09633104503154755}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{2., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{8}], 
          "NumericalThresholds" -> {-0.35026809573173523`}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{0., 1.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{8}], 
          "NumericalThresholds" -> {0.06956805288791656}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{0., 1.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{8}], 
          "NumericalThresholds" -> {-0.35026809573173523`}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{0., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {0.47686633467674255`}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{2., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{2, 7}], 
          "NumericalThresholds" -> {0.17795003950595856`, 
           0.12634675204753876`}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "LeafValues" -> 
          RawArray["Real32",{2., 0., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{7}], 
          "NumericalThresholds" -> {-0.8754029870033264}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{2., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{8}], 
          "NumericalThresholds" -> {0.08765608072280884}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{0., 2.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], 
          "NumericalThresholds" -> {0.}, "Children" -> 
          RawArray["Integer16",{{-1, -1}}], "LeafValues" -> 
          RawArray["Real32",{0.}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{6, 5}], 
          "NumericalThresholds" -> {-1.493830919265747, -0.5949985980987549}, 
          "Children" -> RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
          "LeafValues" -> RawArray["Real32",{2., 0., 0.}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {0.177949458360672}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{2., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{8}], 
          "NumericalThresholds" -> {0.08765608072280884}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{0., 1.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.09633104503154755}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{2., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{8}], 
          "NumericalThresholds" -> {-0.5641605257987976}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{0., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{2, 3}], 
          "NumericalThresholds" -> {0.47686633467674255`, 
           0.09633180499076843}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "LeafValues" -> 
          RawArray["Real32",{1., 0., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {0.47686633467674255`}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{1., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {0.47686609625816345`}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{1., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{8}], 
          "NumericalThresholds" -> {0.713616669178009}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{0., 2.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.0963311418890953}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{2., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {0.17795003950595856`}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{2., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {0.177949458360672}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{2., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{8}], 
          "NumericalThresholds" -> {0.08765608072280884}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{0., 1.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{7, 7}], 
          "NumericalThresholds" -> {-1.2233167886734009`, 0.3013271391391754},
           "Children" -> RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
          "LeafValues" -> RawArray["Real32",{2., 0., 0.}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{8}], 
          "NumericalThresholds" -> {-0.1304134726524353}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{0., 2.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{6}], 
          "NumericalThresholds" -> {-0.05824299156665802}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{0., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{6}], 
          "NumericalThresholds" -> {-1.493830919265747}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{2., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {0.17795003950595856`}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{2., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{8}], 
          "NumericalThresholds" -> {0.08765608072280884}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{0., 2.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{2}], 
          "NumericalThresholds" -> {0.17795003950595856`}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{2., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {-0.44025105237960815`}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{2., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{6}], 
          "NumericalThresholds" -> {-0.9210996031761169}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{2., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{8}], 
          "NumericalThresholds" -> {0.06956805288791656}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{0., 2.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{6, 7}], 
          "NumericalThresholds" -> {-0.9210996031761169, \
-0.034812141209840775`}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "LeafValues" -> 
          RawArray["Real32",{1., 0., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{3}], 
          "NumericalThresholds" -> {0.09633146971464157}, "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
          RawArray["Real32",{1., 0.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]]}, "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association[
          "Weight" -> {0.3333333333333333, 0.3333333333333333, 
            0.3333333333333333, 1., 1., 1., 1., 1.}, "Type" -> 
           "NumericalVector"], "Key" -> "(f4(f1f2f3f5f6))", "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "DistributionData" -> {NormalDistribution, 0.6113266387781725}, 
      "Method" -> "RandomForest", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "FeatureFraction" -> 
        Association["Value" -> Rational[1, 3], "Options" -> Association[]], 
        "LeafSize" -> Association["Value" -> 5, "Options" -> Association[]], 
        "TreeNumber" -> 
        Association["Value" -> 50, "Options" -> Association[]], 
        "DistributionSmoothing" -> 
        Association["Value" -> 0.5, "Options" -> Association[]], 
        "Implementation" -> 
        Association["Value" -> "DAAL", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[9153], "TrainingFunction" -> Predict, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> -0.9527093938502881, "PreprocessingTime" -> 
      0.128046`5.55891100968534, "LossName" -> "StandardDeviation", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[0.534079833571678, 0.3716882432969453], 
         "StandardDeviation" -> 
         Around[0.3799047775296892, 0.0983531107672404], "EvaluationTime" -> 
         0.0009952679263837423, "TestSize" -> 4, "ModelMemory" -> 96896, 
         "ModelUtility" -> 0.22380796997307184`, "TrainingSize" -> 18, 
         "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 243224, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.534079833571678, 0.2628232773225853]}, 
         "StandardDeviationHistory" -> {
           Around[0.3799047775296892, 0.06954615157430732]}, 
         "Configuration" -> {
          "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
           Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
           0.5, "Implementation" -> Automatic}], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
          "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
          "TrainingTime", "TrainingMemory", "ExperimentCount", 
          "MeanCrossEntropyHistory", "StandardDeviationHistory", 
          "Configuration"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}]}], 
        Association["ID" -> 202645351765166]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.534079833571678, 0.3716882432969453], 
              "StandardDeviation" -> 
              Around[0.3799047775296892, 0.0983531107672404], 
              "EvaluationTime" -> 0.0009952679263837423, "TestSize" -> 4, 
              "ModelMemory" -> 96896, "ModelUtility" -> 0.22380796997307184`, 
              "TrainingSize" -> 18, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 243224, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.534079833571678, 0.2628232773225853]}, 
              "StandardDeviationHistory" -> {
                Around[0.3799047775296892, 0.06954615157430732]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0009952679263837423, "ModelMemory" -> 96896,
              "StandardDeviation" -> 
             Around[0.3799047775296892, 0.0983531107672404], "TrainingMemory" -> 
             243224, "TrainingTime" -> 0.061144842502527205`], "Index" -> 1]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
              "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
              "TrainingTime", "TrainingMemory", "ExperimentCount", 
              "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
             TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 1], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "ModelMemory", "StandardDeviation", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], 
        Association["ID" -> 202641056797870]], "MaxTrainingSize" -> 22, 
      "PreprocessorEvaluationTime" -> 8.28173828125`3.*^-6, 
      "PreprocessorMemory" -> 71184, "InputDimension" -> 8, "OutputDimension" -> 
      1, "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
      True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
      "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
      "LastReportingTime" -> 3.802328493657592`16.332624623209664*^9, 
      "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 18, "TimeBudgets" -> 0.061144842502527205`, 
          "ElapsedTimes" -> 0.058851, "ExperimentCounts" -> 1]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], 
        Association["ID" -> 202653941699758]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {10803.892066589275`}, "ID" -> 4922843929423532927], 
         "f2" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {13944.723728597088`}, "ID" -> 365386638938414886], 
         "f3" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {608.0579738074958}, "ID" -> 8084762059231395715], 
         "f4" -> Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"treetype2"}, "ID" -> 
           717539068447703646], "f5" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {18}, "ID" -> 
           3403397587327662634], "f6" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2}, "ID" -> 
           6552590257540092455]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 0.241745, 
      "MaxTrainingMemory" -> 451312, "DataMemory" -> 6376, "FunctionMemory" -> 
      229680, "LanguageVersion" -> {12.1, 0}, "Date" -> 
      DateObject[{2020, 6, 28, 10, 21, 33.75044`8.280854419202488}, "Instant",
         "Gregorian", 5.5], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Unix", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.802255439402665*^9, 3.8023086937966747`*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"9ffa67c0-980e-46ab-9082-e9c7c8b02c0c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NeNe", " ", "=", " ", 
  RowBox[{"Predict", "[", 
   RowBox[{"GeneratedData", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<NearestNeighbors\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.802255800616815*^9, 3.802255821604072*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"fb06fd53-1466-43aa-ad6c-5303ebf32d53"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["PredictorFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\""}], "}"}], Short[#, 10]& ]], 
                   Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Nominal", 
                    "Numerical", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\""}], "}"}], Short[#, 10]& ]], 
                   Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Nominal", 
                    "Numerical", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["22", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  PredictorFunction[
   Association[
   "ExampleNumber" -> 22, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Numerical"], "f3" -> 
           Association["Type" -> "Numerical"], "f4" -> 
           Association["Type" -> "Nominal"], "f5" -> 
           Association["Type" -> "Numerical"], "f6" -> 
           Association["Type" -> "Numerical"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 6]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Nominal", 
                  "Numerical", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> False,
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association[
          "(f4(f1f2f3f5f6))" -> 
           Association[
            "Weight" -> {0.3333333333333333, 0.3333333333333333, 
              0.3333333333333333, 1., 1., 1., 1., 1.}, "Type" -> 
             "NumericalVector"]], "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5], "f4" -> 
               Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f6" -> Association["Type" -> "Numerical", "Weight" -> 1]],
                  "Output" -> 
                 Association[
                  "(f1f2f3f5f6)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 5]], 
                 "Version" -> {12.1, 0}, "ID" -> 231164342834508402]], 
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f4" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f4" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "Version" -> {12.1, 0}, "ID" -> 901064396041800030]]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f4" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
               "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Output" -> 
             Association[
              "f4" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
               "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f4" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "VectorLength" -> 1, "Output" -> 
                 Association[
                  "f4" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], "Type" -> 
                 "NominalVector", "Version" -> {12.1, 0}, "ID" -> 
                 3994539106741818020]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "(f1f2f3f5f6)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 5]], 
                 "Imputer" -> (DimensionReducerFunction[
                   Association[
                   "ExampleNumber" -> 22, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {10169.303925297208`, 13520.77712146587, 
                    605.5530441536295, 10.227272727272728`, 
                    6.636363636363637}, "Method" -> "Naive", "VectorLength" -> 
                    5, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {10169.303925297208`, 13520.77712146587, 
                    605.5530441536295, 10.227272727272728`, 
                    6.636363636363637}, 
                    "StandardDeviation" -> {483.5669622643866, 
                    341.3465404578915, 2.3630888536580326`, 5.915555903961398,
                     4.676298599858794}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 5, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 5]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Model" -> 
                    Association[
                    "Matrix" -> {{0.13921760820572676`, 0.7812984174410894, 
                    0.29228279504329246`, -0.3717518087720393}, \
{-0.46635206110347166`, 0.5508198076453785, -0.07233392753919864, 
                    0.2772478366263204}, {-0.5946045982955214, 
                    0.046627793081273905`, -0.2605508516224518, 
                    0.35923815329215936`}, {-0.43534497624731683`, \
-0.25452098534799666`, 0.8627160149697811, -0.0346736456506402}, {
                    0.4690994947898209, 0.13861904392763674`, 
                    0.3117256837058993, 0.8091229308808862}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {10169.303925297208`, 13520.77712146587, 
                    605.5530441536295, 10.227272727272728`, 
                    6.636363636363637}, 
                    "StandardDeviation" -> {483.5669622643866, 
                    341.3465404578915, 2.3630888536580326`, 5.915555903961398,
                     4.676298599858794}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 4, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.012098, "MaxTrainingMemory" -> 68736, 
                    "DataMemory" -> 1008, "FunctionMemory" -> 22448, 
                    "LanguageVersion" -> {12.1, 0}, "Date" -> 
                    DateObject[{
                    2020, 6, 28, 10, 21, 33.84438`8.28206154276301}, 
                    "Instant", "Gregorian", 5.5], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                    "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
                   "ImputedVectors", PerformanceGoal -> "Quality"]& ), 
                 "Method" -> "DimensionReduction", "VectorLength" -> 5, 
                 "Output" -> 
                 Association[
                  "(f1f2f3f5f6)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 5]], 
                 "Type" -> "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
                 3651198067146993376]]}, "Invertibility" -> "Perfect", 
             "StructurePreserving" -> True, "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Mean" -> {10169.303925297208`, 13520.77712146587, 
              605.5530441536295, 10.227272727272728`, 6.636363636363637}, 
             "StandardDeviation" -> {483.5669622643866, 341.3465404578915, 
              2.3630888536580326`, 5.915555903961398, 4.676298599858794}, 
             "Output" -> 
             Association[
              "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Version" -> {12.1, 0}, "ID" -> 3634076946882221644]], 
           MachineLearning`MLProcessor["EmbedNominalVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f4" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[
               "treetype1" -> 1, "treetype2" -> 2, "treetype3" -> 3]}, 
             "Output" -> 
             Association[
              "f4" -> Association[
                "Weight" -> 1, "Type" -> "NumericalVector"]], 
             "EmbeddingVectors" -> {{{0., 0., 0.}, {
              0.3175336420536041, -0.663084089756012, 0.08149794489145279}, {
              0.19583044946193695`, 0.47686687111854553`, 
              0.09633183479309082}, {-0.6422896385192871, 
              0.17794930934906006`, -0.4402509331703186}}}, 
             "Version" -> {12.1, 0}, "ID" -> 2678518579154011963]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f4" -> Association["Weight" -> 1, "Type" -> "NumericalVector"],
                "(f1f2f3f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 5]], 
             "Spans" -> {
               Span[1, 3], 
               Span[4, 8]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "(f4(f1f2f3f5f6))" -> 
               Association[
                "Weight" -> {0.3333333333333333, 0.3333333333333333, 
                  0.3333333333333333, 1., 1., 1., 1., 1.}, "Type" -> 
                 "NumericalVector"]], "Version" -> {12.1, 0}, "ID" -> 
             8851377719873486093]]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> True, "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Numerical"]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 1481982208339855626]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {0.18181818181818182`}, 
             "StandardDeviation" -> {0.38569460791993504`}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 5048366784062691824]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 1752743920491519792]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "Numerical", "Weight" -> 1], 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "ProbabilityPostprocessor" -> Identity, 
      "InverseProcessorFunction" -> (0.18181818181818182` + 
       0.38569460791993504` #& ), 
      "ProcessorFunction" -> (-0.4714045207910317 + 2.592724864350674 #& ), 
      "Name" -> "value", 
      "Quantiles" -> {-0.4714045207910317, 2.1213203435596424`}], "Prior" -> 
    Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 0, 
    "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "NeighborsFunction" -> 
      MachineLearning`PackageScope`NeighborsFunction["Nearest", 
        NearestFunction[
         Hold[
          Nearest[CompressedData["
1:eJwV1Hs0lGkcB/DBsNWQe5FbOhJpcskiXX6iUJFLZ0XIJbYYoUTouLQnnS4q
sSqMFZKIU7MuJymPqR3Xdse4jGLcc0nGlJlxmVlrn/eP57x/fc73Pd/3+7yG
oTHe4bIkEmkTPuvwsUs30Cq++wX1q1rvVWhtgUwbMyd1Kg9Zxp+Y4LNF4F5Y
WWfYzEUKN4d+99CTIJmzsrm12UL0rOuGXRQSQ/En0QepSjsceJ7SLbk+DDWJ
Bl9sKl5DrJMyM8xTjNKfkK/ab5hAGrN7e9P8h0GW9s+tbdQS9ERalHyW0Ywa
aemlK9irg7L3Cvahx1QiTLA/pZ8Vti9DiGLJ5RtNtHnA/Fpoan5KDL7jqUuR
wUPAd04l5fgK0eTzInWSajsEhd95uoZ9JK2EQ8Weq/TuruqRBZSUXDdg7/QN
hebev63QXY3muOEJjJVumFMwGO+I5CKXlKO2izi/KijRh3j/wjcNDabYW135
5aXUWAx3bzAGI0RCeNu1tvmo7A8oqlXh2c6J4MI6Ph+qBMgt37tqAfs7fyi7
EvkdOoJVe+zVszR8j3uIUAjd6HXq9ml0QbeUlRLDhsFs+bQEXwE4a2gVSB5w
kerlelIJ7j/fjGOhiPtXYGq/VsP9C0V/Re30ZCJFJ7Vtvb2kZjL92yqNLkWZ
/61orFYI0YRWfYZV5AKYmdCClnD++BmOqxTnh6Oxtt04X6tAl6QSP4IWTQ9G
m77ngLTSWMWc2gCD95WeBn8XgduOwfKFvim4RqF7iLAvIHca/od9bPCji3uw
r/crv8y+NAH7b/pvfXluAcImjMwz5PnwUT/RwF1uDn31X3O0YTOgQE5sJMG+
dXHmHiljGFYL3R/ZYt/x2CGGfHgEnaxjL2eTupCL9kDM9u/zaGtu6/lUFQHU
VAcF5iuNI0v7D45C7OVmj/OI/u3IAUxj7OnX5rWpGvPIL+Y3xaiTMs2RG4wa
bVgj6GUoOfuHaw9YnWXkcShcVHXVdYbYX51NH3cVe9dnv9Y7Yl+po+ggfc9G
s/YJbvpHxKB7+pIqQ2kR6Br6BpuanqAXr6J1nE8IERNRtMpw/xaJ36mquP+N
zvnyxP6Z04+i9Ej9aI9eyunMW8sogzk6dlRxBW0RZ8U/wM+vj3siWeRpUPPx
s5LB+ysdHXlB9G8R7cnai/PzRiriJ314EMtkJEXEjQOrqcfxI6sdCr3O9N+Q
mUZe6m9/opUuopW/c7cQPs3h3KF/sd9q1zJqhn1Y37nxTr0luGIxvXMwqwim
QniCsiQ+utQWFWHeOoU6KCm99qbjyLt5poq4P7r1Ta+I/gcMtQz3Y69PlrAy
oybRm3grO/mD7UAa/TbbNlsLXe9OBhjuagZP5rhMcWw9yLgul61inxRacYz4
/sN61PWHsJ9lt3hdrF6BujSBv9WBISAZ97JZgR+Q/P6ch5PdxSijzDjMZ7sQ
ZftaPCT+H9baB5MpuD+z8PPBmri/0nJnvfPKy0D9897htWouovQ0ujdOLaGe
z2STlGIpeurbJdAdU3BQ2kSvW8b5u5PTh4j7Q3FuMCH2U/RmLq4mZhhtG3CT
8txnIKBzz73IznlYiuI03VprR32bW0w9/bjILTP68RXvXuCURKdKbCeR2bW4
Bp2hWmj6dL0yk/8JhXT/aLSLF0P8vqaC/s/LoLbRQ+C1YxqNJFqP6MxNQV6j
pi2x/zxRqyaxH/MDIYctcf56imJyXMcYaqNtsNbi9cC1HBeGggkHLgfSaxoC
JeDGu53gIp2C8gm5lDXsR011fib6p0WLLIn7l73DojGubwkcduVNlJ2aBf24
mvok3WGQ5AiHTI5LgO+oaW0c0A3/A8Kd2As=
            "] -> Automatic, Method -> 
           "KDtree"]]]], "NeighborsNumber" -> 1, 
      "DistributionData" -> {NormalDistribution, 2.2250738585072014`*^-308}, 
      "TrainingOutput" -> 
      RawArray["Real32",{
        2.1213202476501465`, -0.4714045226573944, -0.4714045226573944, \
-0.4714045226573944, -0.4714045226573944, -0.4714045226573944, 
        2.1213202476501465`, -0.4714045226573944, -0.4714045226573944, \
-0.4714045226573944, -0.4714045226573944, -0.4714045226573944, 
        2.1213202476501465`, -0.4714045226573944, -0.4714045226573944, \
-0.4714045226573944, -0.4714045226573944, 
        2.1213202476501465`, -0.4714045226573944, -0.4714045226573944, \
-0.4714045226573944, -0.4714045226573944}], "DistributionSmoothing" -> 0.5, 
      "Processor" -> MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association[
          "Weight" -> {0.3333333333333333, 0.3333333333333333, 
            0.3333333333333333, 1., 1., 1., 1., 1.}, "Type" -> 
           "NumericalVector"], "Key" -> "(f4(f1f2f3f5f6))", "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Method" -> "NearestNeighbors", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "NeighborsNumber" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "DistributionSmoothing" -> 
        Association["Value" -> 0.5, "Options" -> Association[]], 
        "NearestMethod" -> 
        Association["Value" -> "KDtree", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[9265], "TrainingFunction" -> Predict, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> -0.9527093938502881, "PreprocessingTime" -> 
      0.1466`5.617678963801085, "LossName" -> "StandardDeviation", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         Around[8.945603132500458*^289, 9.480751908109177*^153], 
         "StandardDeviation" -> 
         Around[0.24896479886598463`, 0.1821432319056511], "EvaluationTime" -> 
         0.00009952679263837423, "TestSize" -> 4, "ModelMemory" -> 7544, 
         "ModelUtility" -> 0.5607200073930753, "TrainingSize" -> 18, 
         "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 86808, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[8.945603132500458*^289, 6.703903964971299*^153]}, 
         "StandardDeviationHistory" -> {
           Around[0.24896479886598463`, 0.1287947144277198]}, 
         "Configuration" -> {
          "NearestNeighbors", "NeighborsNumber" -> Automatic, 
           "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
         "FinalTrainingSize" -> 22], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
          "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
          "TrainingTime", "TrainingMemory", "ExperimentCount", 
          "MeanCrossEntropyHistory", "StandardDeviationHistory", 
          "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 202662531634350]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[8.945603132500458*^289, 9.480751908109177*^153], 
              "StandardDeviation" -> 
              Around[0.24896479886598463`, 0.1821432319056511], 
              "EvaluationTime" -> 0.00009952679263837423, "TestSize" -> 4, 
              "ModelMemory" -> 7544, "ModelUtility" -> 0.5607200073930753, 
              "TrainingSize" -> 18, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 86808, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[8.945603132500458*^289, 6.703903964971299*^153]}, 
              "StandardDeviationHistory" -> {
                Around[0.24896479886598463`, 0.1287947144277198]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00009952679263837423, "ModelMemory" -> 7544,
              "StandardDeviation" -> 
             Around[0.24896479886598463`, 0.1821432319056511], 
             "TrainingMemory" -> 86808, "TrainingTime" -> 
             0.007697679602658355], "Index" -> 1]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 3]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
              "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
              "TrainingTime", "TrainingMemory", "ExperimentCount", 
              "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
             TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 1], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "ModelMemory", "StandardDeviation", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], 
        Association["ID" -> 202658236667054]], "MaxTrainingSize" -> 22, 
      "PreprocessorEvaluationTime" -> 8.22705078125`3.*^-6, 
      "PreprocessorMemory" -> 71184, "InputDimension" -> 8, "OutputDimension" -> 
      1, "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
      True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
      "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
      "LastReportingTime" -> 3.802328493995299`16.33262462324824*^9, 
      "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 18, "TimeBudgets" -> 0.014660000000000001`, 
          "ElapsedTimes" -> 0.010244, "ExperimentCounts" -> 1]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], 
        Association["ID" -> 202671121568942]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {10803.892066589275`}, "ID" -> 4922843929423532927], 
         "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {13944.723728597088`}, "ID" -> 365386638938414886], 
         "f3" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {608.0579738074958}, "ID" -> 8084762059231395715], 
         "f4" -> Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"treetype2"}, "ID" -> 
           717539068447703646], "f5" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {18}, "ID" -> 
           3403397587327662634], "f6" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2}, "ID" -> 
           6552590257540092455]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 0.248543, 
      "MaxTrainingMemory" -> 392160, "DataMemory" -> 6376, "FunctionMemory" -> 
      139808, "LanguageVersion" -> {12.1, 0}, "Date" -> 
      DateObject[{2020, 6, 28, 10, 21, 34.05689`8.284779966510401}, "Instant",
         "Gregorian", 5.5], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Unix", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8022558239125013`*^9, 3.80230869407215*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"7b519ac1-8c5d-4b4e-91b1-5e6080c54081"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.801763148316057*^9, 3.801763250054641*^9}, 
   3.801763320265337*^9, {3.802255465018518*^9, 3.802255523262188*^9}, {
   3.802255696011753*^9, 3.802255709782112*^9}, {3.802255826751877*^9, 
   3.802255828646379*^9}, 3.802308737537019*^9},
 CellLabel->"In[35]:=",ExpressionUUID->"54393bb5-53c8-4a7d-95b2-fad82ee12176"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"nn", "[", 
  RowBox[{"{", 
   RowBox[{"9500", ",", "12000", ",", 
    RowBox[{"p", "[", 
     RowBox[{"{", 
      RowBox[{"9500", ",", "12000"}], "}"}], "]"}], ",", "\"\<treetype1\>\"", 
    ",", "0", ",", "0"}], "}"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"lr", "[", 
  RowBox[{"{", 
   RowBox[{"9500", ",", "12000", ",", 
    RowBox[{"p", "[", 
     RowBox[{"{", 
      RowBox[{"9500", ",", "12000"}], "}"}], "]"}], ",", "\"\<treetype1\>\"", 
    ",", "0", ",", "0"}], "}"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"rf", "[", 
  RowBox[{"{", 
   RowBox[{"9500", ",", "12000", ",", 
    RowBox[{"p", "[", 
     RowBox[{"{", 
      RowBox[{"9500", ",", "12000"}], "}"}], "]"}], ",", "\"\<treetype1\>\"", 
    ",", "0", ",", "0"}], "}"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"gbt", "[", 
  RowBox[{"{", 
   RowBox[{"9500", ",", "12000", ",", 
    RowBox[{"p", "[", 
     RowBox[{"{", 
      RowBox[{"9500", ",", "12000"}], "}"}], "]"}], ",", "\"\<treetype1\>\"", 
    ",", "0", ",", "0"}], "}"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"NeNe", "[", 
  RowBox[{"{", 
   RowBox[{"9500", ",", "12000", ",", 
    RowBox[{"p", "[", 
     RowBox[{"{", 
      RowBox[{"9500", ",", "12000"}], "}"}], "]"}], ",", "\"\<treetype1\>\"", 
    ",", "0", ",", "0"}], "}"}], "]"}]}], "Input",
 CellChangeTimes->{{3.8023087136126213`*^9, 3.802308745538282*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"3ff20d42-8b66-4e19-9e44-1a5f434e8b39"],

Cell[BoxData["0.9622348847820439`"], "Output",
 CellChangeTimes->{
  3.802308746600975*^9, {3.802309004822106*^9, 3.802309015223769*^9}},
 CellLabel->"Out[71]=",ExpressionUUID->"8f9e99b0-d19c-4337-aac5-ac4ba6347ffa"],

Cell[BoxData["0.1777578137925065`"], "Output",
 CellChangeTimes->{
  3.802308746600975*^9, {3.802309004822106*^9, 3.802309015228533*^9}},
 CellLabel->"Out[72]=",ExpressionUUID->"055f1859-4b66-451d-8eaa-b68ab5e46483"],

Cell[BoxData["0.46723219167893376`"], "Output",
 CellChangeTimes->{
  3.802308746600975*^9, {3.802309004822106*^9, 3.802309015256301*^9}},
 CellLabel->"Out[73]=",ExpressionUUID->"19ad5094-2b2f-4396-8a21-042c37237438"],

Cell[BoxData["0.18181818181818182`"], "Output",
 CellChangeTimes->{
  3.802308746600975*^9, {3.802309004822106*^9, 3.802309015258301*^9}},
 CellLabel->"Out[74]=",ExpressionUUID->"dbcd4697-a1ec-4f0c-a2b0-4ce356a9ee4e"],

Cell[BoxData[
 RowBox[{"-", "7.19846043883976`*^-10"}]], "Output",
 CellChangeTimes->{
  3.802308746600975*^9, {3.802309004822106*^9, 3.8023090152592793`*^9}},
 CellLabel->"Out[75]=",ExpressionUUID->"5a11b324-25da-4a0c-9931-3a020023aa58"]
}, Open  ]],

Cell["", "Text",
 CellChangeTimes->{{3.801763269391493*^9, 3.801763283134009*^9}, 
   3.8020144701836*^9},ExpressionUUID->"2a52db0b-39d0-4a5d-9322-b2ec939c7328"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"nn", "[", 
    RowBox[{"{", 
     RowBox[{"10000", ",", "12000", ",", 
      RowBox[{"p", "[", 
       RowBox[{"{", 
        RowBox[{"10000", ",", "12000"}], "}"}], "]"}], ",", 
      "\"\<treetype3\>\"", ",", "0", ",", "10"}], "}"}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{"lr", "[", 
    RowBox[{"{", 
     RowBox[{"10000", ",", "12000", ",", 
      RowBox[{"p", "[", 
       RowBox[{"{", 
        RowBox[{"10000", ",", "12000"}], "}"}], "]"}], ",", 
      "\"\<treetype3\>\"", ",", "0", ",", "10"}], "}"}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{"rf", "[", 
    RowBox[{"{", 
     RowBox[{"10000", ",", "12000", ",", 
      RowBox[{"p", "[", 
       RowBox[{"{", 
        RowBox[{"10000", ",", "12000"}], "}"}], "]"}], ",", 
      "\"\<treetype3\>\"", ",", "0", ",", "10"}], "}"}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{"gbt", "[", 
    RowBox[{"{", 
     RowBox[{"10000", ",", "12000", ",", 
      RowBox[{"p", "[", 
       RowBox[{"{", 
        RowBox[{"10000", ",", "12000"}], "}"}], "]"}], ",", 
      "\"\<treetype3\>\"", ",", "0", ",", "10"}], "}"}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{"NeNe", "[", 
    RowBox[{"{", 
     RowBox[{"10000", ",", "12000", ",", 
      RowBox[{"p", "[", 
       RowBox[{"{", 
        RowBox[{"10000", ",", "12000"}], "}"}], "]"}], ",", 
      "\"\<treetype3\>\"", ",", "0", ",", "10"}], "}"}], "]"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.801763294317051*^9, 3.801763347561769*^9}, {
  3.802255467832417*^9, 3.8022555264321947`*^9}, {3.802255699151206*^9, 
  3.8022556994108877`*^9}, {3.802255831656736*^9, 3.802255833213399*^9}, {
  3.8023087815499067`*^9, 3.802308824589635*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"b3639201-f4ad-4564-a4a5-459ce151a63c"],

Cell[BoxData["1.0380141520982948`"], "Output",
 CellChangeTimes->{{3.8017633020684767`*^9, 3.8017633481576138`*^9}, 
   3.802250014242305*^9, {3.802255468466723*^9, 3.802255526890452*^9}, 
   3.802255699949551*^9, 3.802255833641837*^9, 3.802308694128706*^9, 
   3.802308825772502*^9, 3.802309007383062*^9},
 CellLabel->"Out[65]=",ExpressionUUID->"f3390657-9980-4633-8cad-524cc3a0c406"],

Cell[BoxData["0.8715820491963044`"], "Output",
 CellChangeTimes->{{3.8017633020684767`*^9, 3.8017633481576138`*^9}, 
   3.802250014242305*^9, {3.802255468466723*^9, 3.802255526890452*^9}, 
   3.802255699949551*^9, 3.802255833641837*^9, 3.802308694128706*^9, 
   3.802308825772502*^9, 3.802309007385675*^9},
 CellLabel->"Out[66]=",ExpressionUUID->"c79c459f-b8a1-47b8-b2fe-9cbe1445a84b"],

Cell[BoxData["0.5983683583717117`"], "Output",
 CellChangeTimes->{{3.8017633020684767`*^9, 3.8017633481576138`*^9}, 
   3.802250014242305*^9, {3.802255468466723*^9, 3.802255526890452*^9}, 
   3.802255699949551*^9, 3.802255833641837*^9, 3.802308694128706*^9, 
   3.802308825772502*^9, 3.802309007387038*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"cc0f958d-5919-4da9-af9b-45c1ee0c5532"],

Cell[BoxData["0.18181818181818182`"], "Output",
 CellChangeTimes->{{3.8017633020684767`*^9, 3.8017633481576138`*^9}, 
   3.802250014242305*^9, {3.802255468466723*^9, 3.802255526890452*^9}, 
   3.802255699949551*^9, 3.802255833641837*^9, 3.802308694128706*^9, 
   3.802308825772502*^9, 3.802309007388139*^9},
 CellLabel->"Out[68]=",ExpressionUUID->"81b85810-84e9-4f1d-990e-2cd92a8af296"],

Cell[BoxData["0.9999999630082246`"], "Output",
 CellChangeTimes->{{3.8017633020684767`*^9, 3.8017633481576138`*^9}, 
   3.802250014242305*^9, {3.802255468466723*^9, 3.802255526890452*^9}, 
   3.802255699949551*^9, 3.802255833641837*^9, 3.802308694128706*^9, 
   3.802308825772502*^9, 3.802309007425301*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"c10ec1d3-d72c-4fe6-9ce6-469e76283766"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8022555436356373`*^9, 3.8022555544651737`*^9}, {
  3.802255730946759*^9, 3.8022557698177958`*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"fb459223-db71-417d-89cd-600ac5725ba0"],

Cell["", "Text",
 CellChangeTimes->{{3.801763354197578*^9, 3.801763365330158*^9}, 
   3.802014468579547*^9},ExpressionUUID->"759315ba-e93d-4c35-9d20-\
4a31aeac6e17"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Rasterize", "@", 
  RowBox[{"Information", "@", 
   RowBox[{"{", 
    RowBox[{
    "nn", ",", " ", "lr", ",", "gbt", ",", " ", "rf", ",", " ", "NeNe"}], 
    "}"}]}]}]], "Input",
 CellChangeTimes->{{3.8022500471535597`*^9, 3.802250057505135*^9}, {
  3.802250117163535*^9, 3.802250117310793*^9}, {3.802256475463763*^9, 
  3.802256507141011*^9}, {3.802256543288643*^9, 3.802256548269725*^9}, {
  3.802415727788904*^9, 
  3.8024157305037394`*^9}},ExpressionUUID->"72d9d9fa-c1e8-4fb4-96e8-\
aae8cf7ca486"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
Hxd65vKq8RiGmJ4SMyXoSwTRdcvnyr2hyuP5c2ez0mZNHv45Xp4UORKmLKZf
bGvDMpiOPsMWc9csE9Prv/l6xoShHeoJ8vOC6RMm+n8S6vvh9FDfwwf32vp+
mGFSK5YtW3bTTTch3amfLnO6Qh7xuZVP4Y8YWRi/BusVxuIwxAhNTU0dNmwY
PthYWGyF7RXG4jiqr69H+yizcjHUHLjtRXywrPTNcKU8Yu3og5w1e/ZsqVEW
Kwwqm7ppKFaGK//edfr06ZkzZ2JbUEhR4tBDMd3GCmMwejf2BvYSiglqspg4
bdo0rALdQw3EBi5dulR+wjUqjMWyDLB/5s+fL6anp6djRzn2tNW5MeMsyqMc
2irb1mWE+X0sz2HIyZiPUax98PFIyf5Zk4ZjJGK0rk1PER6K4TzO872jh4rE
Mvt2bMDYPFn/DR6XFe1CucNaIgIGLIwPwyCVTWHIF+zcuDB+IupPzFhPjPHT
TSfnTw/9fvxOGPr1V0dkJ2HEuWvTo0e7o53UmRFwXjHLRB4tVj9rFQabiY1t
bWm2vSfWmrIDk1phY4UhhBDSpXTD7zyq8ohsMHHiRJk3ECpWrVqFNTY0NOzb
tw+RY8+ePWKWyZHH5uZmZA9oHdwKFgnVqqysNBgDDwIGpsPgEBrFUU7zPoiX
p6WlwUORKpOSksaOHYu8cfbsWUSvoqIfvs0R5xBvhMeh/a1bt2J5rA5rwWLo
pFjMRnlcu3Yt8gxehY6NHz9edsz8kIeUR/QTsQ1JCestKSlBsEQwFsugD0hr
2CfQSWQk7EaLW4r9iTyJzjc1NaFj0klF0sOuxuODBw/iqTy1b+rUqTBBLIwY
uW7dOkRK8QFA5/E4NzcXe6CioiI0NFSuEUYZHh6OSIwGhV12hTwmhAdkL002
mYgIV7I/L8TrvYqyIvOXrM9cgFQjnyLeIBAimKnLbMleinwFr2xsqCv9/+yd
WVQV253/k3R3ku6s5L/Sa3Un3Q+dlYd+Sdbqh+6nXt0rnYfuvkluxs69uYN3
HgSUUREQEWQGmVRQQRQRFQVBUQEnBBGU6cogo4wCgoDMKKPX8/9ytu5bOUNx
wAOcU34/y+WqYdeuXXXO/vH7nNpVVVsRse2j+i9Kdfo06egef3gWJu5WlSDx
G+x/nvOXXsvpam0YGx6639YIHbt46pBYLhJOZIntTbV93R2J4dtgfEgCsV+k
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
dIGvGREdHW3dA3w1YawghBC7gPKoeWxTHvft21fzgqGhIZPFII8ffPCBLNbZ
2WlQICkp6T//8z+/+93vvow81tbWJiQkhISExMTEXLt2zVyz79y5g2JBQUFI
FMvLy1e8O/uF8khMYoPy6Ofnh7Bw5syZ6urqX//61//4j/84OTlpXAyG+JOf
/ERGmLt37y65CruuUYBiX//6141Dk4X09/cnJycHBwfv2bMHEcZkmampqczM
TJzh0NDQlJQUZW8aHx/HMaINCF+HDh2anp5eWTNsBMYKQgixCyiPmsecPCLh
QUKyadOmLVu2nDx5cm5uTiyHysHs3NzcnJ2dd+3aVVdXh4Xz8/MnTpzw9PRE
eR8fn7y8PJU9WiKPFy9eXLLlkMetW7eaW9vU1PQP//AP+AL/v//3/9TlEbkZ
EjCTq5CuiGNETjgwMBAVFXX79m3jYmVlZViFPaIe9Jfe3t4lG689KI/EJObk
cWJiIikpydXVFZEkPj5e/kZkMsKAgoICX19fRBj0+gMHDqjsUV0eEcq+973v
QanELAzrm9/8ZmJionFJlPm3f/s3k5WorFLyq1/96n/+539UCqgEn9nZ2d27
d1+7dg0TOByU7OjoMC52+vTpw4cP42QiCF+5cgWnGoeP5TMzM4h7Z8+eRa/E
Ltrb22UMt1MYKwghxC6gPGoek/I4OTmJ5C0lJaWvr6+xsRE+iAxQrIqOjkai
BZMaHh5uaGhAVoOFcL2AgICurq6xsTFkOJWVlSp7tEQef/CDH3znO9/56U9/
GhERgaTIZDHI49/+7d+i2I9//OONGzcqL1Ai3fqXf/kX+CymX0Ye4YMyyQTZ
2dnnzp0zKIPmhYWF1dfXq+ziVYDySExiTh6xMCQkBOGip6cnJiZm586dIiaY
jDCtra2bN2+GSCLC4AtTWFioskd1ebxz587Xvva1qqoqueQ//uM/PvjgA+OS
6Pt/8zd/8/3vfx/h6PXXX5caq75KguP6xje+kZmZqdJUleBTU1ODUyTjZFZW
VkZGhnExeHRZWZmYHhkZQRzGKcJ0cXFxQkKClm4tZ6wghBC7gPKoeUzKY15e
nre3t/gFW6dPYxwcHMTILl9fX+PMLTU11eRP9yZZUh6RRl69ehUZEcwRGZqL
i4vJYgcPHoTKQVTT0tJ+9KMf/eu//uvCwoJY5ezs/M4774jpl5HHubk5HJe8
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
loLxn+cwX3/ZM7IoCuYRGzVgwABCVX5OgtttT3v2RWKimHVHXyICCT/K4MjE
BwetnTx5cty4cXAjDpFLwGLYL9a5xwUcRO0bF0j0Ux1kBYnZP9WRXPPoGBc4
//zzzauF3LIf//jHxYoVu/LKK3/+85/bJgtrVrVq1RtvvJG9N998M7mZXndH
5gbmnUeD4DuPXgIi8mIfw8nMzJTlRJxGWHXv3p0HAAc6Y8YM+22pFB0vUPOo
iA4ibh4VRQ1FzTwqUgXZmscCx8EAUuXHrwsHioJ5VKQEsjWPBQ7zzqNBlEsb
Eah5VEQHah4VkYKaR0U0EX3zqChYqHlURATRN4+KXEDNoyI6UPOoiBTUPCqi
CTWPCjfUPCoiAjWPhRJqHhXRgZpHRaSg5lERTah5VLih5lEREah5LJRQ86iI
DtQ8KiIFNY+KaELNo8INNY+KiEDNY6GEmkdFdKDmUREpqHlURBNqHhVuqHlU
RARqHgsl1DwqogM1j4pIQc2jIppQ86hwQ82jIiJQ81gooeZRER2oeVRECmoe
FdGEmkeFG2oeFRGBmsdCCTWPiuhAzaMiUlDzqIgm1Dwq3FDzqIgI1DwWSqh5
VEQHah4VkYKaR0U0oeZR4YaaR0VEoOaxUELNoyI6UPOoiBTUPCqiCTWPCjfU
PCoiAjWPhRJqHhXRgZpHRaSg5lERTah5VLih5lEREah5LJRQ86iIDtQ8KiIF
NY+KaELNo8INNY+KiEDNY6GEmkdFdKDmUREpqHlURBNqHhVuqHlURARqHgsl
1DwqogM1j4pIQc2jIppQ86hwQ82jIiJQ81gooeZREQaVKlXasGFDXnJYunRp
gwYN3GmKsnm88sorR48e7U6zfPnyc84558iRI8Fdbdu2/Z//+Z/8KVrRhZpH
RU7xwQcffPjhh3nJYf/+/eXKleO/I01BmcfBgwf/8Ic/lOUePXr85Cc/Oftl
KCj8KYaCLkVYqHlUZAsUF1STx+ZpcAyOBAVuHqEsdwkVuYCax8KKRo0aQQuL
Fy+2N7Zr146NM2bMcB87b9685s2b21uiYB5/9KMfYZ3mzJljtuCY2JiXUuUR
Xbt2vfPOO+0tuS5klSpVVqxY4U6j5vEsQ81jUcDQoUNhxYEDB9obJ02axMYu
Xbq4j+UJIZkdkhExjwg2zN1DDz106aWXXnbZZXfffXft2rWzsrLyUjDvu+aR
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
ogk1jwo31DwqIgI1j4USah4V0YGaR0WkoOZREU2oeVS4oeZRERGoeSyUUPOo
iA7UPCoiBTWPimhCzaPCDTWPiohAzWOhhJpHRXSg5lERKah5VEQTah4Vbqh5
VEQEah4LJdQ8KqIDNY+KSEHNoyKaUPOocEPNoyIiUPNYKKHmUREdqHlURApq
HhXRhJpHhRtqHhURgZrHQgk1j4roQM2jIlJQ86iIJtQ8KtxQ86iICNQ8Fkqk
rnns06fPiBEjcn34nj17ypUrd/jw4SQWKUfIY/mDqFmz5sqVK5OYoY2klzYu
Cpl5XDpv6smTkXMNY/t3mja6b0GXIjWg5lERTah5VLih5lEREah5LJSIuHk8
fvz42LFjGzRoUKlSpdq1a3fr1m3z5s2yKzMzc9myZbnOOdXN47x585o3b25v
GT169K5du/JcrtNAM1M5R44cMVvyWNshEdI8zhg7oE+7ui2rle3apKI75d//
umNo95Ztav4xPe2NQV2bHjv6lWz/cv8+PFSHeu+wa1Sfdoe+zHEjmy0OHzyQ
bfEKBGoew6NwmMePP/64SZMmecnh7PQdJULey+9Dvl5O0ksbF4XMPG5et3zf
3r8VdCn82Lcnq1nlF48cPljQBckNUtc85rEbvMClXXK78fP7cvJ10EFQyMwj
MvKThbMKuhRxcJalXcTNY0ZGBs5x9erVRBCP38yZM5cuXZqUnAucYZJuHpOI
oHk8OwhpHqeP7U/wThqe4XZnn+3e3rrGa0TTzi3rs/6ydfWSucePHfVO6/mT
HzSvMrhbU6zlP/6+e3Tf9hmtqsNvSbuMGNYumz91VJ/k5pkUqHkMj9Qyj5s2
berQoUONGjWqVq3arFmz4cOHf/PNN2zfunXrxIkT85JzSpvH/O4Kq169+po1
a8xq3ms7DEKax5WLZkN06WlvYIIO7k/4JM8YO4AE9l+bWq/LrpP/OvHRhCEw
basar/ZtX++vOzYn7RosQMiO4hUU1DzmHxzjAnnsBi9waZdHO9azZ89Ro0aZ
1YMHDw4ePJjqSkbR8nfQIRFCmkf02OBuzdrXfbtV9Vc/aFb54+ljvv46viqD
kbo3r4q6a1fnrWE9WnKg2bV7+6aBnRtDXx3qvTPzw0GnTv07mVcSw4aViyYN
y0h6tnmHmkcDHrkKFSosXrw47l5bz8A/6IHu3btXq1atYcOGduTCn126dCGB
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
BjZ8xTsAWkbG3TMvmYHFlBu41M0jPGJrGN2kSZMUMqPVq1erxVzgMSoqqrq6
Ws/iCBCWFKaxIX1wXPaU0wpbhFU3bdqkeU05rfU5TRy+qKjI5ci4uOjChQut
hItjD38o8Nj9/k1Q663m47DbrPgx6s4jbZ+Ft1pcAv5atzTHqfADu7YE2pH1
HQ4bVs6/m2T89x+19lVuxF6SIl5Qy+fNiFLTPRqUz2+q+n6lzx/P5iVH+j4J
jyTAwLop/CwpyGTr7Dj1J2upQgiuKq3dK9DScQX+tXIo3q7vHQQt6pHLCo98
4TlTP/3009a2EFRD+swj2Lh8+XIcQH+3t2/fTuQgZqjmgLuq6TZ4dIp2JJZp
06bpUYwrPDzI42Mu0Y70SOtWlk5laI/6ZOdUN4/w6DG1+izRDiSMjIy01pyD
gO2oPdUV8PkfAQi6p07RTnVb1YvpSOxyZJyincqfquOxUm5u7lC8bRWIK8ic
Yp1y+UI7dnVo77bUqJcxEJd1XcKhe7R77/IFWDJzyuukKb0KlEfrJlkpdOWP
GKlmeYx2mAl2Z60GLKnQWEe7C37jsv2pvXDKY9Zo57EmgxjtrF7h3WGG+plH
n79Bqd4O5AfO8nzJVQch9bVXTc/WDDEcF3jU+U0hlfURFb06gcqphtu2bZsy
5e43mcSiu2G41M3qMGvXrrXC4+7duzVGUWZhYSFe2tvby+eIU+mA5w6P1sZL
cFJXsD3uqc9/vejEiRPsCzWhDqpdY1CxsbF6GfXkKYZMShke7LofmjdvXtD7
Fz4/POrLU+qAPBx4vHzhXdq+BjerGo/WeiFHNGPiy/q+YaA6L51PHv/itLBn
rW9tLVs+l3Rx/p1WdeF6We50/boe2rXqCqXkf7zo3oWRng9uMQo2+u7D47Wu
j0Mj5hAIjy51g2pxDPY9e+oo0iDhkMqkTXpV9Tbx+bPZtnVL9fJLZk21dv/I
T4vG5dQw6959kdfyXH8X/fQ+jleIylh4tD7ziF2Tf9TVZu9+4gKP1hfmgFTq
iUWbrH1lbWptbQUPqQNoZu3J4FQ3K+thSlZ4VF6noibrpqSk8Imogzlr1iwN
jAOGRy976vM/5M6xIiNxnNVeK6e1mlVWVpaCR6cj4+KiwKO1k4aq/8N85vHu
HbfoV2t23L06+t6ViyysOjworVs2B4hzWre2uhxHcpp7t29/ygSssmzFPD2x
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
A+u2GkqyXYkKDQk8irQEHh+tBB5NUyA8xsfH98v6BB5DUgKPj1wCj+4SeBRp
CTw+Wgk8agk8hqQEHh+tBB5NUyA8Pvvss9aumH1K4DEkJfD4yCXw6C6BR5GW
wOOjlcCjlsCjaCj0hMOjyDRZ4ZEklpycPGeO42sng0rgUTQUEngUuUvgUWSI
BB5DUgKPInMk8CgyShoeKyoq4uLi1GvP+yWBR9FQSOBR5C6BR5EhEngMSQk8
isyRwKPIKAV2W+2vBB5FQyGBR5G7BB5FhkjgMSQl8CgyRwKPIqMk8CgyUwKP
IncJPIoMkcBjSErgUWSOBB5FRkngUWSmBB5F7hJ4FBkigceQlMCjyBwJPIqM
ksCjyEwJPIrcJfAoMkQCjyEpgUeRORJ4FBklgUeRmRJ4FLlL4FFkiAQeQ1IC
jyJzJPAoMkoCjyIzJfAocpfAo8gQCTyGpAQeReZI4FFklAQeRWZK4FHkLoFH
kSESeAxJCTyKzJHAo8goCTyKzJTAo8hdAo8iQyTwGJISeBSZI4FHkVESeBSZ
KYFHkbsEHkWGSOAxJCXwKDJHAo8ioyTwKDJTAo8idwk8igyRwGNISuBRZI4E
HkVGSeBRZKYEHkXuEngUGSKBx5CUwKPIHAk8ioySwKPITAk8itwl8CgyRAKP
ISmBR5E5EngUGSWBR5GZEngUuUvgUWSIBB5DUgKPInMk8CgySgKPIjMl8Chy
l8CjyBAJPIakBB5F5kjgUWSUBB5FZkrgUeQugUeRIRJ4DEkJPIrMkcCjyCgJ
PIrMlMCjyF0CjyJDJPAYkhJ4FJmjUIXH3NzcP/mTP/n85z//G7/xG4mJiR99
9JGa3tTU9P/+3//7whe+8Cu/8ivjx4/HY9X0tLQ0lmT5733ve52dnY+u4k+6
BB5FZkrgUeQugUeRIRJ4DEkJPIrMUajCY2xs7LZt28h7u3fv/vKXv7xo0SI1
/c///M9feeWVmzdvtrS0/M7v/M68efOYuGrVKljy+PHj165de/755+HHR1r3
J1oCj6I+hWUNHz781KlTD3OjfcLj4cOHv/Wtb332s5/9tV/7tenTp+sLVkGF
1fz2b//2pz71qaNHj6opp0+f/slPfsLEz33uc1hTXFxc4Hf4yJEjTz311M//
/M8/4L6IhkICj6KgWrp0aVpa2sPcYp/wyAIxMTG//Mu/jNv8wz/8Q2NjY9DF
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
oBoAPP7bv/2b+15Q2q/8yq9MnjxZT6EOJ06cIBMykdTHHqnCyWnaTp3gcffu
3cqjcKSUlBQGNm7caFvGxYhs6u3tvX79OscKyMU/bXMrKyuDdsp97CTwKAoq
J3jEB0pLSydOnAhDJSUl6chESF6xYoWaHhMTQ5tV0713jPe5wiPb/emf/ml9
9Rs9/fTTs2bNClzyb//2b1944QU9iiV+/etfV8Pe+8z3KUKRDR7JZtaEtmXL
Fkabm5t9fjB85plnmpqabvmlrtexR0wk82B6JKi/+7u/44D7/I0LN8bu+Aio
ufuz7XCxS8ctQ+BR/wTJkErgUfRI1F949PnTBc129erV5BzsUceq1tZWEhrp
JSwsLDB1WDUo3VYxQ0z10/fFMvy3dhjDsn71V391/PjxesqNGzfUYkqsrkYD
H1fs8mv79u1r165Vw7azyYPfebSKQ22LZLhoZmamFU6fKAk8ioLKCR5JaNYp
wKN6CQPii7Rz587c3FwoUj+77WRigRqsbqs2/fM///P3v//9oLO++93v/sd/
/AcD7NRP/dRPWS0Oywq87I8XKY9KTEzk+89AYG2933nU4tRASAa09RQOBch5
+PDhPvfOfAk8ioLKCR7Xr19Plqivr+ebU1JSAhWqdE3mIQkQfmh3fDcOHjzo
62fHeF9fdx6xlH//93+/cuUKtVq1atVnP/vZoNz0l3/5l/p1pj7/Y4b6Bp+X
PvNr1qy5du2aGmaBhoaGoJUJhMesrKwvfOELun87SIhrKdr96le/au0uq3Md
R0m9AeyXfumXAF617wDL1772taeeeurXfu3XcB73d+x7hEesOzs7e/fu3fn5
+RB3WVmZBjo+FyYS2woKCjiDaHik/rgla6Wmpq5YsUIdwG3btrHj6enps2fP
Vp3Bgi7m87/cjIULCwspkECoKsCXCudkW0RKzJkS2EFOSToG626rFMvXieVB
QkqgHN0HmEzIKuwaB7yiokLtiPeK9UsCj6I+5dJtlW+vHtXdVq3ii4GFBna5
JN25d7YclBfmwKcn7gvEw5r4r4vF/b7yla9MnDjRugree8KiSZMmYV8MOPl2
n8886qttnZ2dXp55LC0tDfqoEd41f/586yj+8CS/p1rgURRULt1W9ZUWa7dV
q0gO06ZNs010MjGtwXphjlXqzmNYWFjQuQTFf/qnf/L5v89Wv8KssCx1ST+o
vD/z6GREVuGKeJruDIyoA/nH/Ubt4yKBR1FQBYVHTAAYhEH0lMTERPXsIfE+
sL33q2O8ry94BBv/8R//kYTzmc98Brdxeo0MrZW5NTU1hCXQ75lnnmEVFe3c
+8yrHfzWt74FfmKeZCeYLjDvKQXCY1RU1O/8zu9Yp0CpGIW3XR+gvMMjh0Xl
ND6OefPmqWtft27dgq2YzgeNFWRmZmp4XL16NYVjpByTqqoqVlFfBtsNPqfF
gEeSocZwKsBJB8TDNtkQzMgCra2tvb29O3bs0LekbfBI4YoNN2zYoF+ZyB6R
M/lwiUY5OTm667LHivVLAo+iPqXgEVd82yI+cTxn5MiRfL0BIhhKvzCHbykL
t7e3d3V1MX3EiBEMd3R0bNy4ETtiYlNT04QJE9zfsTzgn+ogOv7Lv/xL4Cq2
bqus+Au/8Avf/e53j1oUuFafzzx2d3c7hTGfHy1BbGqLERUXF+vbl1iEftO+
esnhzp07aUrQrnqnh89/Z5MDdf36dTbBAD6mOqr5/HdaIUeK1a83dKlhqErg
URRUOADpxWpW6hwHGRFXzp49yxRapX5hDgEP2sLlMByWUc9xBzUxpy32+VMd
sbGxZDZO8YE/1fH3f//3+jLaa6+9RmX279+PVZLfPve5z508eVLNwmkxEAy2
srKSjIqVWe8SavX5zKO6NxF0lpMRIdKm7iiCbytDoylRB46ktefVkiVLXC6m
PV4SeBQFVVB4JLEw0eoStGVO0z7/Rexx48ZNnTq1pKSEeK+ucverY7yvL3j8
yU9+8o1vfINgQIxRbhM0z9DGqeTP/MzPfPrTn/7yl78cFhaGk6hXhFkV2Gde
Cd4BHr/5zW9Cjrar7lZ5hEd9PW1wBXapLvoQGSbGQG5ubuBiVnhkWN96qKio
AMd8/sQ4e/ZsvXx1dbWCR/Ie7Kbv1rEimyDf+j7JaC6LwYbWiwxUgHrqrxPf
B92xGRKE0FXAs8Gj/qZx8rLWU4tvqXqLmveK9UsCj6I+peDRpjNnzvgsP9WB
z+juXkAlGSwiIoKQk5iYqL7wtAKanur2z8KkI/cuB+7w6PM/7vfXf/3XTz31
1DPPPMNWdGkYV9AXhdngMSMj41MBCqSwPp95tCrQ26nV9u3b1WseOZXoxHji
xAn19jAlfIDISs3ZnG7jxDyaPHFX9V7Yt2+f2kcqafs9tcB7JU+CBB5FQQXR
2MxKPcLs9FMdhYWF+smjxYsXq06YQU3MSX3CIwvExMR85Stf+exnP/sP//AP
GgkRKU4/WkhVCV0sQ3KDMa33Ogmfv/u7vwtO/uIv/uK3v/3t0tLSoBvq85lH
rcBnHn0ORoQ4XPoJBRg2MzOTY8L/NWvWWF+aTXu03Yh8rCXwKAoqF3i0hnDO
+PrlCZgDa2E1+I++l+S9Y7zPFR7xE9ILBKqn/NVf/dXLL7/sVBTbJVzxn+p9
5jOfCbpdpz7ze/fuZVsYVNBfqlXqV7fVQRf7pbroUz7HnAF9j88qW7dVPb2q
qgpb8/k9U79NyOfvqKbgEWjC5eZYlJ6efvr0ad8nGc1lMU5DVm+3VWDlypX6
LWQK9NQHZINHTX98MfQZhPL5jlEanyznL/WuSO8V65cEHkVmqk94fOTqCtBD
fv3aEy6BR5Eh6hMeH7n0M49aJtfWEAk8ioLKpduq7h3k8zNU4LM5p06dYl3r
Y8I+Dx3jfa7wqH7DWj1KqfStb33rpZdect8LKvz7v//73/nOdwJnOfWZV71V
x40bB5yyCSd+7NcLc4ZO/XrmUU/X8Hj06FHrg0L79u1T8MheA19B972goEAz
mstiMJ31vvBgwWN3d3diYiJHVUF6XV2dhkePFeuXBB5FZsp8eBQ9Wgk8igyR
+fAoGoAEHkVBpeCRE5DuGK+yyvr16ydMmNDQ0EB6sb4wp6KiAjBkmBOWeu0q
8b5fHeN9rvB469at3/qt3/qLv/iLmpoa2AF2A83WrVun5kZERERHR6vhM2fO
pKamst2NGzf+0z/90xe/+EXdC8Klz7xSb2/vV7/6VdVbVfVfBZZtNaF8sIjp
zzzzjHoUSHfH1T/VsWvXLttPdQyRqKQLmPQJj7AYx0p1sWM4JydHP/PIhwvi
qdfUMItyVNf94uJi/TiSy2JDBI9sKCEhQW9u3rx5Gh49VqxfEngUmSmBR5G7
BB5FhkjgMSQl8CgKKgWPVo0cOdLn/FMdlZWV06ZNCwsLCw8PnzlzpvrVnn51
jPf19cwjzPi///u/X/nKVz7/+c//0R/9kfXl8ECifoUpJ00Yk2W+8IUvfOc7
37G+LtWlz7yW9dXxoEdgd9C///u/tz0K1NraqmZdvHjx2WefZbtPP/30Sy+9
NLA3fHqRfuZRq89nHoPCo8/PRwsWLCgoKAD59TOPPj++bd++fdasWRTCBwqn
K/gisrIttqh+h9dpsSGCR9/9V2SrCrMjGh49VqxfEngUmSmBR5G7BB5Fhkjg
MSQl8CgyR+7wKNLSzzxqBX3mUfSAEngUmSmBR5G7BB5FhkjgMSQl8CgyRwKP
IqMk8CgyUwKPIncJPIoMkcBjSErgUWSOBB5FRkngUWSmBB5F7hJ4FBkigceQ
lMCjyBwJPIqMksCjyEwJPIrcJfAoMkQCjyEpgUeRORJ4FBklgUeRmRJ4FLlL
4FFkiAQeQ1ICjyJzJPAoMkoCjyIzJfAocpfAo8gQCTyGpAQeReZI4FFklAQe
RWZK4FHkLoFHkSESeAxJCTyKzJHAo8goCTyKzJTAo8hdAo8iQyTwGJISeBSZ
I4FHkVESeBSZKYFHkbsEHkWGSOAxJCXwKDJHAo8ioyTwKDJTAo8idwk8igyR
wGNISuBRZI4EHkVGSeBRZKYEHkXuEngUGSKBx5CUwKPIHAk8ioySwKPITAk8
itwl8CgyRAKPISmBR5E5EngUGSWBR5GZEngUuUvgUWSIBB5DUgKPInMk8Cgy
SgKPIjMl8Chyl8CjyBAJPIakBB5F5kjgUWSUBB5FZkrgUeQugUeRIRJ4DEkJ
PIrMkcCjyCgJPIrMlMCjyF0CjyJDJPAYkhJ4FJkjgUeRURJ4NFD79u2bPHly
n4uNHz/+4MGDD6E+j0RGweP0cc+/eeLwo66F6BMSeDREmBWW5b7Mzp0733jj
jYdTn4cvo+Bx77b1+WnRj7oWoSCBR5E5EngUGSWBx0ERjXq4XxcvXtQTu7u7
x4wZw8QzZ870qzSBR583eOz54FblhpXzkiOTxr+YOeX1dUtzrnV1qlnv37ge
P+b7tr99lRvV3IN7ti2ZNTVlwktM7LrS9/ffCR5nx49RJSeM/UHG5J+UFs6+
ca2rnzsqGqAEHgespUuX4kuLFi2yTly/fj0TZ86c2d/SBB49wuNbzceK8tMw
CvxqfsrEhrrdeta7584smRWfFv0qVoOr7NxcfOfOh2rWO2fftPlYe1uLy1ac
4PHYwd26hKSIF+alTGBK//f1CZLAo8gcCTyKjJLA46BIweOkSZMIYHri7t27
Y2JiBB5JVgNYyws8dl6+sCA9BhI813Kqsb52dsJYQPKjjz5i1p07d86/06r/
CFTw3XtX7qH9/qpNTKnZseHB4XFT0YLLF969dP6d5uOHsqeOWjE3uf/7KhqI
BB4HLOARsxozZkx3d7eaQnuJjo7GrwQee3t7+7uKR3jcXLKwfHVB07G6trea
KkoLMR9cS80CHmury8++eeKd1tMHd1ckj3+xcuMqNUvB49tn39Rudvt2j8tW
3OHxYsfb+FV721tb1y7BEtlcf3f2yZHAo8gcCTyKjJLA46BIwWNZWRkBjBim
JiYnJ2/YsMEKj2fPnk1LSxs9enRkZOTKlSt7ej7OAIQr1h07duz8+fN37Nhh
hUdGY2NjWSs+Pn7Pnj16uhM8zp49u6SkZPXq1REREWyosrKSOFRUVDRu3Dg2
sXfvXr0kgJabmxseHk5RbFdb09atW6k8gZAwGRYWVlhYSAmwMIGTMletWqX3
8dq1a/n5+ZRAzefMmaO/S6qEiooKVhk5ciRFsQlrKisoKJg7d67LIR1At9WW
Uw2koysXOwJnrZiXsmxOom1iW0vTAOBxd0Vp+qQfd7x9Nx4Aj1X3Mx7atWVN
esxr/aqzaMASeBywgEcgMTU1lUatphw/fhzPWbx4sYZHgKi0tHTixIk4T1JS
0qlTp/TqnZ2d2dnZTJ8yZUpdXZ0VHp0sxQkeSUQ4ZFNT0/Tp04HZ9PR0Vjl9
+jSjOA9Wdv36db2wkxMypaamhu1SQlxcXHNzc1dXF+tiSgkJCa2trXrJ/fv3
U41Ro0ZRc4xRT2dhDBmjwzCpAwO4mZ770Ucf4WNs3el4DqzbakHmlLVLZgWd
tX557qKZcWpYwWPPB7c8FmuFR8wtJyFs46o8dkHBo76hyZTE8GEH92zrV52f
KAk8GqIQuzw1MJkDj9IxXuQTeBwkKXgk85AxTp48yRROOoSf9vZ2DY+kIPCN
eMbExsZGuIwIp1YnuUFY1dXVfBZEFBbT8Lh582ZyzrFjx8jJ9fX1VmB0gUcQ
b/369dShqqqKCjCFctguNMeGVOSmPiTD4uJipnd0dEBzBC11lxD0I/4Rxsjn
J06coDRKyMvLa2tra2hoYL9qa+9dMIeFCZbYGl+krKws3FtxJSWQ0NjBW7du
8d3gS0Ihhw4dUmupDr0U5XJIBwCPzccPkY66379hm371vSsJY39wsn6/bXp/
4ZG4tWXN4plxIzWfWuGRrSzMmFyUn96vOosGLIHHAUvBI/w1Y8YMNQXQ27hx
45IlSzQ8YiA4DJ7DESspKQHQ9JkiJSUF8KTJ8xEwTFtW0c7FUtzhkUKwREqD
GbEUCgcngT4gUZukixNSN4yXOvDJsgvUAS86cOAAowsWLAAnVW8ENjFixIht
27bhLew7a2kfw9/wKyb29vbiV9QKn7x69aqai6Wz8I0bdmPRGhg85qVG4ye2
ifhnxztnMZmqT955zJzy+oyJP1qYMaXpWJ17sTraXWhvY60dZSvUdCs8UuH6
2p24oroIJgoqgccBi9ZHuybkqKanRANkIi2rv6UJPPo8w2N5SQHGkhj+XPYb
o4Iu8MGt7llTR2MF599ptc3CDVgRn3HfhBM8Xuu6ojvGTwsblj11VOXGj280
iEJMAo+DIgWPQGJZWVl+fj5TiFuFhYVXrlzR8FheXk7C0X04jx49SpJR19UJ
bNbnjwhyCh5JMpAa+KZnUYhOdy7wmJ7+McKQnbKzs/VoVFSU8uEtW7aQ2fR0
tjV27Fj41+dHP7YL96lZy5cvB/30fdKFCxeS0Bhgv9g7zrBq+rVr14hYR44c
USVQmvVbsWrVKiqmhnft2kXAc3eV/sJjzwe35iaNX7dsTuCs6vLV6ZN+/OGH
9t5o/YLHUw11a5fMyp0+DofU04HHaWHPMjcxfBhF5adNev/GdZdyRIMogccB
S8EjDZxmDuXhQrRczErDIzYFEur7kigxMZEmzAAWgXHph7tppJhAn5bS551H
NVpXV8doS8u9Z/qgOS9OSOUxXjXc1dVFCdREjWIjjLJrPr/NwpK6BCwatlXD
WFNmZqa1YszCxNQwa+Xl5bkczwHAI+w2PeL5S+c/YXFZscMBOpxkc8lCnbo7
L53fX7XpXMup1tONG1flMffU0QMuJato1/ZWU2rUK/opb999eMSs+GMrpMTD
NY73UkU+gccHEPAIJEZHR1t7LNCOwEmBxwF0jPd5hkeso2731vXLc53gkRiz
Yl5KIDySoHKmha2Ym/yA8IizXb7w7oV3z2EvWE3NjrI+6yx6HCXwOCjS8Eia
JXRdvXoVsmPUCo8wlzWB3LhxQ92sZBiSgqf0LN1tlTPX8ADpm5Iu8FhcXKxH
MzIySktL9WhSUlJFRYXPj6iBhSuLJjWRFfUqGzdutGbC1atX5+Tk+PzRLjIy
0rppEtemTZtUCTqYKREyyZzK/ZKTk61VCqp+wePt2z1Lc6Ytyorr6bF/D8lg
M+NGblu3LHCtfsFjVuyInISw929+gg0tzzy++1bz8UUz4wqyYuVS28ORwOOA
peCRgcWLF69du3b79u1qVMOjYq729na9CuSYlZXl8z/KPWHCBGtp4eHhyjdc
LMUdHjV2NTc3M8o5RY0eO3YMO/X15YTAY319vRqmvTNLYyaAzKjquRoVFVVd
Xa03feTIkVGjRqnWimcqNNaqrKxUFb558yblq/4kTuovPDYfP5Q0/kX9wKPW
5Qvt7W1vHdq7LTXqZSv3WbUqL7Ugc4pL4UQ7sDEp4oUDu7ZYp1ufeex452xt
dTn0Sk081vkJlMDjgKXgcd26dcQeNYV2RFsuKyuzwqNTN3KXjvG06JUrVxKZ
wsLC0tLS9DNBLvDovVs7zVx1pQByyTnaiLw/CuT0aNIDdoz39bPb6u6ta4PC
49Ha6vy0Se+eOxMIj+uX5W5ds7h25+Z+waO1Y7yCx7eaj+klC2cnrF7U74fo
RY+FBB4HRRoeGc70S/mYDR7VTUklGzxibnoWNqhykbqqz2cUdKMu8LhmzRo9
SmX0ZXmfH9zUFfV58+Y5PXWonljUo8AjfqhHKVzdQwQebTESK968eXNgCXrT
5eXlqiuv9bW0QeUdHns+uLVk1tTFM98I+ljQ6ZNHnB6E7Bc8blgxj6x1/NBe
63TbM48EM5t5ioZOAo8DloZHrBvziY+PJ6H5AuCxo+PjVgNbqVnq2WdraRiR
inYuluIOj/r0QX0Y1ZdfgEdimK8vJ2QZltSjLKnvd1AyoyrMu8Oj1TN995kR
66bm7K+1912g+gWPjUdrg5KjVUS45MgfBt3o7orStEmvuqxLtMudPm5x9tSF
GZM/uNWtp9ueeUQlBZmLsuK81PnJlMDjgKXgkbM8IKbaBe2IKIJRaHh06Ubu
1DHe5+8/AFdyhAmurAsAqrOAOzx66dZOE6Y0/I1qt7S0JCUlrVhxr8u390eB
nB5NesCO8b7BgMcrlzoyYl4jC4GNNngk2MxNjuy9fbtf8GjrGG+FRw4piJoa
9XJtdbnHOoseLwk8Doqs8IgBMqwALbDbqs5Ftm6rJSUlurTly5creOTY4mbq
Xl6gHhAesT5KCBp4PMKj6raK86vptm6rgfCIc8bGxrKnGRkZQffIKo/weKv7
5sKMKcBj4D1HpaL8dOYGndXfZx5PHT1g40c7PLa3UaBczH84EngcsDQ8+vzd
2slF6hq7rduq9aU006dPLyoq8vm7rRJ7YCs1XXUTVdHOxVIeEB7dndAjPLJr
+j6IL6Dbqg0eff7LfYWFhew4Bhh0u1re4fHYwT1JES+caujrucXt6xPDnwsK
j6vyUuclRwZO/3hdf7TDDxfPfANv1PwYBB4XZualyosvHCXwOGApeGQgPT1d
XbFJTEwkGlnh0akbuUvHeJgOBNPviEaApLpe7Q6PXrq1U9TatWv1WmyLFfXF
JS+PArk8mvSAHeN9DwyPH37Yiy2onuo2eHzvysX0mNcuvHvO579s5REeAzvG
K3hMDB9GXpoW9izDZcvnul92Ez2+EngcFFnhEbe5ceOGMhArPDJx3LhxpJGO
jg6yjfWqFMknPDxcdZ9gYYZ1jyzsiBRXWVmpYGr37t26b8MDwqN6uwUch1cT
wpuamqiPuvblER59/hfmpKSknD17li8S5wLrC3MC4VE9Y2W9wOgiL/BILsqb
EZWTEPb2W836PfbW+483rnVNCxtGYLOtyHSWPFpbjb+dPnmEYf2aHUjzxOEa
2/L6bauNR2vhR72A7rbKn+q2mjbpVVvXVtEQSeBxwLLCI61ShzHbC3MmTJjQ
0NBAS7S9MIemzZJYXG9vb35+vnqdss/VUh4QHn2uTugRHplIVVmLXLp3717b
C3MC4bG5uZlliH8qW7rIIzw2HNiVMPYHu7as0WbVeeneA+M1O8rIdefONLa1
NO2r3JA8/kVyl5q1p6L07q8RnWk8++YJ9cxj/f4qXWDgS6T1fQGcEH4syLzH
j9Zuq2y6trocb6Qy7nV+kiXwOGBpeMQZsAu8mlTT09NjhUenngAuHeOxkcDu
6+oNDO7w6KVbO4EqsHDV9j0+CuTyaNIDdoz3PTA8bl+/rCj/XoqzwiMHZGHG
lP1V967LeYTHoB3jrc88XmxvO1m/Pyt2uL4vKQoxCTwOiqzwaJUVHn2W/vDY
1IoVK6w/1YGT4KXR0dHZ2dmbNm2y/lQHXpqQkKDWItpp33tAeEQEvAULFlCO
ehYAc1M3ILzDo/tPdQTWDXZWJ5Hgx9EiL/DY3tZi+/lsW6/RPdvWpUa93Hv/
yQWt6vIS21qApJo1LexZwptteetPdTTW+/nxyN1zGfCoS0if9OMV81IC32Am
GiIJPA5YVni0ygqPLj/Vga2xWERERGxsLMZlfSLJyVIeHB59zk7oER59lmes
qLPtpzoC4ZFYNWXKFOstBid5hMeV81NstqN7jR7ZX5WXGp0c+UP+5iZH1uzY
oF/wBTnOTRqfNP5F/9tWJzce/fjKGxERzLRtxfpEEvx490FsPz8qeFR/GFrO
tDCwVB7QdpHA44Cl4ZEGGBYWRghZvny5z8+SXuDRqWM8bRbbCbpFd3j04g+U
bPUEqzxmKpdHkx6wY7zvgeERT0gY+wPijfrzvxD12XXL5mARalj9qRd2MaCv
UAXKqWN84DOPdbu3TgsbFhjARCEggUfRwxRJTD9H4K4B/FSH6ImSwKNoSNXT
02P9gSEXDeynOkSGS+BxwNLw6PNfqtKAZuu2GrQbuUvHeGZpHLPpweFxpl9B
S/AIjy6PJj1gx3jfA8Nj5+ULF9vb1F/j0Vooj//gHtCqp/O3o2xFyoSXGOh+
/6ZT4U4d44PA466tTLECpihkJPAoejjiXHDw4EG81PoWDhcJPIrcJfAoGiIR
qIishD3rE0wuEngMSQk8DlhWeCQi6lfBWOHRpRu5U8d4nx/xYmJi6uvrMf+z
Z8+CXY2Njb7BgEeaMBtasWIFqZj4wSZ0R1OP8OjyaNIDdoz3eYbHzkvnz7/T
Wl5SkDnlddU3PvBHygJfmKNl67Z6ob1tUVbc5Qvt1mWcOsZ/ottqx9uq22rh
7ASfKBQl8Ch6OJo8eXJ4ePi2bds8Li/wKHKXwKNoiKQeN4Ac9Q9QukvgMSQl
8DhgWeHRKis8+py7kbt0jO/p6Vm9ejVtk7Wio6NBS/XKvgeHR5+f5jIyMsaO
HUtWSUpK0k9Ve38UyOnRpAfsGO/zDI9LZk219Y0PfCWgd3hULxVsb2uxLuPU
MV7Bo/qbFvZsVuyIjavybt645mXvRI+dBB5FZkrgUeQugUeRIRJ4DEkJPIqG
VN47xvv62W1VJBpqCTyKzJTAo8hdAo8iQyTwGJISeBQNkfrbMd4n8CgyTAKP
IjMl8Chyl8CjyBAJPIakBB5FQ6T+doz3CTyKDJPAo8hMCTyK3CXwKDJEAo8h
KYFHkTkSeBQZJYFHkZkSeBS5S+BRZIgEHkNSAo8icyTwKDJKAo8iMyXwKHKX
wKPIEAk8hqQEHkXmSOBRZJQEHkVmSuBR5C6BR5EhEngMSQk8isyRwKPIKAk8
isyUwKPIXQKPIkMk8BiSEngUmSOBR5FREngUmSmBR5G7BB5FhkjgMSQl8Cgy
RwKPIqMk8CgyUwKPIncJPIoMkcBjSErgUWSOBB5FRkngUWSmBB5F7hJ4FBki
gceQlMCjyBwJPIqMksCjyEwJPIrcJfAoMkQCjyEpgUeRORJ4FBklgUeRmRJ4
FLlL4FFkiAQeQ1ICjyJzJPAoMkoCjyIzJfAocpfAo8gQCTyGpAQeReZI4FFk
lAQeRWZK4FHkLoFHkSESeAxJCTyKzJHAo8goCTyKzJTAo8hdAo8iQyTwGJIS
eBSZI4FHkVESeBSZKYFHkbsEHkWGSOAxJCXwKDJHAo8ioyTwKDJTAo8idwk8
igyRwGNISuBRZI4EHkVGSeBRZKYEHkXuEngUGSKBx5CUwKPIHAk8ioxS6MHj
+PHjDx486L5Me3v78OHDr1279nCq9JBl/t5duXKFGvLfZZknEB7rdm2dkxj+
qGvx2EjgUWSIBB5DUgKPInMk8CgySobAI4UMd9DSpUv7VVRRUdHZs2fdl+nq
6lqyZEl3d/cDVNlcPTnw2PPBrcoNK+clRyaNfzFzyuvrluZc6+rsc5axEnjs
lwQeRYZI4DEkJfAoMkcCjyKjZAg8fvTRR2/fV1lZ2ciRI/Worb2w5J07dx5k
WyGvJwceOy9fWJAec3DPtnMtpxrra2cnjIUW+Ya4zzJWAo/9UgjA486dO994
440+F8vLy1uxYsVDqM8jkfl7t8QvlwWeTHhMi371xOGaR12LIZTAo8gcCTyK
jJIh8GjV7t27gUfrFFoNrHHkyJGEhIQxY8acOnWqo6Njzpw5EyZMCAsLS0lJ
YYpe2NptdfTo0dXV1Tk5OeHh4VOmTNHTrXilCj927FhiYiKLJScnW5llx44d
UVFRY8eOnT9/PsOTJ08OWmdIJzc3l9XZOkuqNg6qzJ49OzMzUzFLT08PQVHF
JA7a4sWLY2Ji2B0mVlVV6aJYpaSkZPXq1REREZGRkZWVlb29vUVFRePGjYuO
jt67d69ekr3bvn17RkYGx4GK1dbWBu6dU90QB42dpQJsKDU1NTCH85lSjvU8
SAX27dunhqkYh5Q6sPV58+ZZj1hsbCzT4+Pj9+zZo6c3Nzfz8TGdz+vo0aND
0W215VRD/JjvX7nY4X3WmcajMOb0iOdnxo2sKC28fbuHie/fvJ455fWdm4vV
Mhc73mYBFZMunX9n5fyU9Ek/Th7/Iiu+1XxMFzV93PP1+6tWzp+RFPFCTkLY
2TdPXOvqXD43KWn8i3OTI989d0Yt9s7ZN6nJ8UN7c6dHpEa9nJ8W3d7WombZ
4DFo3VBtdfms+DGJ4c+lx7xWlJ/er0MUSnqE8FhaWurUU6Jf5/empqZ169b1
uRgmtn///geor9F6cuARuyjKT8uY/BM8YX7KxIa63V5mGSuBx6AyCh49Xkn2
eBXrMZX5e0escsqWWk8gPJYszNxUlP+oayEKrscIHhXgAGJQWGtrK2CCMV68
eHHr1q0QkCYRGzxOmjTp7NmzrMVERlXrC4THrKysrq6uO3furFq1CupRuAfj
sAobYrvkNyAraAO/fv36xIkTi4uLKRaqLSgogJKIE8xiE7DVli1bGF6+fDkO
RuUZvnXr1qZNm0i/VBsopuRDhw6p0oBHRtevX89pC6ikbkzZvHkzhVdUVHBk
dGBW4EYhDJ84cYJR1V/XundOdeNTg4ipGAcETDtw4EAgyrnA4+nTpznmEDcH
jXpizmoB6glRMp1K1tfX68+CaoD5REQ+L+ZyGIcCHpuPH4LLut+/4XFW6+mT
RLVDe7d3Xjr/9lvNeanR2qnIctPChrW1NPX23p6XHFlamKOmw4CHa3ZcbG9j
lb3b1sOJXZ33mg/wmBU7or5254X2tvXLcjNiXiucnXDs4B5GVy+aCU6qL5WC
x4UZk2/euMb3DUQFRXs+uOX7JDw61e3cmUY2yu5cv/oeJbNKvw5RKOkRwuPV
q1d11wi+5JiGHlUNX6u3t/cBtxXyenLgcXPJwvLVBU3H6treaqooLcQHGutr
+5xlrAQeg2pQ4PHkyZNOl6c4WXsvx+MTOh6vYj2menLg8cqljg0r58+aOnp6
xPOz4sdUbSoiwPQ5y1gJPJqsxwge2YrTKunp6ZWVlWrYBo8Al14M9lHGGwiP
+jFJ6IZRLJfhzMxM6xOXkFfQBg6CpaSk6FHiIlwGXqlRWGnUqFEbNmygMgr0
AlVWVjZ37lw1DCqyO3pWXFxcdna2Ho2KitL3/igQxtSzFvhl2zununV2drKM
+5nRBR5ra2sZ5qO3Lk/hECIYq6eUl5fPnDnT54dKDp3ub6ygeHDhEf6amzR+
3bI53mctm5O4ff0yPUpsSwx/7s6de+F/27ql2W+M2rBiHn77wa3gJ99FM+Nq
d25Ww8AjhqyGITvi356KUjV65WIHo11X7jY0BY8tpxrULI5JVuzwQ3u3+T4J
j051aziwi+X1XcgnWYZ0W504cSLfc+sUmvDKlSsLCwsjIyNVW6YZxsfHjxkz
ZtKkSZCmdktrqtm6dWtycjJTaCnjxo2bP3/+zZs31SwrXlF4UVER5U/wq7S0
VHfG5mjQ3LAF1cuCcrRX2BS0e8CZM2cwXt2LY+/evTRn/NDnv4yWmpqqei/M
mTNHnzKUeZI8p0+fzt6xs8Qb7IVR1qWq169ft+4dB4q6UQ52p2fZ4DFo3bAa
luFQMz0mJsZ2wJXWrFnDFvUo9dd2TYVzcnI4qrhfQkICnqymO/XKwMqWL1+u
pnOEFy9ePBTdVgsyp6xdMsv7LFxoc/GCjJjXkse/WJAV29bSpKbv2bYufdKP
b1zrUqOlhbPnpUxQyRALyp0ekRTxwsy4EfCpukh19+BsW5+fFl1fu3Nm3EhK
W78898MPe3EhFpsx8eXykgLt1ctzk8hvpYU5mVNeT416GVfUs6zw6FS3zssX
VsxNnjHxR3c7YCSNf/PE4X4dokerRwiPt27d0tej+FbPmDFDj9q+ZrarVaJA
PTnwePRAdfGC9OOH9r79VnPd7q00Otpyn7OMlcCjyXqM4PHGjY9vG3V3d5PB
SGIsqS7HrV69Ws2ywWNDQ4NeKzExkWTiCwaP+tIczsxoW1ubzx8LrR0v4dOg
DZzUEXh50Brbli1bxhR1/1Fr+/btU6dOJXGp5YlbajpniuLiYr1YRkYG6UWP
JiUlaRxm7/T9Sp8/nk2bNs22dy51I7OxdVIc1qpg2SYXeCTW4sZkVzJVXV2d
up3KeTZwW+qILVy4UIGtEod3cOERmFqaM21RVlxPj/176DIrNeoVOM72pxDP
d/ek3EvuShj7A8xWr3Kr+30yGBFrWtgwtXxFaaGaBTyeaqhTw+R5Zp1urL93
JG91M6p6rip4vHH9qi6TeLZl9SLfJ+HRqW7d79/ImRaWHvPa+mW5nAhuB+zU
kyOT4XHUqFFYBwyijJE2i0nyhVdgpVnJBo+0aGyN1oQLERf1YjZ4ZLHa2loy
fEdHh+60wFeOkjMzM2k1uDq+QesOCo9O3QPQhg0baOO0bpgR+qupuYcGLAA/
MpHCacvwlyIIZZ4pKSmNjY18HFQgLS0NzAQnW1tboT998Y29w6txQnVM2Ato
LnDvnOq2adMmSqNMnIqNBn2ftgs8cljYCpbCR3Dy5El1HdKlx8jatWuZxZKs
AjlCkUMBj3mp0VvWLPY+q3B2wtKcxLfPvgmR7avcQPx778pdtOejXzJrKjbC
AJ4wPeL5ix1vq1VqdpS1nj6Jb5w70zh/xsRNRfdMGHhMmfDSqrzU9rYWbApg
XD43iajWgdkdPwQA6n6zFDst7NmjtdUUznaz3xhFmWqWFR6d6rZkVnxJQebl
C+1dnZfONB5tPd3Yr0P0aGVIt1VOneoarJa6FIOrqAhEY3S6vOPxCR2PV7EI
e7RotZV169a5XFSh7WALWFBMTAzZTF1nphzsBZPRdWMB1ZZdHkTC7jCi3Nxc
Fo6Li2tubsYEaOnqQhCeoBZTe0dpGAWuyC7oa/U2eAxaN5/zkzhaHDrm6lF1
o0HFmP5enlK14mj0+UiU1gC6rVZuWJk55fV+zdpftWl2/BjCTO70cYdrdqiJ
Lpenmo7VFWROwUxwg5XzU2j+ahmVc86+eQLbwZEWzYy71nXlXMspRrEXXOXm
/QjkcnnKCo9Ol6d6b99mGaZT55lxI3dvXduvQyQasB4jeLRuorCwkOZP5dXE
WbNmEbrULBs86lbs88Pjtm13b/EEOqouXMGjsh2P8IjP6PuGgSIssV32yHoT
k+xHPTGxW7fuXgqGKzEcNQtXJAXpJYk9ZWVlehRLxNv13ll7sJCvAuHRvW4Y
L2txJHHslpYW21xCrA0eOSA6jrJfJ06cwHs5Jlgux40zEcvzoQRuiMC5aNEi
PapqOFjw2PPBLbLT4plv6OvqXmYhIpO+bxiozkvnsSmCk/X5o7Llcxekx5x/
p1Wh6LLc6fryHd5lva6Oc+onItk6o9ip776pYqR6SXJXIDy61A2qJe8BrdlT
R82KH9P9/k2nXQhtmQyPNFun5QErMoYatmU2puturjgPSUkN2+DRikggD0TG
ACY8YsQI3aZUsAmER5fuAT7/fXAiKI6BzxBpgtYfw1cvNPNZ7jyqWXV1dYxq
J2EXtGGqhwuU3fn8nwJLkhite+dSNwyfxZwOqZILPGJQumu9llOvDAaoqgZn
RvmIBx0e62t3kqkunQ9icUFnQXWJ4cNudX+8CWBt15Z7Z4qr711RuWvGxB8d
2PWJq5RaYCFz1TDwiLnpDhUbV+VhOPpK1Nols9Yvy1XDRDvCoS7k0N5t5DQ1
rOHRpW6zpo52qo/5MhkeR40aRaKgQano4nR5x+MTOh6vYpWUlMA7kB0bYqLT
RRXaAk2JIMdiuEFSUpIugXVxjzNnztCsiCs6Fbg8iKQePsLK+CzYHI2RXSD5
MMqRwSTVLqi9o7bXr19n7zZu3AgDqoNj3Tunujk9iWOVCzz29/LU8ePHOQ7V
1dXEb8gR5x8KeCQkQHneZ9FmabDNxw+9d+XiqYa61KhXVAN3uTzFKPxIWLrw
7rk1i7PnJkeqL57KOYSlllMN7W1v5c2IgvhwEnDy3XNncqdHlK24h+cul6es
8Oh0eaq6fDWcS5nXujqZS336dYhEA9ZjCo9YAYupYb6rGNpQwKPHbqubN29m
o07JAb8lunCIqEx9/b1bUfiV9U5cfn7+wOBx5cqVehYEHdht1b1uWmlpaUVF
RYHTyXL6AHZ3d5NOA+Moh07tmnqOEhoNLIdqcPD1qAqZgwKPt7pvLsyYgrMF
3lh0maWEHfEXdNadOx/ieyUFmQBdyoSX9O1I4E51MVXLZE55fWDwePLIvcNI
YCP1Hdxj77bqUjct9isx/LlTR/vxCEwoyWR41HakRFQAykgI+o68wihbZtPd
D3z+nqJkMzVsg0csRS/GcG7u3ZyPH0ZFRVk3GhEREdhaXboHKHFIac4UpW83
+Pz3BSBKwhgOoFZRPTqUeWp7aW5uZlRfycc6yGN676ZOnWqtCbOUH+q9c6kb
MY+jRwnsb2NjY9DXJrvAY1VVFeeU9PR03Em7ilOvDJxHg60SR3hw4ZF4RvgJ
+lSj0ywQLLArgkY8dOzgHqaQxKxrvXniCIENZtSrKGAEHq3RcefmYuxOjxIs
V8xNVsP++wIfn6qUfamHxzU8utTtQHX5tLBhi2bGkfGIlx6PjyEyGR451TqF
LuvlHY9P6Hi5iqUuquj38pG7YmJigraL7OzstWs/vgFE48VS9O0k2ikNk2RF
LtJXk2yyPojEujoCUdvhlk5cqqmqIKH2DnPQ1SMWqpRo3TunugV9EscmF3js
1+UphvlArZfT8aJBh0f4Dieprw1CwUFn9fbeTo784emTR/SU3RjB/RDi5fJU
7+3bNPbz77T67hvFW83H1SyYjlHdietwzQ4gUQ27XJ7S8Ohyeaps+VwW83pQ
RIOnxxQeSTI0N07ZtHqsgOWHAh7VC3MIIQSqXbt2ub8wJyMjA1tgyaamJoxR
dbJV19nUpfiKigrqprxadZBQT/2QoNjKwOAxMjKStMNGKZxcp85ZgS/MCawb
0Wjjxo3sJvVhIrGQHQzctbl+YXo9PT2LFy9mX1QcPXLkCB8TG2J1jg+bZtjn
v1PA+YW9U+jHMqqfMJXBNtVtXFZhZwcFHglCeTOichLC8BYsS/2pm4wus7Ra
T5+cFvYs0YhZVy52QGGaBKs2rsqKHa4y0sr5KYuy4tS5ryg/rXhhhv+L9+G2
dcuwyoHB49yk8WffPHH5Qvuaxdlpk15Vic72wpygdSNV4q6Y/7WuziP7KhPG
/kBfA3zSZDI8WpswGYOmSrRQl8StnfADe4vptTCfsLAwNWyDR2vhwNScOXcf
5vUIjy7dA5QwT5o5rZUGqCdiVoWFhTRYrABwo43jAL4A8+REwKhOidasxd7F
xsbqAilk1KhRNnh0rxvOfODAAaoBUwftVMaJwAqPHBAbFHO0wUD2TuVSp14Z
KpFaT4vUcBDhsfForRM5usyqrS6fMfFll2I3rsrDMXKnR/TeD8Cdl84nhj+H
q6h3c73td573b9w96ahnHvW61eUlWJweJSJqCGVgw4qPj/a5M42B8Ohet/eu
XCRtrspLxS1denoYKJPhUQcGJafLOx6f0PFyFUu1C6st0IKCtgtyTuBlGX26
x0Pi4+Opp7Wzk8uDSNar7vgGs3TnBNiTUdVzVe2d9b2y6vFw29451S3okzg2
ucBjvy5P+fxnDWviGvRuq52XL2TFjti6don3WRfa2wIvAWnE8zlcnrp0/l1C
UXrMa0QRtUrz8buPUdy/ynTvCiRph1H9roa7l8giXlDDLpenNDy6XJ4i4MGz
cxLHsUctpxoM/zm2UNJjCo80WOyUBkiqKS0tJRIMBTz6/I2arah+6URE28Vz
LZIJDs+mVbd8KsNhsfXw51tNnbOzsxnAP4E4nComJoZkAh4ODB45VhSoXsSh
g6Lt7dxB69bZ2UnmVC+gwLUAyaCNDrOifNZlRcrXzzwCxWlpaaRTyuSoWh+9
pErqJzlYi/3VPg+icspgl1m+pqZmUOCxva0l0FIUsrnMsgpPW5w9lcCWMuGl
vNTo/VV3b5u2tTSRc/RFs5vXr2bEvKYuc3V1XlqaM43RWVNH7yhbQSIaGDye
bqyfmxxJtINw9a942H6qI2jdWpqOEfNSo17Ge+enTNR3MJ9APS7wiB2xjB6t
rq4eCnj02G3VpXsAwhZo1NSQLSYlJelXRlMUx00tQ0wd7v/hJF8/4RFX189W
qxVt3Vbd66aF+bCu9caoEt5uPYCqR33g6tip6t7v1CtD3WHh+OspfEaDBY8E
MFqufjja4yx0ruUUvgG7BZ3bdOwgZtJ6unFW/BjVBx5BdvoaPjq4u2Jg8AiQ
6ll3n34K6LbqXjetqo2r5iVHui9jlEyGR+tX3ed8ecdj1PFiRKqruRd4xEP0
fcNAqeepcQN9E9Pn+iCSLcVRB/1EpPW1DGrvrHiVlZUVCI8udQt8Ese2gHqn
vR613vf09efylM9/1tAd41UNBxEeL194N3PK6/ptDB5nnX+3lVas7hsGVeDl
KYThlC2f23Xl0ocf3v3iTY94Xl37UjlHX65vPX2SUf02QpISeUkNu1ye0vDo
fnkKRMU81y/PJSk9yT9e9pBlIDwaq2XLlqkeYobIZqohpgH8VMdjIZupigas
xwUe8VjihP4ZHfU7NYMOj0FfmBP01yGdugdQAmup99gQnCZNmqTe3g8MAlnb
t29X08mxUOoA4JHdyc7O5uC3traCb/ouoXXvnOpWUVFRX1/PqYpPXL12NfBi
lzrO6nYG/6mzzmME0ebmZqIXZaalpanu/S49RjjCHEwWYCtUhmIHBR4bDuxK
GPuDXVvW6L4Q/7+9M/GK4lj78D958yXRk3vvd00iRMBBVsEgsoMsBkFEEFkU
XJEoalAUERWUCCoqsgiMwDCjAyIgCKhzf1CmbmeWthlmxmL4PYfD6aW6u6ah
33mf6urqyVcTX1wlqSrcl78n5Fl3x5TdNjrcf6PxpBi0efbtm+y4/xcPCr0c
6tsX/u3A0xXztYwOYRolHasd1QqSQr2TR6RkyDZRH4htZvQ/sa1YpR0wx1Pd
Gk+VDfX1TE/ZrWMj5XmJp4/+TYIUZ6PIo07zjg/l0Xi31fxV3H4WbAVJxCWP
I0ZEREjz0nkQaU3yKNuxFxcX4Yni7p720+nUTSKfxHFajnOlPYGolds28C82
T4lqaJ8+qKmp8ZU84kLLid/WVF+9plWO1U6naZFb5WPUTrhtnkLkQUiBkIrZ
VxOj8h1Da5JHT81TUh4NNk+9eP7I08vaiM+hPOqAlACZg81mwzWLyCb7WSkC
5XEjQnn0FRtFHh2rnZriVsnKyhK33X0ujw6XV3VERUVpuwRocds94PLly9hE
9liAbUGaxMgPECuUR0aXlJTU0dGxc+dOL+QRn66lpQU7QQpaVFQkD+T0qg63
dUMcRj6GE4KEEws9dW3F+cRJFoMl4o8i87HKyko5jmJFRYW8a+m2V4Zj9Uut
uroaySfSYxhlWVmZT+TxREmGU18IqWw6qyRLi+8hcfl7tqdEfJuX+PPp8rzX
1nHoLbKvYweSpE23XDq9f/ePc7Mrp7ej5VJe4nb8lOcmdN297p08Xj5TcbHu
CBQyM/pfqIDbV3W4rRuWn68pWnm13M7vkRDWVxW+m5vRP0VKsVHkUad5x4fy
6FiNNri+tAPm4MpyrTCuBYQOFMB1iu9xZE3SBCFWYjxnTCNwZWdni38nnQeR
1iSPCB0IVjgortldu3a5PlruqW6ensTRgrCAaC+Gu8dfGWdJyuNam6fwiXD2
RIfbgYEBTPtEHifGhrNi/l1Xmi3boOSdRJ1VktYrZ9NMW9pvNNptFphmZ9tV
0d/JU/MU/lgIAneaLzhWb/9VFe5LDvvGC3n01DylHTDHU/NU29XzWDj52jr1
2oowhdDHnquBgfKow8o7+PLyZOfMNb2cNwBQHjcilEdfoYg8qokYWcLTi2UD
j2tHu2DCu1d1bAiQ2sElv3Ytvg4bRR4dnpt3fCuP4lUdmBXvPy0tLdU2+2iB
SUGawsLCoEVpaWmi/4B4k6wcnFm4VWPjymOwOg8irUkee3p6RNNTamqqfIuH
06s63NZN50kcLbjMsX98/IyMDO24f2ttnnKsNojFxMTgT1ZQUHDx4kWfyOOd
5t9dn9YRyqazSktnW1NxWmRKxHewwsrfkvufduk3Tw319RSn78pN+Olgys5H
929B/byQR0/NU1p59NQ8BdU9lL4rffXpHgimZXRI/xQRX0F5JGoSrPJIfAXl
0YnHjx8jL5qenkbWhOwIKZA6bbCUxw0K5XGtW/lcHtUEsQVGJm53qoDryBhB
hhev6tgQbOYIs6GhPBI1oTwSfSiPTty7d0+0fsfExJSVlWkHHvzqUB43KJs5
taM8OjE+Pt7Z2YkPiG/n2trasLAwdXSG8rhB2cwRZkNDeSRqQnkk+lAeiSIE
sTxuZiiPTuBspKamhoeHm0ym3NxcdXrFOyiPGxbK4waF8kjUhPJI9KE8EkWg
PAYllEeiDsEqj2SDQnkkakJ5JPpQHokiUB6DEsojUQfKI1EKyiNRE8oj0Yfy
SBSB8hiUUB6JOlAeiVJQHomaUB6JPpRHogiUx6CE8kjUgfJIlILySNSE8kj0
oTwSRaA8BiWUR6IOlEeiFJRHoiaUR6IP5ZEoAuUxKKE8EnWgPBKloDwSNaE8
En0oj0QRKI9BCeWRqAPlkSgF5ZGoCeWR6EN5JIpAeQxKKI9EHSiPRCkoj0RN
KI9EH8ojUQTKY1BCeSTqQHkkSkF5JGpCeST6UB6JIlAegxLKI1EHyiNRCsoj
URPKI9GH8kgUgfIYlFAeiTpQHolSUB6JmlAeiT6UR6IIlMeghPJI1IHySJSC
8kjUhPJI9KE8EkWgPAYllEeiDpRHohSUR6ImlEeiD+WRKALlMSihPBJ1oDwS
paA8EjWhPBJ9KI9EESiPQQnlkagD5ZEoBeWRqAnlkehDeSSKQHkMSiiPRB0o
j0QpKI9ETSiPRB/KI1EEymNQQnkk6kB5JEpBeSRqQnkk+lAeiSJQHoMSyiNR
B8ojUQrKI1ETyiPRh/JIFIHyGJRQHok6UB6JUlAeiZpQHok+lEeiCJTHoITy
SNSB8kiUgvK4sTh8+PDx48e/WCwyMvL+/ft+qsONGzd+/fVXP+1cQnkk+lAe
iSJQHoMSyiNRB8ojUQrKY2DIzMz82R2JiYlr2k9LS8vdu3e/WKyurm5oaMjb
yjqzc+fOBw8eyNne3t76+npf7dwTxuVxbGSgqjAlPXJrRtQPFQVJ7+ZmxPKa
orS9O/4hf06UZMhN3r6ZPHvsQE78trTIrSWZ0Y872/zyGYg/oTwSRaA8BiWU
R6IOlEeiFJTHwGCz2V6u0t3dDWe8c+eOmLVYLE4lkYd8lRrq4CSPgcGgPI4O
96eZtlysKx189tD8ovfP29fm382JVZDH+uqDE6PD4mfKbpNbleclHs6MQXm7
zXKj8WRy2DcvXzz31ych/oHyqDjj4+OIdW/fvtUv5u+eDH7thiGgPAYllEei
DpRHohSUxwCD7yMkVAMDA9qFv/zyS3Nzc35+fnh4eENDA05pRUVFfHz8jh07
kFZdv35dltR2W/3tt9/q6upOnDgRtcq5c+c+ffokVmnzJey8paWlsLAwIiIi
ISFBm0c9e/Zs7969KJCRkfHw4UNUzG63O1U4MTFR3ifFbh1/T/auXLmSnp4O
F0ZtUfnKysrl5eXW1ta4uDiTyVRbW/vx40dRcmFhAVWNjo5GsezsbKcz4IpB
eSzPTWioKXa7CvLYVF/luhxVgi12td+QSzKifmhvuaRzlNSd33fdvX6iJBOi
WpgcPtTX8/bNZE1xWlrk1uL0XWMjnz/L5Gvr8eL0zOh/rixPi+zr+fOL9Sde
Q3n0E0+ePHHbTQJ0dHQY38+bN2+OHTs2Pz+vX8y3PRkQSJOTk7VLfNsNwy0G
5fHF80d1pdn7d/+40uEhI/rhvVbXMpaXL1IivkMMkUsQas5UFBTuC0fUOl9d
5OOqE89QHtXHSNOQwVYsrzH4MNE6oTwSpaA8BhhP8gir6u/vh/3hTMKzLl68
iNwYKvfgwQNYWGdnpyjpJI/YsL29HTZksVi0xZzkESqH9Ak7x0LMihA0PT0N
OT158qTNZkO6uGfPHrfy6HC58+gkj3DSoqIi1Lanpwd1QK1QSbPZDBuFJ6J6
oiTUuKCgAAEQ/29NTU1hYWH6mb8ReZybmd674x9tV88fzduTE/cf/B541i3X
Qh6zYv6dHrn1QNIvF2oPz83+77sDJaF+7+ZmcE4ed7bBDW3jZp0DoUBe4nb4
pnXcjPxtf/y2yt+SH92/hdnTR/Ohk0Lbjx3Ye6o897V1/M3kq4Gn3cP9T/Xr
T9YD5dFPIP68/AtczpmZmXLWyY8U7CbhKo8BwKA8Np4qu3S6vPfRPfOL3j/O
VSJ2Pe1q1xZYfL8ASRQNUHLh5Gvr5TMV3R0tpdmxlMdAQnn0E75qnnIYaxoy
2IplEIRB1HN2dlYuMfgw0ToxIo/2V5bfT5Qg4Uk1fX9g747rF+uWl5ecyrxf
mEcBBJ+J0WG5EOGlOH1XmmnL/t0/1lcfnJ2Z9nn9SZBBeQwwnuTxwoULnjZp
aGgoLv58c81JHoEsVl5eXl1dLaad5PGPP/6QxWJjY0V8hp9CGOXNylu3bnkn
jzBEZJtitqamBv64uLgoZsvKyhC0MTE4OBgaGqqN3hDJxsZGTx/ZYUweR4f6
EAORaP15+5pldOjq+ZrksG9Gh/vF2s62JuRpYyMDD++1Fvwaejgr9uPHz7ku
tBH2h233hX+bEfVD/9Mu/QNBHhGHxfTM9BQ2vPXHOTFrt1kw+8a+chEhJnfc
vKy/K+IrKI8B4MiRI/n5+dolorMBQkpcXFxISMjHjx+7u7uzsrIiIiIQdg4e
PCi/ULQN/sh8MP3o0aOUlBSUxB7k1e3akwFLdu/ejbBTUlIyN/e5Fzq+aKqq
qsRR6uvrKyoqRGzRgsimTUSxH4dLMLx9+3ZRUdGOHTsQ/Z4/f47EElE0LCwM
yjk8PCx3hfw2IyMDxeLj40+fPo2j65wl77qtlucmnD12QLsEbnjlTEX7jUat
PEqqCvcZkce2pvPQzK72G/l7QtIjt56vKfrwYRnBMH/P9szof106VS57g7S3
XEKGmRLxXU78trrSnDVVfjNAefQTxpunkJ/If1dFcJXHwGBEHuGAJ4/kPO5s
e/ni+b3WK2mRW3G9O5VBzDl+KEMrj4O9j5A43b72O9xzuP/JwZSd1UWp/vgI
JJigPAYYT/Lo9FDh1atXk5KSkLqILCg19fO17CSPp06dkptgGkmRmHbKlx4+
fCiLIXm7du2aY9XsgFyOXM47ecQO5SooMDIuOYukq7CwUGzi2sbomvtpMSKP
iJCIgUi35JIjOfH1VYWuJS0vX6Dk4LPP5+H3EyWHM2NePH+E+Hn9Qi38UdsK
5wrk8dnDe2IaX2fYlfTN9wvzmBU9VztaLsFGj+bvabl02jo2ol95sk4ojwHA
rTyGhobC45ABirCPUAN/tNlsuGARUmBhIt9zlce8vDzIGtbW1tbu3btXtFw5
xRPEK6xdXFxEGomsUoY7xLfY2Nhnz57hQFgIi3QbQFzvPLp2w7hz5w7+B7B5
dHQ0qgTlxCw+qWxMwzcadLK1tRXHGhwcTEtL0++W5p08Hs6KvayJXUj5itN3
LS8trV8eEdBqD2eNmwcRpiCMNcVpp8pyEQOfP+6ETorusiMDT9NMW7BkZnrK
Om6+d/PKmiq/GaA8BgDXCCNiBVIOXMhIgXDJWyyWgwcPRkVFhYeHI8HAEllY
Xt06zVPaQKTTPAWQGsXExODax3JMo4xTbfHH1eYwyMccf8/KjDdPIcNBMdEa
hsN9UQy96Lba/PuJ3ISftEu621tKs+OQrmjlseXSqfw9IbLM3esXETR0dmu8
eQpaipKIM1henpsw9dq6pvoTlaE8BhhP8oigJ2fb29sRT548eSLu6F2+fFmm
Q07yeObMGbkVkisEWDHtlC9pd47Q2tTU5FgN2j6RR4RiuQrymJ2dLWdRPXFv
FBmdyWT60rn5G0bkccpuQwxE1JJL6qsPVhQkuZZETpgS8e291pUEyWZ5KXVP
ULY/QT8rgzxqH2DE5hBPMb34fgGzo0N9skodNy8jc4NFIgn8wock64DyGADc
yiMSIU8BH18HISEh+FpxuJNH2cEMUoZZpFUOl3iCaLO8vCxmb926hQQME1iC
ZEz2gUdyEh8f7508NjQ0iGkcHXVAdBWzCDgyABYUFJw9e1buAf6IDXXugHgh
j0i9Uk3fv5r4HOIQN3Lit4kWp/XLIzK69wufu3lcqD2MzG1p8fPf6+yxA2In
Dztu5iX+vLS0aLzOmw3KYwDwJI9ZWVkI7/jiXlxchHMhFCCeIG4gRCAUyETF
SR7dNk85yaOn5qnu7m6swoFw3JaWFmQsrvLocHfn0UkejTRPzczMYNXJkydR
N6hxeXk5opb+UwBeyOMf5yoPZUTJWfsry/74bXabBdqolUckM0hXkOGgbrMz
00fz95yr/M39Hlcx2DyF2JIWufVWU/30lB0HfXT/luigRYIDymOAMSKPCESI
M3K2tLTUH/JovNtqVFSUfJrS4ZU89vf3Y+f4rXtu/oYReUTlcxN+QoSUS8r2
74Y/upYUdx6fda/01xXNblp5LM9LdHu/UmJcHiXXL9QeSt+lX3+yHiiPAcCt
PDrZGZKf4uJiRInt27eLBnnR1cFVHmXHdaRtmDWbVx40doonspeFYzWdi4iI
cPxldvgtVx06dMg7eezq+txnANED++zp6RGzCwsLmBW3BrCJa08Jt7FRsFZ5
RIqFtEo+8IialO1PuHv9ophdvzxqM8YbjSeP5MTLWUTL48UrEXv+3WzhvnAY
K/b5uLNN2iWRUB4DgCd5xAXlaZOcnBxc5mLaSR7dNk85yaPb5imQm5tbVfW/
EfYgdN7Jo5HmKSzU9tFCfcLCwvQTpLXKo83yEkFGDgz44cNyaXbsn7dXep05
ySOA2aEwFHL1pWaZrk9KajHYPDU99Rp7s+qOJkE2LpTHAGNEHhEYExISZmZW
3leIVAdr/SGPTgPmIH/zlCAhytXU1KC86ODhhTw6VgfMiY+Px8dBwo8Ij5JP
n+qNJ2NwtFUkWohjj+63vraOiZduiGcep+y2i3VHkKRB67o7Wgp+DS1MDl9e
fXAJvwuSQpFQmV/0vraOt145u+KVf/VKPXYgqefP205HMSiPjafKhvp6pqfs
1rERCOnpo/kO4jcojwHA0zOP2iUIVpWVlQgdSIHgQYgqoqOCqzzKrwkhj/gL
OnTjCeQxPDzc8VfY9Ik8aoMh9im7wKFumBVpv8lkktmpEdYkj0+727Xm6Pgr
huwL/z/xgyAmZrvuXtduuKZnHuVsy6VTR/P2yNmm+qqaorS/qr3c/7QLOol4
eGDvDvmSIyKgPAYAT/KotbP5+fna2lrxkLVoyTl9+rRY5SSPbpunnOTRbfMU
iI6OhkvKVYgA3smjkeapkpIS1+apO3fu6JyoNcnj5GtrXuL2K2ePySVXz1fX
lX7OzZzkcWJsOCfuP7ea6jGBgFCUulO/Ld1g8xQ4VZ6bZtqC43bcvDwzzaFi
gwrKY4AxIo/IwaqqqqKiomBbiEsNDQ3+kEfH31/VgfI/exjOure3F8VCQ0M9
vapDltSRx8XFRQR8xH/sJzY2trS0VJsKumJQHsHtaw35e0IQo5AyyUcR52am
a4rTcuK3pUR8dyDpl4t1pdoBxOCMdaU5WIss7lD6Lm2ShpztTvPvTocwKI/n
a4pWBjrb+T32jPD7bm7GSP2Jd1AeA8AX5RERA3EDZ1XMWiwW8bySw6fyaLzb
aktLS1LS3zqueyGP+asYP0vG5XGlhd+0RTZVCZBk2sbN8udaw/GMqB8w4WRz
PpdHyeLie8RJ0TGDSCiPAcCTPGpTysrKSqQoSFbFwgMHDsAlxSoneXQbYVyf
eZR7lhHG4Tt5NBJhDh06JEdBNIhxeXxtHXPqkQUQE5LDvpEtVKJ5SnTTguJJ
3QMDz7rlGIBuWVOEGRsZuHn5DOwyPXIr36YdTFAeiaCjoyMiIkL2Yv3qGJdH
sjmhPAaAL8ojPA7529WrVx2rCRsKb9++3efy6FhtHIuLi9MOmIOU0rXCPT09
0Eyz2YzsTgyR6oU84hstJCQER8H3IwJRV1eXTFbdYlAeH3bcRP6GVGpidFj8
TL6acC3m2m1VFC7bv7v2cBYm5JOS2GH1wRSnzQ2mdk+72jvbmmyWl2/fTD64
04yKYVq//psNymMAMCKPiA+trZ9fioqAExsb6w95NNhtVbSPaZvZvZDHxsZG
1HxNT0kblEfr2EhO/Lam+mqn5ZOvrbJ56ml3+8p7grrb375Z6Wl2/FAGfmTJ
wd5HWKszuI0XzVOO1fejXT599Iv1JxsFyuNmpq2tDf8A09PTjx8/RmJ28uTJ
r12j/0F5JPpQHgOAkW6rvb29ycnJyOiSkpI6Ojrk+Fq+lUfxqg7MIuk6d+5c
aWmp2xFQkVtWVFSYTKafPbyqw0hqB54/f75///6wsDBYalpamhih2hMG5fFE
ycoI+dofbdIlcZVHp60Kfg0Vy1uvnE2P3Oq0ucHUDikilmfF/CvNtKUkI/rJ
A70uc5sTymMAMCKPxcXFJSUluMpwdZ89ezYkJMQf8igGzEFShK+Vmzdvehow
Z2FhARW4ffv2zMyMGNLQC3kUA+YgwvT39+NwCKEIbvqv/zAijxNjw1kx/64r
zZbNU26HkXfqttrZdjU57Ju71y/abSuv6jiUvgsBQdxHsI6bESVeW8e1mxuM
MK8mRm80nhw3D85MTw319eTE/ef+rSYHCRYoj5uZM2fOIIIh3CUmJjY0NMin
yFWA8kj0oTxuWpDYwDfF7U4V8O5VHURxKI8BwIg82u12lEGukpCQcO7cuaKi
In/Io2P1VR04inhVx6VLl5w6wEuam5tjY2O3b9/u9lUdBpun8OWFz476i5d6
4BPpv0zWiDzeaf7dqaEJP/L11hLXAXPaWy4Vpe5MM23JTfjp7LED01Ofv1jN
g70oCQHUbm5QHrGTEyUZ+3f/mBLxXUFSKIqp07GNrB/KI1ETyiPRh/K4qUAG
2NnZifQJkQGJFhK8tQ5c7z8oj0EJ5XEzU11dLV+crQJevKqDEP9BeSRqQnkk
+lAeNxX4q6WmpoaHh5tMptzcXHFPQREoj0EJ5XFTgau4ubnZZrPhL9ja2hoa
GirHTVUByiNRCsojURPKI9GH8kgUgfIYlFAeNxUfP37My8szmUw7duxISUnp
6FBr8GHKI1EKyiNRE8oj0YfySBSB8hiUUB6JOlAeiVJQHomaLC8v6z8/TjY5
lEeiCJTHoITySNSB8kiUgvJICNmIUB6JInz69Mlut7OxK8igPBJ1oDwSpaA8
EkI2IpRHQoj/oDwSdRgdHRVvGyFEBSiPhJCNCOWREOI/KI+EEOIWyiMhZCNC
eSSE+A/KIyGEuIXySAjZiFAeCSH+g/JICCFuoTwSQjYilEdCiP+gPBJCiFso
j4SQjQjlkRDiPyiPhBDiFsojIWQjQnkkhPgPyiMhhLiF8kgI2YhQHgkh/oPy
SAghbvGVPC4sLPiqSoQQ8kWGh4ftdvtat7JaraOjo/6oDyEkmLBYLOPj42vd
ivJICAl61i+Pnz59gjzOzs76qkqEEPJFBgYGpqen17oVfBPW6YfqEEKCCmRH
NpttrVtRHgkhQY/ZbF6nPIqdWK1Wn9SHEEK+yPz8fF9f3+Li4lo3fPfuHTZc
WlryR60IIcHBhw8f+vv7Z2Zm1rrh27dvsaE/qkQIIYowPDw8OTm5zp1MT0+z
5yohJDB8+vRpZGTk5cuX3m2LoMeeq4QQHSwWy+Dg4MePH9e64fv375kOEUKC
mA8fPiDKzc3NrXM/yMfMZjNSsuXlZZ9UjBBC3IJoY7PZ+vv7vU7PEPEQ99bf
aEYICUpEe/jbt2+92xy5EEflIoQEK8jBBgcHkYytf1fQxqGhoYGBAa/jLSGE
6LO4uGg2m2GO64wzU1NTSA5HR0fZf5UQIkEmY7FYEBy8GMlZMjs7iz148UQ2
IYQojnj2B0mUr3b44cOHiYkJ7BNCiqxsnBBCfMTY2Njw8DDCy8jIyPz8/Prj
1dzc3NDQkNghdv61Px8h5CtjNpsREF68eLH+NnCbzSYM1CeN84QQogJwxv7+
fn/0rFhaWnrz5o3Vav3a3wOEkOBhYmICmZhPtFGCvO7du3fYrRiTnxCyaUEQ
ePXq1dzcnK90z263I8saHh5GhIGNzhBCyMYEEWxycnJkZKSvr89ms7FNjBBC
CCHE5ywtLUFI4Y+wyD5CCNmYIIINDQ1Zrdb3799/7bBKCCGEEEIIIYQQQggh
hBBCCNlc/BeEvLxT
    "], {{0, 541.5}, {911.25, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->96.],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{911.25, 541.5},
  PlotRange->{{0, 911.25}, {0, 541.5}}]], "Output",
 CellChangeTimes->{
  3.8022500581749153`*^9, 3.8022501088832703`*^9, 3.80225450408464*^9, {
   3.802256479799716*^9, 3.802256488210985*^9}, {3.802256533560534*^9, 
   3.802256551047716*^9}, 3.802308696440783*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"4ef21db1-f5bb-4aaa-8f05-f44d29cca053"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.8023086010737247`*^9, 3.802308601280203*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"1b3a3e0e-0e83-4890-bff3-a97a433d4b12"]
},
WindowSize->{1440, 786},
WindowMargins->{{0, Automatic}, {0, Automatic}},
TaggingRules->{"TryRealOnly" -> False},
Magnification:>1.1 Inherited,
FrontEndVersion->"12.1 for Linux x86 (64-bit) (March 20, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"7674175d-5657-4b2e-b3a7-4166272bfe49"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[561, 20, 167, 2, 57, "Input",ExpressionUUID->"5a8ca388-0aad-49b5-a45f-c4970f517b63"],
Cell[CellGroupData[{
Cell[753, 26, 490, 10, 80, "Input",ExpressionUUID->"4727370c-7fdf-4e77-a4c9-f778bef31e81"],
Cell[1246, 38, 8571, 207, 811, "Output",ExpressionUUID->"e09a0a21-1878-4c75-b5ef-aaef92d7c374"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9854, 250, 382, 7, 57, "Input",ExpressionUUID->"bd0b29ad-2acf-4c30-aee3-4ae056656c6c"],
Cell[10239, 259, 507, 8, 37, "Output",ExpressionUUID->"f9e13f97-d4d1-490d-9387-d25f047fbea2"]
}, Open  ]],
Cell[10761, 270, 890, 23, 80, "Input",ExpressionUUID->"0e407e95-5a7d-459d-93b5-2d51a287e21f"],
Cell[CellGroupData[{
Cell[11676, 297, 506, 12, 33, "Input",ExpressionUUID->"1379e3df-6ab0-4450-b010-10b666ae497b"],
Cell[12185, 311, 73349, 1324, 79, "Output",ExpressionUUID->"34a38d58-4a09-4bf7-a3a5-7ae7831a7647"]
}, Open  ]],
Cell[CellGroupData[{
Cell[85571, 1640, 147, 2, 33, "Input",ExpressionUUID->"7ed68a47-bf36-4510-b666-6d42916535ee"],
Cell[85721, 1644, 10572, 303, 788, "Output",ExpressionUUID->"1a5649c0-ed9b-43b4-8933-1069d67b81ef"]
}, Open  ]],
Cell[96308, 1950, 172, 2, 33, "Input",ExpressionUUID->"847e00ea-933e-4733-9f67-859ba04d4591"],
Cell[96483, 1954, 10085, 185, 1056, "Input",ExpressionUUID->"ece5c57f-d3be-4f4b-a46a-fce468ff3da1"],
Cell[106571, 2141, 152, 3, 33, "Input",ExpressionUUID->"6cedd737-f182-4336-9705-b6bb8b1b1589"],
Cell[106726, 2146, 177, 4, 33, "Input",ExpressionUUID->"0bc8afe9-0e3b-4538-bcbe-8b70d772790e"],
Cell[106906, 2152, 151, 3, 33, "Input",ExpressionUUID->"626abb8e-a265-43ed-b9c7-f2e99dbda43b"],
Cell[107060, 2157, 197, 3, 33, "Input",ExpressionUUID->"7c62b28e-1776-4d5d-b5ee-c9a71a33f479"],
Cell[107260, 2162, 246, 3, 33, "Input",ExpressionUUID->"1722031f-161f-4479-9903-92e8758318c8"],
Cell[CellGroupData[{
Cell[107531, 2169, 222, 4, 33, "Input",ExpressionUUID->"42218436-8e48-4cf8-9b3f-def10a98ae75"],
Cell[107756, 2175, 375, 6, 37, "Output",ExpressionUUID->"c990708c-9dd5-47bf-9c51-489d694c6cee"]
}, Open  ]],
Cell[108146, 2184, 1540, 28, 315, "Input",ExpressionUUID->"1704e8ab-c0d7-4e17-a985-415299e87c72"],
Cell[109689, 2214, 206, 3, 80, "Input",ExpressionUUID->"a41be85d-0a07-40a4-989b-e80cd19b06ad"],
Cell[CellGroupData[{
Cell[109920, 2221, 273, 5, 33, "Input",ExpressionUUID->"9aa13156-d8dc-48d2-b842-15fcb8cffd88"],
Cell[110196, 2228, 496, 8, 37, "Output",ExpressionUUID->"3afa0079-a487-40eb-8301-8a28dca116a2"]
}, Open  ]],
Cell[110707, 2239, 2223, 47, 221, "Input",ExpressionUUID->"b8d8b756-d429-43f0-ae27-78459598e83b"],
Cell[112933, 2288, 199, 3, 33, "Input",ExpressionUUID->"091548ab-b3a7-4e39-b4c7-6446691c4931"],
Cell[113135, 2293, 1791, 41, 244, "Input",ExpressionUUID->"a3f59298-3ad1-4c7b-895d-70d4718e9b49"],
Cell[CellGroupData[{
Cell[114951, 2338, 118, 1, 33, "Input",ExpressionUUID->"5562ddc4-8c63-486e-b1d5-b5eaa617cacd"],
Cell[115072, 2341, 4260, 115, 155, "Output",ExpressionUUID->"b004ea20-eff5-4c4a-aced-b10b330d2066"]
}, Open  ]],
Cell[CellGroupData[{
Cell[119369, 2461, 3139, 74, 198, "Input",ExpressionUUID->"cbffbe08-9366-4963-a362-49cd67a898c3"],
Cell[122511, 2537, 5022, 138, 202, "Output",ExpressionUUID->"731c00e5-37f3-49ba-8d33-402c672ac430"]
}, Open  ]],
Cell[CellGroupData[{
Cell[127570, 2680, 340, 7, 33, "Input",ExpressionUUID->"4fc06b7a-00ee-4e57-a945-3c3d3b9c0dfa"],
Cell[127913, 2689, 65497, 1217, 68, "Output",ExpressionUUID->"b8abcf50-f5fa-426c-aef9-5a639c71c589"]
}, Open  ]],
Cell[CellGroupData[{
Cell[193447, 3911, 444, 9, 33, "Input",ExpressionUUID->"c66804c7-c429-4791-bbc0-a10076b01918"],
Cell[193894, 3922, 61763, 1152, 68, "Output",ExpressionUUID->"2589e312-6d26-4454-a671-86d55fe1f1b7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[255694, 5079, 600, 12, 33, "Input",ExpressionUUID->"66b67e89-a99a-4e6d-ac47-c45b5cee4fdc"],
Cell[256297, 5093, 122011, 2162, 68, "Output",ExpressionUUID->"f227327e-77fa-42c8-a877-f8c1e488ffe0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[378345, 7260, 336, 7, 33, "Input",ExpressionUUID->"d49fedb1-d8a7-432d-a481-b9c744e9bcb4"],
Cell[378684, 7269, 57670, 1101, 68, "Output",ExpressionUUID->"9ffa67c0-980e-46ab-9082-e9c7c8b02c0c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[436391, 8375, 340, 7, 33, "Input",ExpressionUUID->"fb06fd53-1466-43aa-ad6c-5303ebf32d53"],
Cell[436734, 8384, 41399, 794, 68, "Output",ExpressionUUID->"7b519ac1-8c5d-4b4e-91b1-5e6080c54081"]
}, Open  ]],
Cell[478148, 9181, 365, 5, 33, "Input",ExpressionUUID->"54393bb5-53c8-4a7d-95b2-fad82ee12176"],
Cell[CellGroupData[{
Cell[478538, 9190, 1456, 37, 127, "Input",ExpressionUUID->"3ff20d42-8b66-4e19-9e44-1a5f434e8b39"],
Cell[479997, 9229, 216, 3, 37, "Output",ExpressionUUID->"8f9e99b0-d19c-4337-aac5-ac4ba6347ffa"],
Cell[480216, 9234, 216, 3, 37, "Output",ExpressionUUID->"055f1859-4b66-451d-8eaa-b68ab5e46483"],
Cell[480435, 9239, 217, 3, 37, "Output",ExpressionUUID->"19ad5094-2b2f-4396-8a21-042c37237438"],
Cell[480655, 9244, 217, 3, 37, "Output",ExpressionUUID->"dbcd4697-a1ec-4f0c-a2b0-4ce356a9ee4e"],
Cell[480875, 9249, 238, 4, 37, "Output",ExpressionUUID->"5a11b324-25da-4a0c-9931-3a020023aa58"]
}, Open  ]],
Cell[481128, 9256, 161, 2, 38, "Text",ExpressionUUID->"2a52db0b-39d0-4a5d-9322-b2ec939c7328"],
Cell[CellGroupData[{
Cell[481314, 9262, 1827, 47, 174, "Input",ExpressionUUID->"b3639201-f4ad-4564-a4a5-459ce151a63c"],
Cell[483144, 9311, 385, 5, 37, "Output",ExpressionUUID->"f3390657-9980-4633-8cad-524cc3a0c406"],
Cell[483532, 9318, 385, 5, 37, "Output",ExpressionUUID->"c79c459f-b8a1-47b8-b2fe-9cbe1445a84b"],
Cell[483920, 9325, 385, 5, 37, "Output",ExpressionUUID->"cc0f958d-5919-4da9-af9b-45c1ee0c5532"],
Cell[484308, 9332, 386, 5, 37, "Output",ExpressionUUID->"81b85810-84e9-4f1d-990e-2cd92a8af296"],
Cell[484697, 9339, 385, 5, 37, "Output",ExpressionUUID->"c10ec1d3-d72c-4fe6-9ce6-469e76283766"]
}, Open  ]],
Cell[485097, 9347, 226, 3, 33, "Input",ExpressionUUID->"fb459223-db71-417d-89cd-600ac5725ba0"],
Cell[485326, 9352, 165, 3, 38, "Text",ExpressionUUID->"759315ba-e93d-4c35-9d20-4a31aeac6e17"],
Cell[CellGroupData[{
Cell[485516, 9359, 525, 12, 33, "Input",ExpressionUUID->"72d9d9fa-c1e8-4fb4-96e8-aae8cf7ca486"],
Cell[486044, 9373, 148801, 2444, 614, "Output",ExpressionUUID->"4ef21db1-f5bb-4aaa-8f05-f44d29cca053"]
}, Open  ]],
Cell[634860, 11820, 227, 3, 80, "Input",ExpressionUUID->"1b3a3e0e-0e83-4890-bff3-a97a433d4b12"]
}
]
*)

(* End of internal cache information *)

